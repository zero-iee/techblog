<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Quectel on ZERO GmbH Tech Blog</title><link>https://blog.zero-iee.com/tags/quectel/</link><description>ZERO GmbH Tech Blog (Quectel)</description><generator>Hugo -- gohugo.io</generator><language>de</language><lastBuildDate>Fri, 19 Apr 2024 10:00:00 +0200</lastBuildDate><atom:link href="https://blog.zero-iee.com/tags/quectel/index.xml" rel="self" type="application/rss+xml"/><item><title>Wie wir die Quectel RN520G Stabilitätsprobleme in Kombination mit einem Raspberry Pi gelöst haben</title><link>https://blog.zero-iee.com/posts/quectel-rn520g-stabilitaetsprobleme-raspberry-pi/</link><pubDate>Fri, 19 Apr 2024 10:00:00 +0200</pubDate><guid>https://blog.zero-iee.com/posts/quectel-rn520g-stabilitaetsprobleme-raspberry-pi/</guid><description>&lt;p>Über das Quectel RM520N-GL 5G Mobilfunkmodem haben wir &lt;a href="https://blog.zero-iee.com/posts/quectel-rm520n-and-telit-fn990a28-5g-modems-on-raspberrypi-os/">schon einmal geschrieben&lt;/a>. Damals ging es um die Einrichtung der Software, um unter Linux eine funktionierende Internetverbindung herzustellen.&lt;/p>
&lt;p>Nun gibt es wieder einen Beitrag zu dem Modem - allerdings nicht deswegen, weil auf Anhieb alles wie vorgesehen funktioniert hat. Vielmehr wollen wir euch diesmal einen Einblick in unseren täglichen Kampf mit und gegen die Technik geben. Denn nicht alles, was funktionieren &lt;em>sollte&lt;/em>, funktioniert am Ende auch. Selbst dann nicht, wenn man - wie in diesem Fall - die Elektronik so oder so ähnlich schon einmal erfolgreich im Einsatz hatte.&lt;/p>
&lt;p>Für ein Kundenprojekt hatten wir schon erfolgreich Bausteine ausgewählt, die den harten Anforderungen des Kunden genügten: Ein Raspberry Pi 4 sollte die Basis für einen Minirechner bilden, der über ein 5G-fähiges Modem ans Mobilfunknetz angebunden sein sollte. Die Besonderheit: Da es sich um einen &lt;em>mobilen&lt;/em> Kleinrechner handeln sollte, gab es klare Vorgaben bezüglich der Stromversorgung. Der Rechner sollte nämlich über einen Akku mit Energie gespeist werden.&lt;/p>
&lt;p>Wie eingangs erwähnt, hatten wir das Modem bereits erfolgreich im Einsatz und waren verwundert, als beim Zusammenstecken der Teile keine Mobilfunkverbindung hergestellt werden konnte. Da kamen für uns folgende mögliche Ursachen infrage:&lt;/p>
&lt;ol>
&lt;li>Schlechter Empfang an dieser Stelle in unseren Büros? Andererseits hatten wir hier schon andere Mobilfunksetups erfolgreich getestet.&lt;/li>
&lt;li>Schlechter Empfang durch zu kleine Antennen? Durch die Größenbeschränkung mussten wir auf relativ kleine Antennen zurückgreifen. Größere Antennen haben in Experimenten allerdings nichts genutzt.&lt;/li>
&lt;li>Evtl. Beeinflussung der Antennen durch das sehr nahe positionierte Raspberry Pi oder andere Elektronik? Allerdings konnte auch eine Entzerrung des kompakten Originalsetups keine Besserung bewirken.&lt;/li>
&lt;li>Möglicherweise Störung des USB durch einen angesteckten USB-Stick? Den Fall hatten wir in jüngerer Vergangenheit vor allem im Zusammenspiel mit USB3 und USB-Sticks minderer Qualität gemacht. Aber auch ein Abstecken des USB-Sticks nutzte nichts.&lt;/li>
&lt;/ol>
&lt;p>Schließlich offenbarte ein Blick ins Kernel-Log, wieso keine Verbindung zustande kommen konnte: Der Kernel meldete in unregelmäßigen Abständen das An- und Abmelden des Quectel-Modems am USB. Dazwischen einige Fehlermeldungen, die erschienen, weil das Modem nicht wie erwartet auf die Kommandos der Modemsoftware reagierte.&lt;/p>
&lt;p>Wir befürchteten schon, es mit einer schwer zu behebenden USB-Störung zu tun zu haben, als wir anfingen, Vergleiche mit einem anderen Quectel Aufbau anzustellen. In unserem Originalaufbau nutzten wir einen USB-M.2 Adapter eines Herstellers, der dieses noch als &amp;ldquo;Experimentell&amp;rdquo; markierte. Um mit einer garantiert funktionierende Referenz vergleichen zu können, steckten wir stattdessen unser Quectel Evaluation Kit an. Dieses besteht im Prinzip auch aus einem USB-zu-M.2 Adapter und einigen Onboard-Antennen. Das Modem selbst steckten wir ebenfalls in das Quectel Board aus dem EK, um es als Fehlerquelle ausschließen zu können.&lt;/p>
&lt;p>Das Ergebnis: Einwandfreier Empfang, stabile Pings. Keine Verbindungsabbrüche auf dem USB-Bus. So geriet das USB-M.2 Board des anderen Herstellers früh ins Visier. Die genaue Ursache konnten wir aber noch nicht benennen.&lt;/p>
&lt;p>Ein paar Experimente später war das Quectel Mobilfunkmodem wieder in seinem ursprünglichen Adapterboard eingeschraubt. In der Zwischenzeit hatte sich herauskristallisiert, dass die USB-Verbindung vor allem dann zusammenbrach, wenn das Modem beansprucht wurde. Also etwa nach dem Start des selbigen oder wenn es mit der Netzsuche oder dem Verbindungsaufbau in ein Mobilfunknetz beauftragt wurde. Das roch nach einem Stromproblem. Schließlich brachte die aufgeteilte Stromversorgung von Raspi und Modem eine wertvolle Bestätigung: Versorgten wir die beiden Einheiten über ein Y-Kabel (am M.2 Board) mit zwei voneinander unabhängigen Akkus, lief das Modem einwandfrei. Es kam nicht nur eine robuste Verbindung zustande, sondern auch der Empfang war nun merklich besser.&lt;/p>
&lt;p>Das Modem brauchte also offenbar etwas mehr Leistung, als ein einzelner Akku stemmen konnte. Wir machten die Probe mit einem leistungsstarken Netzteil, das nun das Raspberry Pi und das daran angeschlossene Modem mit ausreichend Leistung versorgen sollte. Das Netzteil wurde auf 5V und eine Stromgrenze von 6A eingestellt. Das Datenblatt des Modems spricht von einer kurzzeitigen, maximalen Stromaufnahme von bis zu 5A. Möglicherweise war unser Akku nicht stark genug?&lt;/p>
&lt;p>Ernüchtert stellten wir fest, dass auch das starke Netzteil keine Besserung brachte. Doch wo war noch das Problem? Für eine robuste Spannungsversorgung war nun doch gesorgt! Zur Sicherheit klammerten wir auch die USB-Ports des Raspis als Fehlerquelle aus. Diese lassen per default nur einen Strom von 600 mA zu. Über eine &lt;a href="https://www.elektronik-kompendium.de/sites/raspberry-pi/2206111.htm">Einstellung&lt;/a> in der &lt;code>config.txt&lt;/code> kann diese Limitierung zwar aufgehoben werden, aber wir entschlossen uns, das Modem lieber direkt über Lötkontakte auf dem M.2 Board und eine Verbindung zum 5V Header Pin zu versorgen. Leider brachte auch das Entfernen des USB aus dem Stromversorgungs-Pfad nicht den erhofften Erfolg.&lt;/p>
&lt;p>Ein wenig später und viel ratloser zückten wir das Oszilloskop und nahmen uns vor, die Spannungspegel an verschiedenen Stellen unseres Setups genauer zu messen:&lt;/p>
&lt;ul>
&lt;li>Direkt am Mobilfunkmodem (4V) - blau&lt;/li>
&lt;li>Am Raspberry Pi Header (5V) - gelb&lt;/li>
&lt;li>Am Raspi Spannungseingang / Netzteil (5V) - violett&lt;/li>
&lt;/ul>
&lt;p>Es offenbarte sich dieser Anblick:&lt;/p>
&lt;p>&lt;img alt="Oszilloskop zeigt Kurven mit Spannungseinbrüchen an allen drei Messstellen" src="https://blog.zero-iee.com/posts/quectel-rn520g-stabilitaetsprobleme-raspberry-pi/images/RigolDS0_via_USB_ohne_Kondensatoren.png">&lt;/p>
&lt;p>Wie deutlich an allen drei Kurven zu sehen ist, bestimmt ein gewisses Flimmern das Bild. Die Spannung ist keineswegs stabil, wenn das Modem beansprucht wird, sondern schwankt zum Teil bis zu 1 V. Besonders heftig ist der Spannungseinbruch direkt am Mobilfunkmodem. Dieser kommt daher, dass dem Modem (auf dem M.2 Board) ein Spannungswandler vorgeschaltet ist, der unter dem plötzlichen Strombedarf auf einmal &amp;ldquo;webknickt&amp;rdquo; bzw. kurzzeitig abschaltet, sobald er seinerseits keine ausreichend hohe Spannung mehr an seinem Eingang detektiert. Schließlich knickt das Mobilfunkmodem ein und startet sich neu - daher kommt der Disconnect, den wir am USB beobachten konnten. Die Unruhe in der Spannungskurve zieht sich - wie sich schön nachvollziehen lässt - in der Kette bis zum Netzteil durch. Mit nachlassender Intensität, aber dennoch deutlich.&lt;/p>
&lt;p>Obwohl seit dem Raspberry Pi 4 &lt;em>keine&lt;/em> &lt;a href="https://learn.watterott.com/de/raspberrypi/troubleshooting/">Polyfuse&lt;/a> mehr zwischen USB Power In und 5V Rail geschaltet ist, die durch ihren Widerstand den Spannungspegel auf der 5V Rail einbrechen lassen könnte, beobachten wir einen leichten Spannungsabfall zwischen dem 5V Header-Pin (gelb) und dem USB-C Power In Anschluss. Dieser könnte evtl. auf den Widerstand der Leiterbahnen auf das Raspi Platine zurückzuführen sein - denn diese sind nicht unbedingt für hohe Ströme ausgelegt.&lt;/p>
&lt;p>Uns war nun klar, wieso wir überhaupt ein Stromproblem hatten und wieso ein einzelnes (aber starkes!) Netzteil an dieser Stelle das Problem nicht beheben konnte. Behelfsmäßig begannen wir, mit Kondensatoren an verschiedenen Stellen zu experimentieren:&lt;/p>
&lt;ul>
&lt;li>An der 4V Versorgungsspannung zum Mobilfunkmodem&lt;/li>
&lt;li>Am 5V Raspberry Pi Header&lt;/li>
&lt;li>Am 5V Eingang des Raspberry Pi&lt;/li>
&lt;/ul>
&lt;p>Eine merkliche Besserung zeichnete sich ab, als wir die 5V-USB-Versorgung für den M.2 Adapter an den Pins am Raspi-Header stabilisierten. Wir wählten hierzu einen 1000 uF-Elektrolytkondensator:&lt;/p>
&lt;p>&lt;img alt="Oszilloskop zeigt deutlich stabilisierte Spannungslinie für den Header" src="https://blog.zero-iee.com/posts/quectel-rn520g-stabilitaetsprobleme-raspberry-pi/images/RigolDS1_via_USB_Kondensator_Raspi_header_5V.png">&lt;/p>
&lt;p>Ein Versagen des M.2 Spannungswandlers auf 4V konnten wir allerdings erst verhindern, als wir weitere Kondensatoren an der 4V-Versorgung des Modems und dem 5V-Eingang des Rapsberry Pi&amp;rsquo;s integrierten:&lt;/p>
&lt;p>&lt;img alt="Oszilloskop zeigt weiter stabilisierte Linien auch für Eingang und Header-Messstellen" src="https://blog.zero-iee.com/posts/quectel-rn520g-stabilitaetsprobleme-raspberry-pi/images/RigolDS2_via_USB_Kondensator_Raspi_und_M2_4V.png">&lt;/p>
&lt;p>Nun zeigte sich aber ein anderes Symptom: Durch unsere Maßnahmen hatten wir nun ein anderes Problem geschaffen: Der Hardwaremanager des Kernels beschwerte sich in roter Schrift über eine &amp;ldquo;Undervoltage!&amp;rdquo;. Der plötzliche Strombedarf und das Nachladen der Kondensatoren waren vermutlich zu viel für die Raspi-Leiterbahnen. Noch nicht genug, um das Raspi zu resetten, aber die Warnung namen wir ernst und wollten kein Risiko eingehen. Ein stabiler Betrieb beim Kunden ist uns äußerst wichtig.&lt;/p>
&lt;p>Um das Problem zu beseitigen, entschieden wir uns daher, das Raspi und das M.2 Aufsatzboard nicht mehr weiter über USB-C mit Strom zu versorgen, sondern über den Raspi-Header bzw. über angelötete Kontakte direkt am M.2 Board. Denn von hier aus konnten sowohl das M.2 Board als auch das Raspi die Leistung über kurze Strecke beziehen - die Stromspitzen des Mobilfunkmoduls mussten nicht mehr über die Raspi-Leiterbahnen geleitet werden.&lt;/p>
&lt;p>&lt;img alt="Oszilloskop zeigt eine sehr glatte Spannungskurve für die Messstellen Raspi Header und Modem" src="https://blog.zero-iee.com/posts/quectel-rn520g-stabilitaetsprobleme-raspberry-pi/images/RigolDS3_via_Header_mit_Kondensatoren_uns_.png">&lt;/p>
&lt;p>Mit den Kondensatoren und der zentraleren Stromversorgung lief unser Setup einwandfrei! Keine Abbrüche mehr beim USB und auch der Kernel gab keine Spannungswarnungen mehr aus. Doch das Beste war: Die Kondensatoren stellten sich von da an als verzichtbar heraus:&lt;/p>
&lt;p>Die Spannungskurven sind ohne Kondensatoren zwar etwas rauer als vorher, aber immer noch stabil genug, um keine Fehler am Modem oder Mikroprozessor zu verursachen.&lt;/p>
&lt;p>&lt;strong>Alles, was für die Behebung unseres Problems nötig war, war also eine Stromversorgung über den Raspi-Header (anstatt über die USB-C Buchse des Raspis) und eine direkte Stromversorgung des Mobilfunkmodems&lt;/strong>&lt;/p>
&lt;p>Das Problem war offenbar, dass die Leiterbahnen auf dem Raspi vermutlich nicht für die durch das Mobilfunkmodem und dessen Spannungswandler erzeugten Spitzenströme ausgelegt sind, sodass eine Versorgung des Modems nicht über das Raspi erfolgen sollte, sondern direkt am M.2 Board.&lt;/p>
&lt;p>&lt;em>&amp;hellip; wie wir bei der ZERO GmbH gerne sagen: &amp;ldquo;Again what learned!&amp;rdquo; ;-)&lt;/em>&lt;/p></description></item><item><title>Quectel RM520M und Telit FM990A28 5G Modem mit Raspberry Pi OS nutzen</title><link>https://blog.zero-iee.com/posts/quectel-rm520n-and-telit-fn990a28-5g-modems-on-raspberrypi-os/</link><pubDate>Wed, 31 May 2023 12:44:58 +0200</pubDate><guid>https://blog.zero-iee.com/posts/quectel-rm520n-and-telit-fn990a28-5g-modems-on-raspberrypi-os/</guid><description>&lt;p>Auf unserer Odyssee auf der Suche nach einem 5G Mobilfunkmodem haben wir mittlerweile einige Modems verschiedener Hersteller ausprobiert. Leider war die Inbetriebnahme nicht immer erfolgreich. Mal fehlte der Treibersupport im Linux-Kernel gänzlich - mal war die Ansteuerung via NetworkManager / ModemManager fehlerbehaftet oder überhaupt nicht möglich.&lt;/p>
&lt;p>Uns ist eine einfache Inbetriebnahme und ein stabiler Betrieb wichtig. Da wir die Modems nicht nur auf einigen wenigen Geräten einsetzen wollen, kommt für uns eine manuelle Anpassung des Linux-Kernels in der Regel nicht infrage. Zu groß ist der damit verbundene Aufwand und zu unübersichtlich sind die Folgen, die sich daraus für den weiteren Lebenszyklus eines Produkts ergeben. Daher soll das Betriebssystem - oftmals ein Raspberry Pi OS - möglichst im Werkszustand und ohne große Anpassungen genutzt werden.&lt;/p>
&lt;p>&lt;strong>Mittlerweile haben sich für uns zwei Modems herauskristallisiert, die in Kombination mit dem aktuellen &lt;a href="https://www.raspberrypi.com/software/operating-systems/">Raspberry Pi OS&lt;/a> auf Debian 11 &amp;ldquo;Bullseye&amp;rdquo; Basis (Kernel 6.1) &amp;ldquo;out of the box&amp;rdquo; funktionieren:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://www.quectel.com/product/5g-rm520n-gl">Quectel RM520N&lt;/a>&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://www.telit.com/devices/fn990axx/">Telit FM990A28&lt;/a>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>beide 5G Modems unterstützen nicht nur das aktuell weit verbreitete &amp;ldquo;5G New Radio&amp;rdquo; mit LTE Control Plane (NSA), sondern auch 5G NR Standalone (SA), sodass bei einer entsprechenden Ausbaustufe des 5G Mobilfunknetzes auch von extrem niedrigeren Latenzen profitiert werden kann.&lt;/p>
&lt;h2 id="hardware-setup" >Hardware Setup
&lt;span>
&lt;a href="#hardware-setup">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Unser Hardware-Setup für die Evaluierung beider Module sieht wie folgt aus:&lt;/p>
&lt;ul>
&lt;li>Raspberry Pi CM4&lt;/li>
&lt;li>&lt;a href="https://www.waveshare.com/wiki/CM4-DUAL-ETH-4G/5G-BASE">Waveshare Dual Ethernet IoT Base Board&lt;/a> (mit M.2 Slot)&lt;/li>
&lt;li>Telit FM990A28 M.2 Modul &lt;em>oder&lt;/em>&lt;/li>
&lt;li>Quectel RM520N&lt;/li>
&lt;li>IoT SIM-Karte der Deutschen Telekom&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://blog.zero-iee.com/posts/quectel-rm520n-and-telit-fn990a28-5g-modems-on-raspberrypi-os/images/waveshare-board.jpg">&lt;figcaption>
&lt;h4>Waveshare Board mit Quectel 5G Modem&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;h2 id="inbetriebnahme" >Inbetriebnahme
&lt;span>
&lt;a href="#inbetriebnahme">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Die Inbetriebnahme unseres Telit-Moduls lief wie folgt ab: &lt;em>(ähnlich für Quectel!)&lt;/em>&lt;/p>
&lt;p>Überprüfen der Sichtbarkeit des Moduls im USB Subsystem:&lt;/p>
&lt;pre>&lt;code>$ lsusb
&lt;/code>&lt;/pre>
&lt;p>Hier sollte ein Telit Device sichtbar sein:&lt;/p>
&lt;pre>&lt;code>[...]
Bus 002 Device 003: ID 1bc7:1070 Telit Wireless Solutions FN990
[...]
&lt;/code>&lt;/pre>
&lt;p>Auch der ModemManager sollte das Modul erkennen:&lt;/p>
&lt;pre>&lt;code>tom@raspberry:~ $ mmcli -L
/org/freedesktop/ModemManager1/Modem/0 [Telit] FN990A28
&lt;/code>&lt;/pre>
&lt;p>Mittels&lt;/p>
&lt;pre>&lt;code>mmcli -m 0
&lt;/code>&lt;/pre>
&lt;p>Können einige Details zum Modem ausgegeben werden - unter anderem, ob eine Verbindung zum Mobilfunknetz besteht, oder eine SIM-Karte zugeordnet ist.&lt;/p>
&lt;p>Bei unserem ersten Versuch wurde im &amp;ldquo;Status&amp;rdquo; Abschnitt ein rotes &lt;code>sim-missing&lt;/code> angezeigt, obwohl eine SIM-Karte in den Slot des Waveshare Base IO Moduls eingelegt war. Auch Versuche mit anderen SIM-Karten nutzten nichts - im System wurde keine Karte erkannt.&lt;/p>
&lt;h3 id="sim-missing-problem-beheben" >&amp;ldquo;SIM Missing&amp;rdquo; Problem beheben
&lt;span>
&lt;a href="#sim-missing-problem-beheben">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;em>(dieses Problem betrifft nur das Telit Modem!)&lt;/em>&lt;/p>
&lt;p>Ein Blick in die &lt;a href="https://www.waveshare.com/w/upload/4/46/CM4-DUAL-ETH-4G_5G-BASE_SchDoc.pdf">Schematics des Waveshare Boards&lt;/a> offenbarte, dass die Signalleitung (&amp;ldquo;CD&amp;rdquo; - &amp;ldquo;Card detect&amp;rdquo;) für die physische Erkennung einer SIM-Karte im Slot nicht zum M.2 Slot weitergeführt wird, sodass das Mobilfunkmodul kein entsprechendes Signal erkennen &lt;em>kann&lt;/em>. Kein Wunder also, dass uns permanent ein &amp;ldquo;&lt;strong>sim-missing&lt;/strong>&amp;rdquo; angezeigt wurde.&lt;/p>
&lt;figure>&lt;img src="https://blog.zero-iee.com/posts/quectel-rm520n-and-telit-fn990a28-5g-modems-on-raspberrypi-os/images/waveshare-schematics.png">&lt;figcaption>
&lt;h4>Screenshot des Waveshare Dual Ethernet IoT Base Boards&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>Das Problem lässt sich beheben, indem das Modem so konfiguriert wird, dass es eine immer eingelegte SIM-Karte annimmt und keine HotSwap-Abfragen mehr durchführt. Die Konfiguration geschieht über AT-Kommandos innerhalb einer Terminalsession mit dem Modem selbst:&lt;/p>
&lt;pre>&lt;code>sudo apt install minicom
sudo minicom -D /dev/ttyUSB2
&lt;/code>&lt;/pre>
&lt;p>AT-Kommandos absetzen - sollten mit &amp;ldquo;OK&amp;rdquo; quittiert werden.&lt;/p>
&lt;pre>&lt;code>AT#HSEN=0,0
AT#HSEN=0,1
&lt;/code>&lt;/pre>
&lt;p>&lt;em>(genauer genommen wird hier HotSwap für beide potentiellen SIM-Steckplätze, die das Modem unterstützt, deaktiviert.)&lt;/em>&lt;/p>
&lt;p>Die Minicom Session kann mit CTRL-A gefolgt von &amp;ldquo;X&amp;rdquo; beendet werden.&lt;/p>
&lt;p>Damit die Änderung angewendet wird, wurde das Raspi samt Modem neu gestartet / die Stromversorgung unterbrochen.&lt;/p>
&lt;p>Nach einem Neustart wurde die SIM-Karte im ModemManager schließlich erkannt - am Ende der Ausgabe von &lt;code>mmcli -m 0&lt;/code> wurde eine &amp;ldquo;SIM&amp;rdquo; Zeile mit dem D-Bus Pfad zum SIM-Device eingeblendet:&lt;/p>
&lt;pre>&lt;code>SIM | dbus path: /org/freedesktop/ModemManager1/SIM/0
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Die soeben erwähnte Anpassung am Telit Modem ist am Quectel-Modem nicht notwendig!&lt;/strong>&lt;/p>
&lt;p>Im nächsten Schritt wird das jeweiligen Modem aktiviert:&lt;/p>
&lt;pre>&lt;code>mmcli -m 0 --enable
&lt;/code>&lt;/pre>
&lt;h3 id="eine-verbindung-mittels-networkmanager-einrichten" >Eine Verbindung mittels NetworkManager einrichten
&lt;span>
&lt;a href="#eine-verbindung-mittels-networkmanager-einrichten">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Mittels NetworkManager wird nun eine neue Mobilfunkverbindung eingerichtet. Dazu legen wir im NetworkManager eine neue &amp;ldquo;Connection&amp;rdquo; an. Im Hintergrund kommuniziert dieser mit dem ModemManager, um APN-Details an ihn weiterzugeben.&lt;/p>
&lt;p>Für unsere Telekom-Karte sind folgende APN-Informationen zu nutzen:&lt;/p>
&lt;ul>
&lt;li>APN: internet.telekom&lt;/li>
&lt;li>IP-Type: ipv4&lt;/li>
&lt;li>Username: telekom&lt;/li>
&lt;li>Password: tm&lt;/li>
&lt;/ul>
&lt;p>Die APN-Informationen eines jeden Providers lassen sich schnell im Internet nachschlagen.&lt;/p>
&lt;p>Mit dem neueren IPv6-fähigen APN der Telekom &lt;code>internet.v6.telekom&lt;/code> (und &amp;ldquo;ipv4v6&amp;rdquo;) hatten wir leider kein Glück - wir konnten keine Vebindung herstellen. Probleme im IPv6-Stack der Modemtreiber sind uns bereits bekannt. Evtl. kommen sie auch hier zum tragen. Daher begnügen wir uns vorerst mit reinem IPv4 Support.&lt;/p>
&lt;p>Bevor die Verbindung angelegt werden kann, muss sichergestellt sein, dass der NetworkManager läuft:&lt;/p>
&lt;pre>&lt;code>systemctl enable --now NetworkManager
&lt;/code>&lt;/pre>
&lt;p>Auf einem Stock Raspberry Pi OS Image ist dies nicht der Fall. Ein Reboot nach dem systemctl Kommando kann nicht schaden. In unserem Fall funktionierte das Zusammenspiel zwischen den beiden Managern erst nach einem Reboot.&lt;/p>
&lt;p>Schließlich wird mit diesem Kommando eine neue GSM Verbindung im NetworkManager angelegt:&lt;/p>
&lt;pre>&lt;code>mmcli c add type gsm ifname cdc-wdm0 con-name telekom apn internet.telekom connection.autoconnect yes
&lt;/code>&lt;/pre>
&lt;p>Im Falle der Telekom ist der APN &amp;ldquo;internet.telekom&amp;rdquo; inkl. der übrigen Parameter bereits im SIM-Profil hinterlegt, sodass nur noch der Name des passenden APN-Profils angegeben werden muss. Auf Benutzername und Passwort kann idR verzichtet werden.&lt;/p>
&lt;p>Sollte das nicht funktionieren, können alternativ auch weitere Parameter mitgegeben werden, wie z.B.&lt;/p>
&lt;pre>&lt;code>mmcli c add type gsm ifname cdc-wdm0 con-name telekom apn internet.telekom gsm.username telekom gsm.password tm gsm.pin 1234 connection.autoconnect yes
&lt;/code>&lt;/pre>
&lt;p>Insbes. die Angabe einer &lt;code>gsm.pin&lt;/code> ist wichtig, falls die SIM-Karte mit einer PIN geschützt ist. Unsere SIM ist nicht mit einer PIN geschützt, daher entfällt die Angabe.&lt;/p>
&lt;p>Ein &lt;code>nmcli c&lt;/code> sollte nun zeigen, dass eine neue Verbindung &amp;ldquo;telekom&amp;rdquo; angelegt wurde. Ist die Verbindung grün markiert, hat die Anmeldung im Netzwerk funktioniert:&lt;/p>
&lt;figure>&lt;img src="https://blog.zero-iee.com/posts/quectel-rm520n-and-telit-fn990a28-5g-modems-on-raspberrypi-os/images/networkmanager-ok.png">&lt;figcaption>
&lt;h4>nmcli c&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>Auch der ModemManager sollte nach einer kurzen Weile ähnlich wie hier aussehen und ein &amp;ldquo;connected&amp;rdquo; im Status zeigen: &lt;em>(&lt;code>mmcli -m 0&lt;/code>)&lt;/em>&lt;/p>
&lt;figure>&lt;img src="https://blog.zero-iee.com/posts/quectel-rm520n-and-telit-fn990a28-5g-modems-on-raspberrypi-os/images/modemmanager-ok.png">&lt;figcaption>
&lt;h4>mmcli -m 0&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;h3 id="funktion-prüfen" >Funktion prüfen
&lt;span>
&lt;a href="#funktion-pr%c3%bcfen">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Ob die Mobilfunkverbindung tatsächlich funktioniert, lässt sich schnell und einfach über einen Ping auf dem Mobilfunk-Device prüfen:&lt;/p>
&lt;pre>&lt;code>ping -I wwan0 1.1.1.1
&lt;/code>&lt;/pre>
&lt;p>Die Latenz bewegt sich bei einem 5G NSA Netz üblicherweise bei &amp;gt;= 25 ms, kann aber stark schwanken. Wir haben Latenzen von bis zu 600 ms beobachtet - abhängig von Empfang und Auslastung des Netzwerks.&lt;/p>
&lt;p>Bei einem Neustart des Raspberry Pis wird die Mobilfunkverbindung automatisch neu aufgenommen.&lt;/p>
&lt;p>Übrigens: Ein &lt;code>ip route&lt;/code> offenbart, dass NetworkManager eine Defaultroute für das 5G Modem angelegt hat. Da diese aber mit einer Metrik von 700 versehen ist, wird auf das Mobilfunkmodem nur zurückgegegriffen, falls ein Ziel über eine möglicherwiese vorhandene Ethernetverbindung nicht erreichbar ist. Ein &lt;code>apt update&lt;/code> und alles andere sollte also normalerweise über eine verfügbare Ethernetverbindung laufen. Ist diese nicht verfügbar, dient die Mobilfunkverbindung als Fallback (daher der &lt;code>-I wwan0&lt;/code> Parameter im &lt;code>ping&lt;/code> Kommando - hiermit wird eine Verbindung via Mobilfunk erzwungen).&lt;/p></description></item><item><title>Quectel RM520N-GL 5G Mobilfunkmodem unter Ubuntu Linux in Betrieb nehmen</title><link>https://blog.zero-iee.com/posts/quectel-rm520n-gl-5g-modem-unter-ubuntu-linux/</link><pubDate>Mon, 02 Jan 2023 14:20:04 +0100</pubDate><guid>https://blog.zero-iee.com/posts/quectel-rm520n-gl-5g-modem-unter-ubuntu-linux/</guid><description>&lt;p>Um verschiedene 5G Usecases zu demonstrieren, sollte im Rahmen eines Projekts ein 5G-Modem an einem Ubuntu-basierten Mini PC betrieben werden. Hierzu haben wir uns das RM520N-GL von Quectel besorgt.&lt;/p>
&lt;p>Das Modem wird vom Linux-Kernel erst ab Version 6.0 vollständig unterstützt. Die dazugehörigen Patches sind &lt;a href="https://patchwork.kernel.org/project/linux-usb/patch/tencent_23054B863154DC02C6E98E5942416BFC200A@qq.com/">hier (USB &amp;ldquo;option&amp;rdquo; Treiber)&lt;/a> bzw &lt;a href="https://www.spinics.net/lists/linux-usb/msg230835.html">hier (qmi_wwan Treiber)&lt;/a> zu finden.&lt;/p>
&lt;p>Quectel liefert in der Dokumentation zwar auch Hinweise aus, an welchen Stellen die beteffenden Treiber angepasst werden müssen, doch das erwies sich in unserem Fall als fehleranfällig. Leider werden keine fertigen Git-Patches geliefert, sondern nur Code-Snippets in einem PDF-Dokument.&lt;/p>
&lt;p>Einfacher war es, den Ubuntu 22.04.1 LTS Kernel von Version 5.17 auf Version 6.0.1 anzuheben. Dazu muss der Kernel und seine Module nicht unbedingt neu gebaut werden. Canonical stellt bereits vorkompilierte Kernelartefakte in Form von Debian-Paketen zur Verfügung. Diese werden zwar nicht offiziell unterstützt oder mit Updates versorgt, doch für unsere Demonstrationszwecke war das völlig ausreichend.&lt;/p>
&lt;p>Unter &lt;a href="https://kernel.ubuntu.com/~kernel-ppa/mainline/v6.0.1/">https://kernel.ubuntu.com/~kernel-ppa/mainline/v6.0.1/&lt;/a> werden vier wichtige .deb Pakete zum Download angeboten:&lt;/p>
&lt;ul>
&lt;li>&lt;code>amd64/linux-headers-6.0.1-060001-generic_6.0.1-060001.202210120833_amd64.deb&lt;/code>&lt;/li>
&lt;li>&lt;code>amd64/linux-headers-6.0.1-060001_6.0.1-060001.202210120833_all.deb&lt;/code>&lt;/li>
&lt;li>&lt;code>amd64/linux-image-unsigned-6.0.1-060001-generic_6.0.1-060001.202210120833_amd64.deb&lt;/code>&lt;/li>
&lt;li>&lt;code>amd64/linux-modules-6.0.1-060001-generic_6.0.1-060001.202210120833_amd64.deb&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Alle vier Dateien werden heruntergeladen und über den Paketmanager installiert:&lt;/p>
&lt;pre>&lt;code>cd Downloads
sudo dkpg -i ./linux*.deb
&lt;/code>&lt;/pre>
&lt;p>Target neu starten - und fertig! Ein &lt;code>uname -r&lt;/code> sollte jetzt die neue kernelversion zeigen. Und auch die aktualisierten USB- und Netzwerktreiber für das Quectel Modem sollten jetzt den Dienst aufnehmen und die passenden Device Nodes unter /dev anlegen:&lt;/p>
&lt;ul>
&lt;li>&lt;code>/dev/cdc-wdm0&lt;/code>&lt;/li>
&lt;li>&lt;code>/dev/ttyUSB0&lt;/code>&lt;/li>
&lt;li>&lt;code>/dev/ttyUSB1&lt;/code>&lt;/li>
&lt;li>&lt;code>/dev/ttyUSB2&lt;/code>&lt;/li>
&lt;li>&lt;code>/dev/ttyUSB3&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;em>(USB Nodes können je nach angeschlossener Peripherie auch anders nummeriert sein!)&lt;/em>&lt;/p>
&lt;h2 id="eine-verbindung-über-den-networkmanager-und-modemmanager-herstellen" >Eine Verbindung über den NetworkManager und ModemManager herstellen
&lt;span>
&lt;a href="#eine-verbindung-%c3%bcber-den-networkmanager-und-modemmanager-herstellen">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Der &amp;ldquo;schönste&amp;rdquo; Weg führt über die NetworkManager-Integration des ModemManagers. Um zu sehen, ob das Quectel Modem überhaupt als solches vom ModemManager erkannt wurde, kann ein&lt;/p>
&lt;pre>&lt;code>mmcli --modem=0
&lt;/code>&lt;/pre>
&lt;p>ausgeführt werden. Ein paar Informationen zum Modemstatus sollten hier aufgelistet werden.&lt;/p>
&lt;p>Wer eine mit PIN gesicherte SIM-Karte im System nutzt, wird diese zuerst entsperren müssen. Dazu kann über das vorher genannte Kommando zuerst der virtuelle Pfad des SIM-Slots ermittelt werden, z.B.&lt;/p>
&lt;pre>&lt;code>-----------------------------------
SIM | primary sim path: /org/freedesktop/ModemManager1/SIM/0
| sim slot paths: slot 1: /org/freedesktop/ModemManager1/SIM/0 (active)
| slot 2: none
&lt;/code>&lt;/pre>
&lt;p>&amp;hellip; und dann die entsprechende SIM (Index 0) aktiviert werden:&lt;/p>
&lt;pre>&lt;code>mmcli -i=0 --pin=1234
&lt;/code>&lt;/pre>
&lt;p>Wer die SIM permanent entsperrt lassen will, kann die PIN-Sperre entfernen:&lt;/p>
&lt;pre>&lt;code>mmcli -i=0 --pin=1234 --disable-pin
&lt;/code>&lt;/pre>
&lt;p>Sobald die SIM-Karte entsperrt ist, sollte eine Verbindung mit dem Modul möglich sein:&lt;/p>
&lt;pre>&lt;code>nmcli c add type gsm ifname cdc-wdm0 con-name 5g apn internet.telekom
nmcli c up 5g
&lt;/code>&lt;/pre>
&lt;p>Bis sich das Kommando zurückmeldet, können einige Sekunden vergehen. Wir haben hier absichtlich den alten &lt;code>internet.telekom&lt;/code> APN gewählt, weil wir mit dem neueren &amp;ldquo;internet.v6.telekom&amp;rdquo; APN keine Verbindung herstellen konnten. Ursache (noch) unbekannt.&lt;/p>
&lt;h2 id="verbindung-über-das-qmi-network-tool" >Verbindung über das &lt;code>qmi-network&lt;/code> tool
&lt;span>
&lt;a href="#verbindung-%c3%bcber-das-qmi-network-tool">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Statt des Network-/ModemManagers kann für die Verbindungsherstellung auch das &lt;code>qmi-network&lt;/code> Script aus dem &lt;code>libqmi-utils&lt;/code> Paket verwendet werden. Dazu werden in &lt;code>/etc/qmi-network.conf&lt;/code> die richtigen Einstellungen für das Nodem hinterlegt:&lt;/p>
&lt;pre>&lt;code>DEVICE=/dev/cdc-wdm0
DEVICE_OPEN_QMI=YES
PROXY=YES
&lt;/code>&lt;/pre>
&lt;p>Speziell die &lt;code>DEVICE_OPEN_QMI&lt;/code> scheint hier eine wichtige Rolle zu spielen. Anders als in ähnlichen Anleitungen zur Inbetriebnahme von Mobilfunkmodems konnten wir hierauf nicht verzichten.&lt;/p>
&lt;p>Schließlich lässt sich eine Verbindung starten:&lt;/p>
&lt;pre>&lt;code>sudo qmi-network /dev/cdc-wdm0 start
&lt;/code>&lt;/pre>
&lt;p>Allerdings kümmert sich das Script nicht um das Beziehen einer IP-Adresse und der entsprechenden Konfiguration des &lt;code>wwan0&lt;/code> Netzwerkinterfaces. Hier hilft der &lt;code>udhcpc&lt;/code> Client aus dem gleichnamigen Debian-Paket:&lt;/p>
&lt;pre>&lt;code>sudo udhcpc -i wwan0
&lt;/code>&lt;/pre>
&lt;p>Im Idealfall ist nach wenigen Sekunden eine lokale IP-Adresse auf dem &lt;code>wwan0&lt;/code> Interface konfiguriert und lässt eine Kommunikation ins Internet zu:&lt;/p>
&lt;pre>&lt;code>curl ifconfig.me
&lt;/code>&lt;/pre>
&lt;p>zeigt dabei die IP-Adresse an, die für Verbindungen ins Internet aktuell genutzt wird. Es empfiehlt sich, vorher sicherzustellen, dass der Mini-PC über keine Ethernetverbindung ins Internet mehr verfügt. Dazu wird die default-Route zum lokalen Ethernetinterface &lt;code>enp0s29f1&lt;/code> entfernt:&lt;/p>
&lt;pre>&lt;code>sudo ip route del default via 192.168.179.1 dev enp0s29f1
&lt;/code>&lt;/pre>
&lt;p>&lt;em>(kommando anpassen - je nach Output des Kommandos &lt;code>ip route&lt;/code>)&lt;/em>&lt;/p></description></item></channel></rss>