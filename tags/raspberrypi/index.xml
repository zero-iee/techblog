<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Raspberrypi on ZERO GmbH Tech Blog</title><link>https://blog.zero-iee.com/tags/raspberrypi/</link><description>ZERO GmbH Tech Blog (Raspberrypi)</description><generator>Hugo -- gohugo.io</generator><language>de</language><lastBuildDate>Fri, 19 Apr 2024 10:00:00 +0200</lastBuildDate><atom:link href="https://blog.zero-iee.com/tags/raspberrypi/index.xml" rel="self" type="application/rss+xml"/><item><title>Wie wir die Quectel RN520G Stabilitätsprobleme in Kombination mit einem Raspberry Pi gelöst haben</title><link>https://blog.zero-iee.com/posts/quectel-rn520g-stabilitaetsprobleme-raspberry-pi/</link><pubDate>Fri, 19 Apr 2024 10:00:00 +0200</pubDate><guid>https://blog.zero-iee.com/posts/quectel-rn520g-stabilitaetsprobleme-raspberry-pi/</guid><description>&lt;p>Über das Quectel RM520N-GL 5G Mobilfunkmodem haben wir &lt;a href="https://blog.zero-iee.com/posts/quectel-rm520n-and-telit-fn990a28-5g-modems-on-raspberrypi-os/">schon einmal geschrieben&lt;/a>. Damals ging es um die Einrichtung der Software, um unter Linux eine funktionierende Internetverbindung herzustellen.&lt;/p>
&lt;p>Nun gibt es wieder einen Beitrag zu dem Modem - allerdings nicht deswegen, weil auf Anhieb alles wie vorgesehen funktioniert hat. Vielmehr wollen wir euch diesmal einen Einblick in unseren täglichen Kampf mit und gegen die Technik geben. Denn nicht alles, was funktionieren &lt;em>sollte&lt;/em>, funktioniert am Ende auch. Selbst dann nicht, wenn man - wie in diesem Fall - die Elektronik so oder so ähnlich schon einmal erfolgreich im Einsatz hatte.&lt;/p>
&lt;p>Für ein Kundenprojekt hatten wir schon erfolgreich Bausteine ausgewählt, die den harten Anforderungen des Kunden genügten: Ein Raspberry Pi 4 sollte die Basis für einen Minirechner bilden, der über ein 5G-fähiges Modem ans Mobilfunknetz angebunden sein sollte. Die Besonderheit: Da es sich um einen &lt;em>mobilen&lt;/em> Kleinrechner handeln sollte, gab es klare Vorgaben bezüglich der Stromversorgung. Der Rechner sollte nämlich über einen Akku mit Energie gespeist werden.&lt;/p>
&lt;p>Wie eingangs erwähnt, hatten wir das Modem bereits erfolgreich im Einsatz und waren verwundert, als beim Zusammenstecken der Teile keine Mobilfunkverbindung hergestellt werden konnte. Da kamen für uns folgende mögliche Ursachen infrage:&lt;/p>
&lt;ol>
&lt;li>Schlechter Empfang an dieser Stelle in unseren Büros? Andererseits hatten wir hier schon andere Mobilfunksetups erfolgreich getestet.&lt;/li>
&lt;li>Schlechter Empfang durch zu kleine Antennen? Durch die Größenbeschränkung mussten wir auf relativ kleine Antennen zurückgreifen. Größere Antennen haben in Experimenten allerdings nichts genutzt.&lt;/li>
&lt;li>Evtl. Beeinflussung der Antennen durch das sehr nahe positionierte Raspberry Pi oder andere Elektronik? Allerdings konnte auch eine Entzerrung des kompakten Originalsetups keine Besserung bewirken.&lt;/li>
&lt;li>Möglicherweise Störung des USB durch einen angesteckten USB-Stick? Den Fall hatten wir in jüngerer Vergangenheit vor allem im Zusammenspiel mit USB3 und USB-Sticks minderer Qualität gemacht. Aber auch ein Abstecken des USB-Sticks nutzte nichts.&lt;/li>
&lt;/ol>
&lt;p>Schließlich offenbarte ein Blick ins Kernel-Log, wieso keine Verbindung zustande kommen konnte: Der Kernel meldete in unregelmäßigen Abständen das An- und Abmelden des Quectel-Modems am USB. Dazwischen einige Fehlermeldungen, die erschienen, weil das Modem nicht wie erwartet auf die Kommandos der Modemsoftware reagierte.&lt;/p>
&lt;p>Wir befürchteten schon, es mit einer schwer zu behebenden USB-Störung zu tun zu haben, als wir anfingen, Vergleiche mit einem anderen Quectel Aufbau anzustellen. In unserem Originalaufbau nutzten wir einen USB-M.2 Adapter eines Herstellers, der dieses noch als &amp;ldquo;Experimentell&amp;rdquo; markierte. Um mit einer garantiert funktionierende Referenz vergleichen zu können, steckten wir stattdessen unser Quectel Evaluation Kit an. Dieses besteht im Prinzip auch aus einem USB-zu-M.2 Adapter und einigen Onboard-Antennen. Das Modem selbst steckten wir ebenfalls in das Quectel Board aus dem EK, um es als Fehlerquelle ausschließen zu können.&lt;/p>
&lt;p>Das Ergebnis: Einwandfreier Empfang, stabile Pings. Keine Verbindungsabbrüche auf dem USB-Bus. So geriet das USB-M.2 Board des anderen Herstellers früh ins Visier. Die genaue Ursache konnten wir aber noch nicht benennen.&lt;/p>
&lt;p>Ein paar Experimente später war das Quectel Mobilfunkmodem wieder in seinem ursprünglichen Adapterboard eingeschraubt. In der Zwischenzeit hatte sich herauskristallisiert, dass die USB-Verbindung vor allem dann zusammenbrach, wenn das Modem beansprucht wurde. Also etwa nach dem Start des selbigen oder wenn es mit der Netzsuche oder dem Verbindungsaufbau in ein Mobilfunknetz beauftragt wurde. Das roch nach einem Stromproblem. Schließlich brachte die aufgeteilte Stromversorgung von Raspi und Modem eine wertvolle Bestätigung: Versorgten wir die beiden Einheiten über ein Y-Kabel (am M.2 Board) mit zwei voneinander unabhängigen Akkus, lief das Modem einwandfrei. Es kam nicht nur eine robuste Verbindung zustande, sondern auch der Empfang war nun merklich besser.&lt;/p>
&lt;p>Das Modem brauchte also offenbar etwas mehr Leistung, als ein einzelner Akku stemmen konnte. Wir machten die Probe mit einem leistungsstarken Netzteil, das nun das Raspberry Pi und das daran angeschlossene Modem mit ausreichend Leistung versorgen sollte. Das Netzteil wurde auf 5V und eine Stromgrenze von 6A eingestellt. Das Datenblatt des Modems spricht von einer kurzzeitigen, maximalen Stromaufnahme von bis zu 5A. Möglicherweise war unser Akku nicht stark genug?&lt;/p>
&lt;p>Ernüchtert stellten wir fest, dass auch das starke Netzteil keine Besserung brachte. Doch wo war noch das Problem? Für eine robuste Spannungsversorgung war nun doch gesorgt! Zur Sicherheit klammerten wir auch die USB-Ports des Raspis als Fehlerquelle aus. Diese lassen per default nur einen Strom von 600 mA zu. Über eine &lt;a href="https://www.elektronik-kompendium.de/sites/raspberry-pi/2206111.htm">Einstellung&lt;/a> in der &lt;code>config.txt&lt;/code> kann diese Limitierung zwar aufgehoben werden, aber wir entschlossen uns, das Modem lieber direkt über Lötkontakte auf dem M.2 Board und eine Verbindung zum 5V Header Pin zu versorgen. Leider brachte auch das Entfernen des USB aus dem Stromversorgungs-Pfad nicht den erhofften Erfolg.&lt;/p>
&lt;p>Ein wenig später und viel ratloser zückten wir das Oszilloskop und nahmen uns vor, die Spannungspegel an verschiedenen Stellen unseres Setups genauer zu messen:&lt;/p>
&lt;ul>
&lt;li>Direkt am Mobilfunkmodem (4V) - blau&lt;/li>
&lt;li>Am Raspberry Pi Header (5V) - gelb&lt;/li>
&lt;li>Am Raspi Spannungseingang / Netzteil (5V) - violett&lt;/li>
&lt;/ul>
&lt;p>Es offenbarte sich dieser Anblick:&lt;/p>
&lt;p>&lt;img alt="Oszilloskop zeigt Kurven mit Spannungseinbrüchen an allen drei Messstellen" src="https://blog.zero-iee.com/posts/quectel-rn520g-stabilitaetsprobleme-raspberry-pi/images/RigolDS0_via_USB_ohne_Kondensatoren.png">&lt;/p>
&lt;p>Wie deutlich an allen drei Kurven zu sehen ist, bestimmt ein gewisses Flimmern das Bild. Die Spannung ist keineswegs stabil, wenn das Modem beansprucht wird, sondern schwankt zum Teil bis zu 1 V. Besonders heftig ist der Spannungseinbruch direkt am Mobilfunkmodem. Dieser kommt daher, dass dem Modem (auf dem M.2 Board) ein Spannungswandler vorgeschaltet ist, der unter dem plötzlichen Strombedarf auf einmal &amp;ldquo;webknickt&amp;rdquo; bzw. kurzzeitig abschaltet, sobald er seinerseits keine ausreichend hohe Spannung mehr an seinem Eingang detektiert. Schließlich knickt das Mobilfunkmodem ein und startet sich neu - daher kommt der Disconnect, den wir am USB beobachten konnten. Die Unruhe in der Spannungskurve zieht sich - wie sich schön nachvollziehen lässt - in der Kette bis zum Netzteil durch. Mit nachlassender Intensität, aber dennoch deutlich.&lt;/p>
&lt;p>Obwohl seit dem Raspberry Pi 4 &lt;em>keine&lt;/em> &lt;a href="https://learn.watterott.com/de/raspberrypi/troubleshooting/">Polyfuse&lt;/a> mehr zwischen USB Power In und 5V Rail geschaltet ist, die durch ihren Widerstand den Spannungspegel auf der 5V Rail einbrechen lassen könnte, beobachten wir einen leichten Spannungsabfall zwischen dem 5V Header-Pin (gelb) und dem USB-C Power In Anschluss. Dieser könnte evtl. auf den Widerstand der Leiterbahnen auf das Raspi Platine zurückzuführen sein - denn diese sind nicht unbedingt für hohe Ströme ausgelegt.&lt;/p>
&lt;p>Uns war nun klar, wieso wir überhaupt ein Stromproblem hatten und wieso ein einzelnes (aber starkes!) Netzteil an dieser Stelle das Problem nicht beheben konnte. Behelfsmäßig begannen wir, mit Kondensatoren an verschiedenen Stellen zu experimentieren:&lt;/p>
&lt;ul>
&lt;li>An der 4V Versorgungsspannung zum Mobilfunkmodem&lt;/li>
&lt;li>Am 5V Raspberry Pi Header&lt;/li>
&lt;li>Am 5V Eingang des Raspberry Pi&lt;/li>
&lt;/ul>
&lt;p>Eine merkliche Besserung zeichnete sich ab, als wir die 5V-USB-Versorgung für den M.2 Adapter an den Pins am Raspi-Header stabilisierten. Wir wählten hierzu einen 1000 uF-Elektrolytkondensator:&lt;/p>
&lt;p>&lt;img alt="Oszilloskop zeigt deutlich stabilisierte Spannungslinie für den Header" src="https://blog.zero-iee.com/posts/quectel-rn520g-stabilitaetsprobleme-raspberry-pi/images/RigolDS1_via_USB_Kondensator_Raspi_header_5V.png">&lt;/p>
&lt;p>Ein Versagen des M.2 Spannungswandlers auf 4V konnten wir allerdings erst verhindern, als wir weitere Kondensatoren an der 4V-Versorgung des Modems und dem 5V-Eingang des Rapsberry Pi&amp;rsquo;s integrierten:&lt;/p>
&lt;p>&lt;img alt="Oszilloskop zeigt weiter stabilisierte Linien auch für Eingang und Header-Messstellen" src="https://blog.zero-iee.com/posts/quectel-rn520g-stabilitaetsprobleme-raspberry-pi/images/RigolDS2_via_USB_Kondensator_Raspi_und_M2_4V.png">&lt;/p>
&lt;p>Nun zeigte sich aber ein anderes Symptom: Durch unsere Maßnahmen hatten wir nun ein anderes Problem geschaffen: Der Hardwaremanager des Kernels beschwerte sich in roter Schrift über eine &amp;ldquo;Undervoltage!&amp;rdquo;. Der plötzliche Strombedarf und das Nachladen der Kondensatoren waren vermutlich zu viel für die Raspi-Leiterbahnen. Noch nicht genug, um das Raspi zu resetten, aber die Warnung namen wir ernst und wollten kein Risiko eingehen. Ein stabiler Betrieb beim Kunden ist uns äußerst wichtig.&lt;/p>
&lt;p>Um das Problem zu beseitigen, entschieden wir uns daher, das Raspi und das M.2 Aufsatzboard nicht mehr weiter über USB-C mit Strom zu versorgen, sondern über den Raspi-Header bzw. über angelötete Kontakte direkt am M.2 Board. Denn von hier aus konnten sowohl das M.2 Board als auch das Raspi die Leistung über kurze Strecke beziehen - die Stromspitzen des Mobilfunkmoduls mussten nicht mehr über die Raspi-Leiterbahnen geleitet werden.&lt;/p>
&lt;p>&lt;img alt="Oszilloskop zeigt eine sehr glatte Spannungskurve für die Messstellen Raspi Header und Modem" src="https://blog.zero-iee.com/posts/quectel-rn520g-stabilitaetsprobleme-raspberry-pi/images/RigolDS3_via_Header_mit_Kondensatoren_uns_.png">&lt;/p>
&lt;p>Mit den Kondensatoren und der zentraleren Stromversorgung lief unser Setup einwandfrei! Keine Abbrüche mehr beim USB und auch der Kernel gab keine Spannungswarnungen mehr aus. Doch das Beste war: Die Kondensatoren stellten sich von da an als verzichtbar heraus:&lt;/p>
&lt;p>Die Spannungskurven sind ohne Kondensatoren zwar etwas rauer als vorher, aber immer noch stabil genug, um keine Fehler am Modem oder Mikroprozessor zu verursachen.&lt;/p>
&lt;p>&lt;strong>Alles, was für die Behebung unseres Problems nötig war, war also eine Stromversorgung über den Raspi-Header (anstatt über die USB-C Buchse des Raspis) und eine direkte Stromversorgung des Mobilfunkmodems&lt;/strong>&lt;/p>
&lt;p>Das Problem war offenbar, dass die Leiterbahnen auf dem Raspi vermutlich nicht für die durch das Mobilfunkmodem und dessen Spannungswandler erzeugten Spitzenströme ausgelegt sind, sodass eine Versorgung des Modems nicht über das Raspi erfolgen sollte, sondern direkt am M.2 Board.&lt;/p>
&lt;p>&lt;em>&amp;hellip; wie wir bei der ZERO GmbH gerne sagen: &amp;ldquo;Again what learned!&amp;rdquo; ;-)&lt;/em>&lt;/p></description></item><item><title>Raspberry Pi mit Waveshare NB-IoT HAT / Simcom SIM7070G Modem zum Internet verbinden</title><link>https://blog.zero-iee.com/posts/nb-iot-internet-connection-with-simcom-sim7070g-modem/</link><pubDate>Wed, 17 Jan 2024 10:00:00 +0100</pubDate><guid>https://blog.zero-iee.com/posts/nb-iot-internet-connection-with-simcom-sim7070g-modem/</guid><description>&lt;p>Wir haben uns das &amp;ldquo;Waveshare SIM7070G Cat-M/NB-IoT/GPRS HAT&amp;rdquo; für das Raspberry Pi genauer angesehen und in Betrieb genommen. Dabei haben wir verschiedene Fallstricke aufgedeckt und beschreiben im Folgenden, wie wir das NB-IoT Modem eingerichtet haben, um einen unserer &lt;a href="https://www.zero-iee.com/de/products/">#AMPS Nodes&lt;/a> mit dem Internet zu verbinden.&lt;/p>
&lt;ul>
&lt;li>Hardware:
&lt;ul>
&lt;li>Raspberry Pi 4 B&lt;/li>
&lt;li>Mobilfunk-HAT: &lt;a href="https://www.waveshare.com/wiki/SIM7070G_Cat-M/NB-IoT/GPRS_HAT">Waveshare SIM7070G Cat-M/NB-IoT/GPRS HAT&lt;/a>&lt;/li>
&lt;li>SIM-Karte: Telekom M2M&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Software: Raspbian 12 &amp;ldquo;Bookworm&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;p>&lt;img alt="Animated Webp Image of the blinking Waveshare module attached to a Raspi" src="https://blog.zero-iee.com/posts/nb-iot-internet-connection-with-simcom-sim7070g-modem/images/waveshare-raspi.webp">&lt;/p>
&lt;h2 id="modem-an-raspberry-pi-anschließen" >Modem an Raspberry Pi anschließen
&lt;span>
&lt;a href="#modem-an-raspberry-pi-anschlie%c3%9fen">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Das Modem wird - wie jedes andere HAT-Modul über den Raspberry Pin-Header mit dem Raspberry Pi 4 B verbunden. Zusätzlich haben wir das Modul über das mitgelieferte USB-Kabel mit dem Raspberry Pi verbunden, um in einem ersten Schritt zu überprüfen, ob die serielle Konsole wie erwartet funktioniert.&lt;/p>
&lt;p>&lt;em>Auf das USB-Kabel kann später verzichtet werden!&lt;/em>&lt;/p>
&lt;h2 id="das-modem-mit-strom-versorgen" >Das Modem mit Strom versorgen
&lt;span>
&lt;a href="#das-modem-mit-strom-versorgen">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Offenbar ist das Mobilfunkmodem zu einem der GPIO Pins des Raspberry Pis verbunden. Indem der GPIO Pin 4 angesteuert wird, wird das Modem ein- oder ausgeschaltet. Nach dem Start sollte der Pin erst einmal auf einen Low-Pegel geschaltet werden, sodass (bedingt durch einen NPN-Transistor am Modul) am SimCom Modem ein High-Pegel anliegt. Der High-Pegel sollte am Eingang dauerhaft anliegen, wenn &lt;em>keine&lt;/em> Aktion gewünscht wird. Wird hingegen eine Ein- oder Ausschaltaktion gewünscht, muss an dem SimCom Modem mindestens für eine Sekunde (einschalten) bzw. 1,2 Sekunden (ausschalten) ein Low-Pegel anliegen, bevor zurück auf einen High-Pegel gewechselt wird.&lt;/p>
&lt;p>Das initiale Schalten auf den High-Pegel kann so durchgeführt werden:&lt;/p>
&lt;pre>&lt;code>echo &amp;quot;4&amp;quot; &amp;gt; /sys/class/gpio/export
sleep 0.1
echo &amp;quot;out&amp;quot; &amp;gt; /sys/class/gpio/gpio4/direction
echo &amp;quot;0&amp;quot; &amp;gt; /sys/class/gpio/gpio4/value
&lt;/code>&lt;/pre>
&lt;p>&lt;em>Erinnerung: &amp;ldquo;0&amp;rdquo; bewirkt einen Low-Pegel am NPN-Transistor und daher einen invertierten Pegel &amp;ldquo;high&amp;rdquo; am Modem!&lt;/em>&lt;/p>
&lt;p>Diese Kommandofolge wird in die Datei &lt;code>/etc/rc.local&lt;/code> vor die &lt;code>exit 0&lt;/code> Anweisung gepackt und somit nach jedem Boot einmal ausgeführt. Standardmäßig sollte das Modem nach der Versorgung mit Strom starten.&lt;/p>
&lt;p>Wenn das Modem explizit ein- oder ausgeschaltet werden soll, muss der Eingang - wie bereits erwähnt - am Modem für mindestens 1.2 Sekunden auf einen Low-Pegel gezogen werden. Das erreichen wir durch einen kurzen High-Pegel an den Moduleingängen.&lt;/p>
&lt;p>Zum Umschalten der Stromversorgung legen wir ein Script &lt;code>/home/pi/powertoggle.sh&lt;/code> an, das die folgende Sequenz als Inhalt hat:&lt;/p>
&lt;pre tabindex="0">&lt;code>#!/bin/bash
echo &amp;#34;1&amp;#34; &amp;gt; /sys/class/gpio/gpio4/value
sleep 1.2
echo &amp;#34;0&amp;#34; &amp;gt; /sys/class/gpio/gpio4/value
&lt;/code>&lt;/pre>&lt;p>Wird das Script 1x ausgeführt, startet das Modem. Wird es nochmal ausgeführt, wird es heruntergefahren.&lt;/p>
&lt;p>Normalerweise muss dieses &lt;code>powertoggle.sh&lt;/code> Script nach dem Start nicht ausgeführt werden, da das Modem von sich aus startet. Sollte allerdings keine serielle Verbindung zustande kommen, kann es helfen, die Stromversorgung einmal umzuschalten, indem das Script ausgeführt wird.&lt;/p>
&lt;h2 id="serielle-verbindung-zum-modem-prüfen" >Serielle Verbindung zum Modem prüfen
&lt;span>
&lt;a href="#serielle-verbindung-zum-modem-pr%c3%bcfen">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Die Kommunikation mit dem Mobilfunkmodem läuft ausschließlich über eine serielle Verbindung, welche innerhalb von USB bereitgestellt wird. Die Bandbreite der Schnittstelle ist sehr begrenzt, aber im NB-IoT Anwendungsfall völlig ausreichend, denn die zur Verfügung stehende Bandbreite im Mobilfunknetz ist ohnehin minimal und eignet sich nur zur Übermittlung kleinster Datenmengen (Statusinformationen, Sensordaten, Kommandos, &amp;hellip;).&lt;/p>
&lt;p>Unser Modem identifiziert sich am USB-Port mit USB Vendor ID &lt;code>1e0e&lt;/code> und Product ID &lt;code>9206&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>pi@raspberrypi:~ $ lsusb
Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub
Bus 001 Device 020: ID 1e0e:9206 Qualcomm / Option SimTech SIM7080 &amp;lt;------ SIM7070 Modem
Bus 001 Device 002: ID 2109:3431 VIA Labs, Inc. Hub
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
&lt;/code>&lt;/pre>&lt;p>Laut Datenblatt (&lt;a href="https://www.simcom.com/product/SIM7070G.html">SIM7070_SIM7080_SIM7090 Series_Linux_Application Note_V1.02&lt;/a>) bietet das Modem über USB also folgende Schnittstellen an:&lt;/p>
&lt;ul>
&lt;li>0: (USB serial): Diagnostic interface&lt;/li>
&lt;li>1: (USB serial): GPS NMEA interface&lt;/li>
&lt;li>2: (USB serial): AT port interface&lt;/li>
&lt;li>3: (USB serial): QFLOG interface&lt;/li>
&lt;li>4: (USB serial): DAM interface&lt;/li>
&lt;li>5: (USB serial): Modem port interface&lt;/li>
&lt;/ul>
&lt;p>Je nach Product ID kann sich die Portzuordnung unterscheiden - ein Blick ins Datenblatt kann sich daher lohnen. Allerdings befindet sich die für diesen Artikel wichtigste Schnittstelle immer an Position 2: Die AT-Port Schnittstelle.&lt;/p>
&lt;p>Wie im Mobilfunkbereich üblich, wird auch dieses Mobilfunkmodem über sog. AT-Kommandos auf einer serielle Schnittstelle angesteuert. Der Linux Kernel ab Mainline Kernel 5.8.10 enthält die &lt;a href="https://elixir.bootlin.com/linux/v5.8.10/source/drivers/usb/serial/option.c#L1827">notwendigen Anpassungen&lt;/a> im USB Options Treiber, welcher die zuvor erwähnten seriellen Schnittstellen über USB bereitstellt.&lt;/p>
&lt;p>Um die AT-Schnittstelle zu testen, genügt es, mittels Minicom eine Verbindung herzustellen. Dazu wird Minicom installiert:&lt;/p>
&lt;pre>&lt;code>sudo apt install minicom
&lt;/code>&lt;/pre>
&lt;p>&amp;hellip; und gestartet:&lt;/p>
&lt;pre>&lt;code>sudo minicom -b 115200 -D /dev/ttyUSB2
&lt;/code>&lt;/pre>
&lt;p>Danach kann über die Eingabe von&lt;/p>
&lt;pre>&lt;code>AT
&lt;/code>&lt;/pre>
&lt;p>geprüft werden, ob AT-Kommandos akzeptiert werden. So stellen wir sicher, dass wir mit der korrekten Konsole sprechen. Kommt ein &amp;ldquo;OK&amp;rdquo; zurück, ist alles in Ordnung und das Modem reagiert auf unsere Kommandos.&lt;/p>
&lt;p>Über &lt;code>STRG+A&lt;/code> und &lt;code>X&lt;/code> kann Minicom wieder verlassen werden.&lt;/p>
&lt;h2 id="auf-das-raspberry-pi-eigene-serial-interface-umstellen" >Auf das Raspberry Pi-eigene Serial Interface umstellen
&lt;span>
&lt;a href="#auf-das-raspberry-pi-eigene-serial-interface-umstellen">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Wenn wir sicher sind, dass die USB-basierte serielle Kommunikation mit dem Modem funktioniert, können wir auch auf das Raspberry Pi-eigene Serial Interface &lt;code>ttyS0&lt;/code> umstellen. Das bietet den großen Vorteil, dass keine USB-Verbindung mehr zwischen Raspi und dem Waveshare-Modul bestehen muss: Das USB-Kabel kann entfernt werden.&lt;/p>
&lt;p>Auf dem Raspberry Pi muss die serielle Konsole noch aktiviert und passend eingestellt werden.
Dazu im &lt;code>raspi-config&lt;/code> Tool &amp;ldquo;03 Interface options&amp;rdquo; und dann &amp;ldquo;I5 Serial Port&amp;rdquo; wählen. Einstellungen:&lt;/p>
&lt;ul>
&lt;li>Login Shell: NO&lt;/li>
&lt;li>Serial Port Hardware enabled: YES&lt;/li>
&lt;/ul>
&lt;p>Wichtig: Bei &amp;ldquo;Login shell&amp;rdquo; muss &lt;code>NO&lt;/code> gewählt werden. Andernfalls können Kommunikationsprobleme mit dem Modem auftreten. Zum Schluss das Raspi einmal neu starten, um die Einstellungen zu aktivieren.&lt;/p>
&lt;p>Von nun an sollte auch eine serielle Kommunikation über die &lt;code>/dev/ttyS0&lt;/code> Schnittstelle möglich sein. Wie im Fall oben kann erneut Minicom genutzt werden, um die Verbindung zu überprüfen.&lt;/p>
&lt;p>Tipp: Erscheint nicht sofort eine Antwort auf den &amp;ldquo;AT&amp;rdquo; Befehl, kann eine erneute Eingabe zum Erfolg führen. Dazu mehr im Abschnitt &lt;em>&amp;ldquo;Modem regiert nicht: Ein Auto Bauding-Problem&amp;rdquo;&lt;/em>.&lt;/p>
&lt;h2 id="mit-ppp-einen-ip-datenkanal-öffnen" >Mit PPP einen IP-Datenkanal öffnen
&lt;span>
&lt;a href="#mit-ppp-einen-ip-datenkanal-%c3%b6ffnen">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Um eine IP-Adresse vom Mobilfunkprovider zu bekommen, muss eine PPP-Anmeldung durchgeführt werden. Wir nutzen eine Telekom M2M (Machine-to-Machine) SIM Karte, welche das Telekom NB-IoT Netz unterstützt. Die PPP-Informationen, die im folgenden genannt werden, passen auf das M2M Netz der Telekom und möglicherweise auch auf das einiger Reseller. Für andere Anbieter müssen APN oder evtl. auch mehr Konfigurationsparameter angepasst werden.&lt;/p>
&lt;p>Die PPP-Verbindung stellen wir über den PPP Daemon &lt;code>pppd&lt;/code> her, der wie folgt installiert wird:&lt;/p>
&lt;pre>&lt;code>sudo apt install ppp
&lt;/code>&lt;/pre>
&lt;p>An zwei Stellen muss der PPP Daemon konfiguriert werden. Beginnen wir mit der Providerkonfiguration, die in &lt;code>/etc/ppp/peers/telekomM2M&lt;/code> angelegt wird:&lt;/p>
&lt;pre tabindex="0">&lt;code>user &amp;#34;m2m&amp;#34;
connect &amp;#34;/usr/sbin/chat -v -f /etc/chatscripts/telekomM2M -T internet.m2mportal.de&amp;#34;
# Serial device to which the modem is connected.
/dev/ttyS0
# Speed of the serial line.
115200
nocrtscts
debug
nodetach
ipcp-accept-local
ipcp-accept-remote
# Assumes that your IP address is allocated dynamically by the ISP.
noipdefault
# Try to get the name server addresses from the ISP.
usepeerdns
# Use this connection as the default route.
defaultroute
# Makes pppd &amp;#34;dial again&amp;#34; when the connection is lost.
persist
maxfail 0
holdoff 5
# Do not ask the remote to authenticate.
noauth
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>/etc/chatscripts/telekomM2M&lt;/code> ist der Name des &amp;ldquo;Chat-Scripts&amp;rdquo; für die Kommunikation mit dem Modem&lt;/li>
&lt;li>&lt;code>internet.m2mportal.de&lt;/code> ist der APN-Name des M2M-Netzwerks&lt;/li>
&lt;/ul>
&lt;p>Da das Chat-Script &lt;code>/etc/chatscripts/telekomM2M&lt;/code> noch nicht existiert, wird es nun angelegt:&lt;/p>
&lt;pre tabindex="0">&lt;code>ABORT &amp;#34;BUSY&amp;#34;
ABORT &amp;#34;VOICE&amp;#34;
ABORT &amp;#34;NO CARRIER&amp;#34;
ABORT &amp;#34;NO DIALTONE&amp;#34;
ABORT &amp;#34;NO DIAL TONE&amp;#34;
ABORT &amp;#34;NO ANSWER&amp;#34;
ABORT &amp;#34;DELAYED&amp;#34;
ABORT &amp;#34;ERROR&amp;#34;
TIMEOUT 5
&amp;#39;&amp;#39; AT
&amp;#39;OK&amp;#39; AT
OK ATE1
OK AT+CGDCONT=1,&amp;#34;IPV4V6&amp;#34;,&amp;#34;\T&amp;#34;,&amp;#34;&amp;#34;,0,0
OK ATD*99#
TIMEOUT 22
CONNECT &amp;#39;&amp;#39;
&lt;/code>&lt;/pre>&lt;p>Wie auch bei der vorherigen Konfigurationsdatei: Dieses Chat-Script funktioniert möglicherweise nur für das &amp;ldquo;Telekom M2M&amp;rdquo; Netz der Deutschen Telekom. Ob es so oder so ähnlich auch für andere Anbieter funktioniert, können wir derzeit nicht sicher sagen. Womöglich kann es aber auch für andere Provider wie z.B. Vodafone eingesetzt werden.&lt;/p>
&lt;p>&lt;em>Übrigens: Wie haben in dieses Script eine zweite &amp;ldquo;AT&amp;rdquo; Abfrage eingebaut, um ein Timing-Problem zu vermeiden. Dazu später mehr unter &amp;ldquo;Ein Timing-Problem&amp;rdquo;.&lt;/em>&lt;/p>
&lt;p>Nun, da beide Konfigurationsdateien fertiggestellt sind, können wir das Modem zum Leben erwecken. Stellt sicher, dass die serielle Konsole &lt;code>/dev/ttyS0&lt;/code> nicht mehr von Minicom oder einem ähnlichen Terminal verwendet wird und führt folgendes Kommando auf dem Raspberry Pi aus:&lt;/p>
&lt;pre>&lt;code>sudo pppd call telekomM2M
&lt;/code>&lt;/pre>
&lt;p>Der PPP Daemon versucht nun, sich am Netzwerk anzumelden. Hat er Erfolg, bezieht er vom PPP Server eine IP-Adresse und andere Informationen über eine mobile Datenverbindung. Eine neue Netzwerkschnittstelle &lt;code>ppp0&lt;/code> wird im Hintergrund eingerichtet. In einem zweiten Konsolenfenster kann dies nachvollzogen werden:&lt;/p>
&lt;pre tabindex="0">&lt;code>pi@raspberrypi:~ $ ip addr
[...]
22: ppp0: &amp;lt;POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UNKNOWN group default qlen 3
link/ppp
inet 10.155.22.50 peer 10.64.64.64/32 scope global ppp0
valid_lft forever preferred_lft forever
&lt;/code>&lt;/pre>&lt;p>Die (private) IP-Adresse &lt;code>10.155.22.50&lt;/code> liegt am Interface an und kann ab sofort für die Kommunikation zu anderen Netzwerkteilnehmern oder ins Internet verwendet werden:&lt;/p>
&lt;pre>&lt;code>ping -I ppp0 1.1.1.1
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Falls nicht sofort Pings durchkommen: Keine Sorge!&lt;/strong> Das NB-IoT M2M Netz ist nicht auf Latenz optimiert. An unserem Standort dauert es ca. 7 Sekunden, bis die ersten Datenpakete zurückgekommen sind. Mit jedem Datenpaket wird die Latenz dann langsam besser, bis wir uns gut 100 ms annähern.&lt;/p>
&lt;pre tabindex="0">&lt;code>pi@raspberrypi:~ $ ping -I ppp0 1.1.1.1
PING 1.1.1.1 (1.1.1.1) from 10.155.22.50 ppp0: 56(84) bytes of data.
64 bytes from 1.1.1.1: icmp_seq=2 ttl=51 time=7002 ms
64 bytes from 1.1.1.1: icmp_seq=3 ttl=51 time=5978 ms
64 bytes from 1.1.1.1: icmp_seq=4 ttl=51 time=5337 ms
64 bytes from 1.1.1.1: icmp_seq=5 ttl=51 time=4313 ms
64 bytes from 1.1.1.1: icmp_seq=8 ttl=51 time=2297 ms
64 bytes from 1.1.1.1: icmp_seq=9 ttl=51 time=2316 ms
64 bytes from 1.1.1.1: icmp_seq=10 ttl=51 time=1315 ms
64 bytes from 1.1.1.1: icmp_seq=11 ttl=51 time=433 ms
64 bytes from 1.1.1.1: icmp_seq=12 ttl=51 time=392 ms
64 bytes from 1.1.1.1: icmp_seq=13 ttl=51 time=393 ms
64 bytes from 1.1.1.1: icmp_seq=14 ttl=51 time=231 ms
64 bytes from 1.1.1.1: icmp_seq=15 ttl=51 time=429 ms
64 bytes from 1.1.1.1: icmp_seq=16 ttl=51 time=268 ms
64 bytes from 1.1.1.1: icmp_seq=17 ttl=51 time=347 ms
64 bytes from 1.1.1.1: icmp_seq=18 ttl=51 time=546 ms
64 bytes from 1.1.1.1: icmp_seq=19 ttl=51 time=163 ms
64 bytes from 1.1.1.1: icmp_seq=20 ttl=51 time=282 ms
64 bytes from 1.1.1.1: icmp_seq=21 ttl=51 time=283 ms
64 bytes from 1.1.1.1: icmp_seq=22 ttl=51 time=139 ms
64 bytes from 1.1.1.1: icmp_seq=23 ttl=51 time=116 ms
64 bytes from 1.1.1.1: icmp_seq=24 ttl=51 time=135 ms
64 bytes from 1.1.1.1: icmp_seq=25 ttl=51 time=154 ms
64 bytes from 1.1.1.1: icmp_seq=26 ttl=51 time=173 ms
^C
--- 1.1.1.1 ping statistics ---
27 packets transmitted, 23 received, 14.8148% packet loss, time 26180ms
rtt min/avg/max/mdev = 116.182/1436.578/7001.561/2066.895 ms, pipe 7
&lt;/code>&lt;/pre>&lt;p>In der &lt;code>/etc/resolv.conf&lt;/code> sind die beiden vom PPP-Daemon bezogenen DNS-Server aufgelistet:&lt;/p>
&lt;pre tabindex="0">&lt;code>pi@raspberrypi:~ $ cat /etc/resolv.conf
nameserver 10.74.210.210
nameserver 10.74.210.211
&lt;/code>&lt;/pre>&lt;p>Somit ist auch eine Namensauflösung über Telekom DNS-Server verfügbar.&lt;/p>
&lt;p>Informationen wie zugeordnete IP-Adresse, DNS-Server und Gateway (&amp;ldquo;remote IP address&amp;rdquo;) werden außerdem in die ppp Daemon Logausgabe geschrieben:&lt;/p>
&lt;pre tabindex="0">&lt;code>[...]
local IP address 10.155.22.50
remote IP address 10.64.64.64
primary DNS address 10.74.210.210
secondary DNS address 10.74.210.211
[...]
&lt;/code>&lt;/pre>&lt;p>&amp;hellip; was leider nicht für die öffentliche IPv6 Adresse gilt, die dem Modem zugeteilt wird: Diese findet sich nur in der Ausgabe von &lt;code>ip addr show dev ppp0&lt;/code> wieder. Dennoch ist IPv6 ebenso verfügbar:&lt;/p>
&lt;pre>&lt;code>ping -I ppp0 2001:4860:4860::8888
&lt;/code>&lt;/pre>
&lt;p>Wer nun das M2M Netzwerk für seinen gesamten Internetverkehr verwenden will, kann die Default-Route darauf umstellen:&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo ip route del default
sudo ip -6 route del default
sudo ip route add default via 10.64.64.64 dev ppp0
sudo ip -6 route add default via fe80::1:2:47b1:3706 dev ppp0
&lt;/code>&lt;/pre>&lt;p>Die IPv4-Gatewayadresse &lt;code>10.64.64.64&lt;/code> wurde dem ppp Log entnommen - das IPv6 Pendant &lt;code>fe80::1:2:47b1:3706&lt;/code> wurde den IPv6 Routinginformationen mittels &lt;code>ip -6 route&lt;/code> entnommen.&lt;/p>
&lt;p>&lt;strong>Übrigens&lt;/strong>: der PPP-Daemon scheint relativ rücksichtlos mit den Resolvereinträgen in &lt;code>/etc/resolv.conf&lt;/code> umzugehen und überschreibt einfach vorhandene Einträge. Belässt man die Standardroute beispielsweise auf dem Ethernet-Interface, kann es sein, dass kein DNS-Resolver mehr erreichbar ist und Namensauflösungen fehlschlagen. Eine nachträgliche Korrektur der &lt;code>resolv.conf&lt;/code> schafft in diesem Fall Abhilfe.&lt;/p>
&lt;h2 id="autostart-für-den-ppp-daemon" >Autostart für den PPP Daemon
&lt;span>
&lt;a href="#autostart-f%c3%bcr-den-ppp-daemon">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Standardmäßig bringt das ppp-Paket in Debian keinen Systemd Service für den PPP Daemon mit - aber kein Problem! Die Paketmaintainer von Arch Linux haben ein passendes &lt;a href="https://gitlab.archlinux.org/archlinux/packaging/packages/ppp/-/blob/main/ppp.systemd?ref_type=heads">Service-File erstellt&lt;/a>:&lt;/p>
&lt;pre tabindex="0">&lt;code>[Unit]
Description=PPP link to %I
Before=network.target
[Service]
Type=notify
ExecStart=/usr/sbin/pppd call %I nodetach nolog up_sdnotify
[Install]
WantedBy=multi-user.target
&lt;/code>&lt;/pre>&lt;p>Dieses können wir unter &lt;code>/etc/systemd/system/ppp@.service&lt;/code> speichern und den Daemon in den Boot-Autostart aufnehmen:&lt;/p>
&lt;pre>&lt;code>sudo systemctl daemon-reload
sudo systemctl enable ppp@telekomM2M.service
&lt;/code>&lt;/pre>
&lt;p>&lt;code>telekomM2M&lt;/code> ist hier der Name der Datei &lt;code>/etc/ppp/peers/telekomM2M&lt;/code>. Der Teil muss entsprechend angepasst werden, wenn die PP Konfigurationsdatei anders benannt ist. Dementsprechend ließe sich bei der Verwendung mehrerer Provider-Configs beispielsweise auch ein &lt;code>sudo systemctl enable ppp@provider2.service&lt;/code> aufrufen.&lt;/p>
&lt;p>Der PPP Daemon kann selbstverständlich auch über ein Systemd &amp;ldquo;start&amp;rdquo; Kommando gestartet werden:&lt;/p>
&lt;pre>&lt;code>sudo systemctl start ppp@telekomM2M.service
&lt;/code>&lt;/pre>
&lt;h2 id="modem-regiert-nicht-ein-auto-bauding-problem" >Modem regiert nicht: Ein Auto Bauding-Problem
&lt;span>
&lt;a href="#modem-regiert-nicht-ein-auto-bauding-problem">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Während unserer Experimente mit Waveshare&amp;rsquo;s SIM7070G-basierten Mobilfunkmodul sind wir auf ein Timing-Problem gestoßen. Wir könnten es lösen, aber es war nicht trivial zu finden, daher wollen wir kurz darauf eingehen.&lt;/p>
&lt;h3 id="symptome" >Symptome
&lt;span>
&lt;a href="#symptome">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Während der ersten Schritte mit dem Modul haben wir nicht das native serielle Interface genutzt, sondern sind den Umweg über den USB-to-Serial Adapter gegangen. Also Raspi =&amp;gt; USB-Anschluss des Moduls. Mit diesem Setup funktionierte der PPP-Daemon einwandfrei und wir konnten eine Internetverbindung herstellen.&lt;/p>
&lt;p>Später stellten wir auf die native serielle Verbindung um - also ohne den USB-Anschluss - und nutzten unter Linux statt &lt;code>/dev/ttyUSB2&lt;/code> das &lt;code>/dev/ttyS0&lt;/code> Interface, um die Kommunikation über den Raspi Header herzustellen. Allerdings konnte der PPP-Daemon ab diesem Zeitpunkt keine Verbindung mehr herstellen und brach mit einem Timeout ab.&lt;/p>
&lt;p>Unter einer Bedingung konnten wir das Modem in diesem Fall dennoch zur Kommunikation bewegen: Nämlich dann, wenn wir uns vor Ausführung des PPP-Daemons mit einer seriellen Konsole (z.B. Minicom) auf die Schnittstellen aufschalteten und einmal oder mehrmals das &amp;ldquo;AT&amp;rdquo; Kommando ausführen, um ein &amp;ldquo;OK&amp;rdquo; zurückzubekommen. Das Modem reagierte und bei einem erneuten Start des PPP-Daemons konnte schließlich auch eine Verbindung hergestellt werden. Das Aufschalten mit einem Terminal-Emulator schien also etwas an der Verbindung zurechtzurücken.&lt;/p>
&lt;h3 id="die-ursache" >Die Ursache
&lt;span>
&lt;a href="#die-ursache">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Durch systematisches Ausprobieren und Fixieren der Baudrate am Modem konnten wir schließlich die Ursache finden: Das &amp;ldquo;Auto-Baud&amp;rdquo; Feature des Modems - allem Anschein nach in Verbindung mit einem Timing-Problem.&lt;/p>
&lt;p>Das Modem ist ab Werk so eingestellt, dass es keine fest definierte Baudrate akzeptiert, sondern so, dass es versucht, beim ersten &amp;ldquo;AT&amp;rdquo; Kommando die Baudrate selbst zu erkennen und zu setzen. Stellt man sein Minicom-Tool also beispielsweise auf eine Baudrate von 115200 ein und schaltet sich auf das serielle Interface auf, führt die Ausführung von &amp;ldquo;AT&amp;rdquo; dazu, dass sich das Modem ebenfalls auf 115200 Baud einstellt. Dies erklärt auch, wieso wir nach so einem Schritt den PPP-Daemon niemals dazu bewegen konnten, mit einer anderen Baudrate zu arbeiten. Die erste Verbindung und ihre Baudrate sind nach einem Absetzen von &amp;ldquo;AP&amp;rdquo; ausschlaggebend.&lt;/p>
&lt;p>Das erste, was das Modem von unserem Raspi mitbekommen musste, war also ein &amp;ldquo;AT&amp;rdquo; String, um seine eigene Baudrate passend konfigurieren zu können. Wir haben im nächsten Schritt unser Chat-Script geprüft und festgestellt, dass das erste Kommando tatsächlich ein &amp;ldquo;AT&amp;rdquo; Kommando war. Alles in Ordnung also?&lt;/p>
&lt;p>Nicht ganz. Wir haben schließlich herausgefunden, dass wir an der Stelle möglicherweise in ein Timingproblem laufen. Denn die Dokumentation zu einem anderen Mobilfunkmodul des gleichen Herstellers SimCom erwähnt zum Auto-Baud Feature, dass nach dem ersten &amp;ldquo;AT&amp;rdquo; eine Weile gewartet werden sollte, bevor weitere Kommandos abgesetzt werden. Andernfalls könnten folgende Kommandos evtl. nicht mehr korrekt interpretiert werden.&lt;/p>
&lt;h3 id="die-lösung" >Die Lösung
&lt;span>
&lt;a href="#die-l%c3%b6sung">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Da die ChatScript Syntax keinen &amp;ldquo;sleep&amp;rdquo; Befehl oder ähnliches zu kennen scheint, haben wir kurzerhand eine zweite &amp;ldquo;AT&amp;rdquo; Abfrage hinzugefügt, um durch diese etwas Zeit zu gewinnen.&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;#39;&amp;#39; AT
&amp;#39;OK&amp;#39; AT
&lt;/code>&lt;/pre>&lt;p>Und tatsächlich - nun konnten wir auch über die native Serial-Schnittstelle mit dem Modem kommunizieren - ganz ohne vorheriges Aufschalten via Minicom. Der PPP-Daemon lief direkt nach dem Boot.&lt;/p>
&lt;p>Wieso hat es aber über die USB-Serial Verbindung tadellos funktioniert? Wir vermuten, dass die Umwandlung von und zu USB genug Verzögerung im System verursacht, sodass das Timingproblem in diesem Fall nicht auftritt.&lt;/p>
&lt;h2 id="eine-bessere-lösung-für-das-power-management" >Eine bessere Lösung für das Power Management
&lt;span>
&lt;a href="#eine-bessere-l%c3%b6sung-f%c3%bcr-das-power-management">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Zu Beginn dieses Beitrags haben wir bereits beschrieben, dass sich das SIM7070G Modul über GPIO4 des Raspberry Pis ein- oder ausschalten lässt. Dabei haben wir allerdings unterschlagen, dass wir den Pin in unserem &lt;code>powertoggle.sh&lt;/code> Script immer für eine Sekunde auf einen High-Pegel schalten (resultierend in einem Low-Pegel am SIM7070G-Modem).&lt;/p>
&lt;p>Tatsächlich offenbart das Datenblatt des Mobilfunkmodems folgendes:&lt;/p>
&lt;ul>
&lt;li>Low-Pegel für mindestens 1.0 Sekunde: Einschalten&lt;/li>
&lt;li>Low-Pegel für mindestens 1.2 Sekunden: Ausschalten.&lt;/li>
&lt;/ul>
&lt;p>Wir können also nicht nur &amp;ldquo;umschalten&amp;rdquo; und einen möglicherweise unbekannten Ausgangszustand in sein Gegenteil umkehren, sondern durch präzises Timing beim Schalten gezielt einen &amp;ldquo;An&amp;rdquo;- oder &amp;ldquo;Aus&amp;rdquo;-Zustand herbeiführen.&lt;/p>
&lt;p>Wir haben zunächst mit Bash-Befehlen experimentiert, aber relativ schnell festgestellt, dass das Timing der Bash-Shell zu ungenau ist, um zuverlässig ein- oder auszuschalten. Daher haben wir ein kleines Tool &lt;code>modemctl&lt;/code> in C implementiert, das &amp;ldquo;init&amp;rdquo;, &amp;ldquo;on&amp;rdquo; und &amp;ldquo;off&amp;rdquo; Argumente annehmen und den GPIO4 Ausgang des Raspis entsprechend präzise ansteuern kann:&lt;/p>
&lt;p>Quellcode &lt;code>modemctl.c&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>/*
* modemctl: Controls Waveshare NB-IoT power state by controlling GPIO pin
* Installing dependencies: sudo apt install pigpio
* Compiling: gcc -o modemctl modemctl.c -l pigpio
* Running: sudo ./modemctl init
* sudo ./modemctl on
* sudo ./modemctl off
*/
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;pigpio.h&amp;gt;
#define GPIO_PIN 4 // GPIO number of pin
#define ON_TIME 1.0 // Hold time for turning on
#define OFF_TIME 1.2 // Hold time for turning off
int main(int argc, char *argv[]) {
if (gpioInitialise() &amp;lt; 0) {
fprintf(stderr, &amp;#34;pigpio initialisation failed\n&amp;#34;);
return 1;
}
/* Set GPIO modes */
gpioSetMode(GPIO_PIN, PI_OUTPUT);
if (strcmp(argv[1], &amp;#34;init&amp;#34;) == 0) {
printf(&amp;#34;Initialising NB-IoT module power state\n&amp;#34;);
gpioWrite(GPIO_PIN, 0); /* Set pin to low to generate HIGH level on PWR input of module */
} else if (strcmp(argv[1], &amp;#34;on&amp;#34;) == 0) {
printf(&amp;#34;Turning NB-IoT module ON\n&amp;#34;);
gpioWrite(GPIO_PIN, 1); /* Set GPIO4 to 1 for ON_TIME seconds */
time_sleep(ON_TIME);
gpioWrite(GPIO_PIN, 0);
} else if (strcmp(argv[1], &amp;#34;off&amp;#34;) == 0) {
printf(&amp;#34;Turning NB-IoT module OFF\n&amp;#34;);
gpioWrite(GPIO_PIN, 1); /* Set GPIO4 to 1 for OFF_TIME seconds */
time_sleep(OFF_TIME);
gpioWrite(GPIO_PIN, 0);
} else {
printf(&amp;#34;Please provide \&amp;#34;on\&amp;#34; or \&amp;#34;off\&amp;#34; as an argument!\n&amp;#34;);
}
}
&lt;/code>&lt;/pre>&lt;p>Das Programm wird via&lt;/p>
&lt;pre>&lt;code>gcc -o modemctl modemctl.c -l pigpio
&lt;/code>&lt;/pre>
&lt;p>kompiliert und kann dann mit sudo gestartet werden, um das Modul zu schalten, z.B.&lt;/p>
&lt;pre>&lt;code>sudo ./modemctl init
sudo ./modemctl on
&lt;/code>&lt;/pre>
&lt;p>&amp;hellip; um das Modul einzuschalten.&lt;/p>
&lt;p>Zu beachten ist, dass das Ein- und Ausschalten des Modems einige Sekunden dauern kann und die serielle Schnittstelle nicht unmittelbar danach zur Verfügung steht.&lt;/p>
&lt;p>Am Blinken der &amp;ldquo;Net&amp;rdquo; LED am Modul kann das Status abgelesen werden:&lt;/p>
&lt;ul>
&lt;li>Kein Blinken: Ausgeschaltet&lt;/li>
&lt;li>Langsames Blinken: Eingeschaltet, aber keine PPP-Verbindung / Datenübertragung&lt;/li>
&lt;li>Schnelles Blinken (~ 800 Sekunden Zyklus): Eingeschaltet und Datenübertragung aktiv&lt;/li>
&lt;/ul>
&lt;p>Statt sich darauf zu verlassen, dass das Modem direkt nach dem Boot funktioniert &lt;em>- wir haben gegenteilige Erfahrungen gemacht -&lt;/em> können wir also anstelle des &lt;code>init.sh&lt;/code> Scriptes folgendes in die &lt;code>/etc/rc.local&lt;/code> aufnehmen:&lt;/p>
&lt;pre>&lt;code>/home/pi/modemctl init
/home/pi/modemctl on
&lt;/code>&lt;/pre>
&lt;p>Hiermit sollte das Modem beim Boot nun zuverlässig aktiviert werden. Das &lt;code>powertoggle.sh&lt;/code> Script wird nicht mehr benötigt.&lt;/p>
&lt;h2 id="performance" >Performance
&lt;span>
&lt;a href="#performance">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Wie in dem vorher gezeigten ping-Output dargestellt, kann die Latenz der Netzwerkverbindung stark variieren. Wir haben an unserem Standort die Erfahrung gemacht, dass die Latenz zunächst bei einigen Sekunden liegt. Mit anhaltender Datenübertragung sinkt die Latenz aber auf knapp 200 ms. Selbstverständlich eignet sich die Verbindung daher nicht um Übertragen mittlerer oder größerer Datenmengen. Für unsere Anwendungsfälle ist die Verbindung allerdings völlig brauchbar:&lt;/p>
&lt;ul>
&lt;li>Rollout von Konfigurationsänderungen (SSH / Ansible)&lt;/li>
&lt;li>Übertragung von Statusinformationen&lt;/li>
&lt;li>Übertragung kleiner Firmwareupdates&lt;/li>
&lt;li>Remote-SSH-Login zum Debugging&lt;/li>
&lt;/ul>
&lt;p>gping Test:&lt;/p>
&lt;pre>&lt;code>gping -i ppp0 -s -n 1.0 -b 60 1.1.1.1
&lt;/code>&lt;/pre>
&lt;p>&lt;img alt="gping Test mit dem oben erwähnten Kommando: Graph zeigt Latenz über 60 Sekunden" src="https://blog.zero-iee.com/posts/nb-iot-internet-connection-with-simcom-sim7070g-modem/images/gping.webp">&lt;/p>
&lt;p>Download-Test mit:&lt;/p>
&lt;pre>&lt;code>curl http://speedtest.tele2.net/1GB.zip -o /dev/null -m 60
&lt;/code>&lt;/pre>
&lt;p>Wir haben innerhalb eines Gebäudes und in Nähe eines Mobilfunkmasten 9,579 kByte/s (~77 kBit/s) im Download gemessen. Zeitspanne: 60 Sekunden.&lt;/p>
&lt;p>Upload-Test:&lt;/p>
&lt;pre>&lt;code>curl -T /dev/urandom http://speedtest.tele2.net/upload.php -O /dev/null -m 60
&lt;/code>&lt;/pre>
&lt;p>ähnliche bis leicht höhere Datenraten konnten wir auch im Upload erreichen. Allerdings ist uns wegen Verbindungsabbrüchen kein längerer, durchgängiger Upload-Vorgang gelungen. Die Aussagekraft des Tests ist daher zweifelhaft. Ursache für die Abbrüche ist möglicherweise eine Limitierung der zur Verfügung stehenden &amp;ldquo;Air Time&amp;rdquo; im NB-IoT Netz.&lt;/p>
&lt;p>Übrigens: Wer (ungeachtet der Latenz) lokal simulieren will, wie sich eine SSH-Session bei der von uns gemessenen Datenübertragungsrate &amp;ldquo;anfühlt&amp;rdquo;, kann dazu folgendes Kommando verwenden:&lt;/p>
&lt;pre>&lt;code>ssh -o ProxyCommand='pv -qL 9K | nc %h %p | pv -qL 9K' user@target-machine
&lt;/code>&lt;/pre>
&lt;p>Zusammenfassend lässt sich aber sagen, dass die Datenrate für die oben genannten Zwecke ausreichen ist. Dank &lt;a href="https://www.wireguard.com/">Wireguard&lt;/a>&amp;rsquo;s schlankem VPN Protokoll sind wir sogar in der Lage, verhältnismäßig latenzarme Verbindungen zu unserem &lt;a href="https://blog.zero-iee.com/posts/vpn-firewall-shorewall/">Management VPN&lt;/a> herzustellen. Wir sind gespannt, wie sich das System in ersten Feldversuchen schlagen wird.&lt;/p>
&lt;hr>
&lt;p>Quellen:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.waveshare.com/wiki/SIM7070G_Cat-M/NB-IoT/GPRS_HAT">Waveshare Wiki&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.waveshare.com/w/upload/3/39/SIM7080_Series_AT_Command_Manual_V1.02.pdf">SimCom AT Kommandoreferenz&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.waveshare.com/w/upload/4/47/SIM7080_Series_Linux_Application_Note_V1.00.pdf">SimCom Linux Application Note&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tldp.org/HOWTO/PPP-HOWTO/x1219.html">ChatScript&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.digikey.jp/htmldatasheets/production/1833952/0/0/1/sim800-series-at-command-manual.html#pf12">Auto-Bouding explained in a SIM800 Series datasheet&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>DSI Output Fehler beim Start einer Qt Anwendung verhindern (Raspberry Pi)</title><link>https://blog.zero-iee.com/posts/resolving-qt-dsi-failed-to-move-flip-permission-denied-error/</link><pubDate>Tue, 26 Sep 2023 09:39:39 +0200</pubDate><guid>https://blog.zero-iee.com/posts/resolving-qt-dsi-failed-to-move-flip-permission-denied-error/</guid><description>&lt;p>Gestern haben wir bei der Fertigstellung einiger unserer AMPS Einheiten mit Display und Qt-Applikation einen Fehler festgestellt, der dazu geführt hat, dass die Anwendung in seltenen Fällen nicht korrekt gestartet werden kann und crasht. Der Fehler sieht wie folgt aus:&lt;/p>
&lt;pre tabindex="0">&lt;code>-- Logs begin at Mon 2023-09-25 12:17:01 CEST, end at Mon 2023-09-25 12:32:43 CEST. --
Sep 25 12:32:24 0601-010200-0012 systemd[1]: Started app.
Sep 25 12:32:27 0601-010200-0012 tester[444]: Failed to move cursor on screen DSI1: -13
Sep 25 12:32:27 0601-010200-0012 tester[444]: Failed to move cursor on screen DSI1: -13
Sep 25 12:32:27 0601-010200-0012 tester[444]: Could not set cursor on screen DSI1: -13
Sep 25 12:32:28 0601-010200-0012 tester[444]: Could not set DRM mode for screen DSI1 (Permission denied)
Sep 25 12:32:28 0601-010200-0012 tester[444]: Could not queue DRM page flip on screen DSI1 (Permission denied)
Sep 25 12:32:29 0601-010200-0012 tester[444]: Could not queue DRM page flip on screen DSI1 (Permission denied)
&lt;/code>&lt;/pre>&lt;p>&amp;ldquo;In seltenen Fällen&amp;rdquo;, weil der Bug offenbar Timing-abhängig war. Weil uns die Fehlermeldungen allerdings nicht ganz unbekannt waren, konnten wir relativ schnell herausfinden, woher sie kamen:&lt;/p>
&lt;p>Unsere Anwendung läuft im EGLFS Betrieb und beansprucht die vollständige Kontrolle über das Display. Im Hintergrund läuft kein XServer, Wayland oder ähnliches. Die Fehlermeldungen weisen auf ein Berechtigungsproblem hin, kommen aber eigentlich daher, dass bereits eine andere Anwendung Kontrolle über das Display ausübt.&lt;/p>
&lt;p>In unserem Fall: Der Boot-Splashscreen (&lt;code>plymouth&lt;/code>) unserer Rasbian Distribution. Der Fehler tritt nur ca 1-2 von 10 Mal auf, weil systemd die Anwendung in den meisten Fällen zu einem Zeitpunkt startet, zu dem das Display bereits wieder freigegeben wurde. Je nach Bootzeit - und die kann ja bekanntlich leicht variieren - kann es aber auch passieren, dass das Timing so ungünstig ist, dass das Splashscreen das Display noch &lt;em>nicht&lt;/em> freigegeben hat, wenn unsere Anwendung dieses bereits nutzen will.&lt;/p>
&lt;p>Das Problem lässt sich glücklicherweise beseitigen, indem zum systemd Service unserer Anwendung mittels &lt;code>After&lt;/code> eine weitere Abhängigkeit hinzugefügt, z.B.&lt;/p>
&lt;pre>&lt;code>[Unit]
Description=App
After=systemd-user-sessions.service plymouth-quit.service
[Service]
Type=simple
User=pi
Group=pi
ExecStart=/opt/tester/bin/tester -platform=eglfs
[Install]
WantedBy=multi-user.target
&lt;/code>&lt;/pre>
&lt;p>&lt;em>Übrigens: In diesem Zusammenhang kann es sich auch lohnen, zu prüfen, ob der Benutzer, welcher die Applikation ausführt, in der Benutzergruppe &amp;ldquo;render&amp;rdquo; ist. Die Gruppenzugehörigkeit wird benötigt, um als Anwendung überhaupt via eglfs aus das Display zugreifen zu dürfen.&lt;/em>&lt;/p></description></item><item><title>Mikroe CAN SPI Click 3v3 an einem Raspberry Pi 4 betreiben</title><link>https://blog.zero-iee.com/posts/mikroe-can-shield-on-raspberry-pi/</link><pubDate>Tue, 20 Jun 2023 14:31:26 +0200</pubDate><guid>https://blog.zero-iee.com/posts/mikroe-can-shield-on-raspberry-pi/</guid><description>&lt;p>Die Firma Mikroelektronika (MikroE) aus Serbien bietet innerhalb ihres &amp;ldquo;Click&amp;rdquo; Ökosystems zahlreiche Funktionsmodule an, die an Mikrocontrollern betrieben werden können. Eines davon ist das &amp;ldquo;&lt;a href="https://www.mikroe.com/can-spi-33v-click">CAN SPI Click 3.3V&lt;/a>&amp;rdquo; CAN Controller Modul, das über die standardisierte &amp;ldquo;MikroBus&amp;rdquo; Schnittstelle bzw. SPI verbunden werden kann. Damit die Verbindung zu einem Raspberry Pi 4 funktioniert, haben wir das &amp;ldquo;&lt;a href="https://www.mikroe.com/pi-4-click-shield">Pi 4 Click Shield&lt;/a>&amp;rdquo; dazugenommen.&lt;/p>
&lt;p>In diesem Beitrag wollen wir kurz erklären, wie wir das CAN-Modul im Zusammenspiel mit dem Raspberry Pi 4 in Betrieb genommen haben.&lt;/p>
&lt;p>Das CAN SPI Click 3.3V Modul enthält laut &lt;a href="https://www.mikroe.com/can-spi-33v-click">Produktbeschreibung&lt;/a> einen MCP2515 CAN controller von Microchip. Damit der Chip von seinem Treiber erkannt werden kann, muss der Device Tree mittels Overlay angepasst werden. Ein passendes Overlay befindet sich bereits auf der Raspi Standdistribution &amp;ldquo;Raspberry Pi OS&amp;rdquo;, sodass das passende Overlay nur aktiviert werden muss.&lt;/p>
&lt;p>Hierzu wird die Konfigurationsdatei &lt;code>/boot/config.txt&lt;/code> angepasst:&lt;/p>
&lt;pre>&lt;code>[all]
dtoverlay=mcp2515-can0,oscillator=10000000,interrupt=6
&lt;/code>&lt;/pre>
&lt;p>Wichtig sind die beiden Parameter &amp;ldquo;oscillator&amp;rdquo; und &amp;ldquo;interrupt&amp;rdquo;:&lt;/p>
&lt;ul>
&lt;li>&lt;code>oscillator&lt;/code> beschreibt die Taktfrequenz des Taktgebers auf dem CAN-Modul. &lt;a href="https://download.mikroe.com/documents/add-on-boards/click/canspi-33v/can-spi-click-33v-manual-v100.pdf">Der Schaltplan&lt;/a> des Moduls offenbart, dass es sich um ein 10 MHz Quarz handelt - also müssen hier 10.000.000 Hz angegeben werden.&lt;/li>
&lt;li>&lt;code>interrupt&lt;/code> beschreibt den GPIO-Pin des Raspberry Pi, welcher bei eingehenden CAN-Frames ein Interrupt-Signal übermittelt. Das INT Signal aus eben erwähntem Schaltplan lässt sich über die MikroBus Schnittstelle weiter zum Pi 4 Click Shield verfolgen, wo es schließlich &lt;a href="https://download.mikroe.com/documents/add-on-boards/click/pi_4_click_shield/pi-4-click-shield-click-schematic-v101.pdf">mit GPIO6 des Raspberry Pi verbunden&lt;/a> ist. Daher ist hier der Wert &amp;ldquo;6&amp;rdquo; anzugeben.&lt;/li>
&lt;/ul>
&lt;p>Weiter geht es mit der Konfiguration der CAN-Netzwerkschnittstelle. In der neuen Datei &lt;code>/etc/network/interfaces.d/can0&lt;/code> wird folgender Inhalt eingetragen:&lt;/p>
&lt;pre>&lt;code>auto can0
iface can0 can static
bitrate 500000
&lt;/code>&lt;/pre>
&lt;p>Hierdurch wird auf dem CAN Interface eine Bitrate von 500 kBit/s gesetzt und das Interface beim Boot gestartet.&lt;/p>
&lt;p>Nach einem Reboot des Raspberry Pi sollte in den Kernelmeldungen folgendes zu sehen sein:&lt;/p>
&lt;pre>&lt;code>pi@raspi:~ $ dmesg | grep mcp
[ 8.239956] mcp251x spi0.0 can0: MCP2515 successfully initialized.
&lt;/code>&lt;/pre>
&lt;p>Der CAN-Controller wurde also erfolgreich erkannt.&lt;/p>
&lt;p>Auch ein &lt;code>ip link&lt;/code> sollte nun ein CAN Interface mit dem Status &amp;ldquo;UP&amp;rdquo; zeigen:&lt;/p>
&lt;pre>&lt;code>pi@raspi:~ $ ip link
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc mq state UP mode DEFAULT group default qlen 1000
link/ether e4:5f:01:af:96:bc brd ff:ff:ff:ff:ff:ff
3: wlan0: &amp;lt;BROADCAST,MULTICAST&amp;gt; mtu 1500 qdisc noop state DOWN mode DORMANT group default qlen 1000
link/ether e4:5f:01:af:96:bd brd ff:ff:ff:ff:ff:ff
4: can0: &amp;lt;NOARP,UP,LOWER_UP,ECHO&amp;gt; mtu 16 qdisc pfifo_fast state UP mode DEFAULT group default qlen 10
link/can
&lt;/code>&lt;/pre>
&lt;p>Um die Funktion zu testen, können wir uns die &lt;code>can-utils&lt;/code> zunutze machen und dem Raspi selbst eine Nachricht über CAN schicken:&lt;/p>
&lt;pre>&lt;code>sudo apt install can-utils
&lt;/code>&lt;/pre>
&lt;p>In einer SSH-Session wird das &lt;code>candump&lt;/code> Kommando gestartet, um alle eingehenden CAN Nachrichten zu zeigen:&lt;/p>
&lt;pre>&lt;code>sudo candump can0
&lt;/code>&lt;/pre>
&lt;p>In einer weiteren SSH-Session werden Testdaten über &lt;code>cansend&lt;/code> geschickt:&lt;/p>
&lt;pre>&lt;code>sudo cansend 123#FEFE
&lt;/code>&lt;/pre>
&lt;p>Wenn die eben verschickte Nachricht auch im candump-Fenster zu sehen ist, funktioniert der CAN-Bus ordnungsgemäß.&lt;/p>
&lt;hr>
&lt;p>Quellen:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://download.mikroe.com/documents/add-on-boards/click/pi_4_click_shield/pi-4-click-shield-click-schematic-v101.pdf">https://download.mikroe.com/documents/add-on-boards/click/pi_4_click_shield/pi-4-click-shield-click-schematic-v101.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://download.mikroe.com/documents/add-on-boards/click/canspi-33v/can-spi-click-33v-manual-v100.pdf">https://download.mikroe.com/documents/add-on-boards/click/canspi-33v/can-spi-click-33v-manual-v100.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://download.mikroe.com/documents/datasheets/MCP2515.pdf">https://download.mikroe.com/documents/datasheets/MCP2515.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://crycode.de/can-bus-am-raspberry-pi">https://crycode.de/can-bus-am-raspberry-pi&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.beyondlogic.org/adding-can-controller-area-network-to-the-raspberry-pi/">https://www.beyondlogic.org/adding-can-controller-area-network-to-the-raspberry-pi/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Quectel RM520M und Telit FM990A28 5G Modem mit Raspberry Pi OS nutzen</title><link>https://blog.zero-iee.com/posts/quectel-rm520n-and-telit-fn990a28-5g-modems-on-raspberrypi-os/</link><pubDate>Wed, 31 May 2023 12:44:58 +0200</pubDate><guid>https://blog.zero-iee.com/posts/quectel-rm520n-and-telit-fn990a28-5g-modems-on-raspberrypi-os/</guid><description>&lt;p>Auf unserer Odyssee auf der Suche nach einem 5G Mobilfunkmodem haben wir mittlerweile einige Modems verschiedener Hersteller ausprobiert. Leider war die Inbetriebnahme nicht immer erfolgreich. Mal fehlte der Treibersupport im Linux-Kernel gänzlich - mal war die Ansteuerung via NetworkManager / ModemManager fehlerbehaftet oder überhaupt nicht möglich.&lt;/p>
&lt;p>Uns ist eine einfache Inbetriebnahme und ein stabiler Betrieb wichtig. Da wir die Modems nicht nur auf einigen wenigen Geräten einsetzen wollen, kommt für uns eine manuelle Anpassung des Linux-Kernels in der Regel nicht infrage. Zu groß ist der damit verbundene Aufwand und zu unübersichtlich sind die Folgen, die sich daraus für den weiteren Lebenszyklus eines Produkts ergeben. Daher soll das Betriebssystem - oftmals ein Raspberry Pi OS - möglichst im Werkszustand und ohne große Anpassungen genutzt werden.&lt;/p>
&lt;p>&lt;strong>Mittlerweile haben sich für uns zwei Modems herauskristallisiert, die in Kombination mit dem aktuellen &lt;a href="https://www.raspberrypi.com/software/operating-systems/">Raspberry Pi OS&lt;/a> auf Debian 11 &amp;ldquo;Bullseye&amp;rdquo; Basis (Kernel 6.1) &amp;ldquo;out of the box&amp;rdquo; funktionieren:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://www.quectel.com/product/5g-rm520n-gl">Quectel RM520N&lt;/a>&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://www.telit.com/devices/fn990axx/">Telit FM990A28&lt;/a>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>beide 5G Modems unterstützen nicht nur das aktuell weit verbreitete &amp;ldquo;5G New Radio&amp;rdquo; mit LTE Control Plane (NSA), sondern auch 5G NR Standalone (SA), sodass bei einer entsprechenden Ausbaustufe des 5G Mobilfunknetzes auch von extrem niedrigeren Latenzen profitiert werden kann.&lt;/p>
&lt;h2 id="hardware-setup" >Hardware Setup
&lt;span>
&lt;a href="#hardware-setup">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Unser Hardware-Setup für die Evaluierung beider Module sieht wie folgt aus:&lt;/p>
&lt;ul>
&lt;li>Raspberry Pi CM4&lt;/li>
&lt;li>&lt;a href="https://www.waveshare.com/wiki/CM4-DUAL-ETH-4G/5G-BASE">Waveshare Dual Ethernet IoT Base Board&lt;/a> (mit M.2 Slot)&lt;/li>
&lt;li>Telit FM990A28 M.2 Modul &lt;em>oder&lt;/em>&lt;/li>
&lt;li>Quectel RM520N&lt;/li>
&lt;li>IoT SIM-Karte der Deutschen Telekom&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://blog.zero-iee.com/posts/quectel-rm520n-and-telit-fn990a28-5g-modems-on-raspberrypi-os/images/waveshare-board.jpg">&lt;figcaption>
&lt;h4>Waveshare Board mit Quectel 5G Modem&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;h2 id="inbetriebnahme" >Inbetriebnahme
&lt;span>
&lt;a href="#inbetriebnahme">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Die Inbetriebnahme unseres Telit-Moduls lief wie folgt ab: &lt;em>(ähnlich für Quectel!)&lt;/em>&lt;/p>
&lt;p>Überprüfen der Sichtbarkeit des Moduls im USB Subsystem:&lt;/p>
&lt;pre>&lt;code>$ lsusb
&lt;/code>&lt;/pre>
&lt;p>Hier sollte ein Telit Device sichtbar sein:&lt;/p>
&lt;pre>&lt;code>[...]
Bus 002 Device 003: ID 1bc7:1070 Telit Wireless Solutions FN990
[...]
&lt;/code>&lt;/pre>
&lt;p>Auch der ModemManager sollte das Modul erkennen:&lt;/p>
&lt;pre>&lt;code>tom@raspberry:~ $ mmcli -L
/org/freedesktop/ModemManager1/Modem/0 [Telit] FN990A28
&lt;/code>&lt;/pre>
&lt;p>Mittels&lt;/p>
&lt;pre>&lt;code>mmcli -m 0
&lt;/code>&lt;/pre>
&lt;p>Können einige Details zum Modem ausgegeben werden - unter anderem, ob eine Verbindung zum Mobilfunknetz besteht, oder eine SIM-Karte zugeordnet ist.&lt;/p>
&lt;p>Bei unserem ersten Versuch wurde im &amp;ldquo;Status&amp;rdquo; Abschnitt ein rotes &lt;code>sim-missing&lt;/code> angezeigt, obwohl eine SIM-Karte in den Slot des Waveshare Base IO Moduls eingelegt war. Auch Versuche mit anderen SIM-Karten nutzten nichts - im System wurde keine Karte erkannt.&lt;/p>
&lt;h3 id="sim-missing-problem-beheben" >&amp;ldquo;SIM Missing&amp;rdquo; Problem beheben
&lt;span>
&lt;a href="#sim-missing-problem-beheben">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;em>(dieses Problem betrifft nur das Telit Modem!)&lt;/em>&lt;/p>
&lt;p>Ein Blick in die &lt;a href="https://www.waveshare.com/w/upload/4/46/CM4-DUAL-ETH-4G_5G-BASE_SchDoc.pdf">Schematics des Waveshare Boards&lt;/a> offenbarte, dass die Signalleitung (&amp;ldquo;CD&amp;rdquo; - &amp;ldquo;Card detect&amp;rdquo;) für die physische Erkennung einer SIM-Karte im Slot nicht zum M.2 Slot weitergeführt wird, sodass das Mobilfunkmodul kein entsprechendes Signal erkennen &lt;em>kann&lt;/em>. Kein Wunder also, dass uns permanent ein &amp;ldquo;&lt;strong>sim-missing&lt;/strong>&amp;rdquo; angezeigt wurde.&lt;/p>
&lt;figure>&lt;img src="https://blog.zero-iee.com/posts/quectel-rm520n-and-telit-fn990a28-5g-modems-on-raspberrypi-os/images/waveshare-schematics.png">&lt;figcaption>
&lt;h4>Screenshot des Waveshare Dual Ethernet IoT Base Boards&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>Das Problem lässt sich beheben, indem das Modem so konfiguriert wird, dass es eine immer eingelegte SIM-Karte annimmt und keine HotSwap-Abfragen mehr durchführt. Die Konfiguration geschieht über AT-Kommandos innerhalb einer Terminalsession mit dem Modem selbst:&lt;/p>
&lt;pre>&lt;code>sudo apt install minicom
sudo minicom -D /dev/ttyUSB2
&lt;/code>&lt;/pre>
&lt;p>AT-Kommandos absetzen - sollten mit &amp;ldquo;OK&amp;rdquo; quittiert werden.&lt;/p>
&lt;pre>&lt;code>AT#HSEN=0,0
AT#HSEN=0,1
&lt;/code>&lt;/pre>
&lt;p>&lt;em>(genauer genommen wird hier HotSwap für beide potentiellen SIM-Steckplätze, die das Modem unterstützt, deaktiviert.)&lt;/em>&lt;/p>
&lt;p>Die Minicom Session kann mit CTRL-A gefolgt von &amp;ldquo;X&amp;rdquo; beendet werden.&lt;/p>
&lt;p>Damit die Änderung angewendet wird, wurde das Raspi samt Modem neu gestartet / die Stromversorgung unterbrochen.&lt;/p>
&lt;p>Nach einem Neustart wurde die SIM-Karte im ModemManager schließlich erkannt - am Ende der Ausgabe von &lt;code>mmcli -m 0&lt;/code> wurde eine &amp;ldquo;SIM&amp;rdquo; Zeile mit dem D-Bus Pfad zum SIM-Device eingeblendet:&lt;/p>
&lt;pre>&lt;code>SIM | dbus path: /org/freedesktop/ModemManager1/SIM/0
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Die soeben erwähnte Anpassung am Telit Modem ist am Quectel-Modem nicht notwendig!&lt;/strong>&lt;/p>
&lt;p>Im nächsten Schritt wird das jeweiligen Modem aktiviert:&lt;/p>
&lt;pre>&lt;code>mmcli -m 0 --enable
&lt;/code>&lt;/pre>
&lt;h3 id="eine-verbindung-mittels-networkmanager-einrichten" >Eine Verbindung mittels NetworkManager einrichten
&lt;span>
&lt;a href="#eine-verbindung-mittels-networkmanager-einrichten">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Mittels NetworkManager wird nun eine neue Mobilfunkverbindung eingerichtet. Dazu legen wir im NetworkManager eine neue &amp;ldquo;Connection&amp;rdquo; an. Im Hintergrund kommuniziert dieser mit dem ModemManager, um APN-Details an ihn weiterzugeben.&lt;/p>
&lt;p>Für unsere Telekom-Karte sind folgende APN-Informationen zu nutzen:&lt;/p>
&lt;ul>
&lt;li>APN: internet.telekom&lt;/li>
&lt;li>IP-Type: ipv4&lt;/li>
&lt;li>Username: telekom&lt;/li>
&lt;li>Password: tm&lt;/li>
&lt;/ul>
&lt;p>Die APN-Informationen eines jeden Providers lassen sich schnell im Internet nachschlagen.&lt;/p>
&lt;p>Mit dem neueren IPv6-fähigen APN der Telekom &lt;code>internet.v6.telekom&lt;/code> (und &amp;ldquo;ipv4v6&amp;rdquo;) hatten wir leider kein Glück - wir konnten keine Vebindung herstellen. Probleme im IPv6-Stack der Modemtreiber sind uns bereits bekannt. Evtl. kommen sie auch hier zum tragen. Daher begnügen wir uns vorerst mit reinem IPv4 Support.&lt;/p>
&lt;p>Bevor die Verbindung angelegt werden kann, muss sichergestellt sein, dass der NetworkManager läuft:&lt;/p>
&lt;pre>&lt;code>systemctl enable --now NetworkManager
&lt;/code>&lt;/pre>
&lt;p>Auf einem Stock Raspberry Pi OS Image ist dies nicht der Fall. Ein Reboot nach dem systemctl Kommando kann nicht schaden. In unserem Fall funktionierte das Zusammenspiel zwischen den beiden Managern erst nach einem Reboot.&lt;/p>
&lt;p>Schließlich wird mit diesem Kommando eine neue GSM Verbindung im NetworkManager angelegt:&lt;/p>
&lt;pre>&lt;code>mmcli c add type gsm ifname cdc-wdm0 con-name telekom apn internet.telekom connection.autoconnect yes
&lt;/code>&lt;/pre>
&lt;p>Im Falle der Telekom ist der APN &amp;ldquo;internet.telekom&amp;rdquo; inkl. der übrigen Parameter bereits im SIM-Profil hinterlegt, sodass nur noch der Name des passenden APN-Profils angegeben werden muss. Auf Benutzername und Passwort kann idR verzichtet werden.&lt;/p>
&lt;p>Sollte das nicht funktionieren, können alternativ auch weitere Parameter mitgegeben werden, wie z.B.&lt;/p>
&lt;pre>&lt;code>mmcli c add type gsm ifname cdc-wdm0 con-name telekom apn internet.telekom gsm.username telekom gsm.password tm gsm.pin 1234 connection.autoconnect yes
&lt;/code>&lt;/pre>
&lt;p>Insbes. die Angabe einer &lt;code>gsm.pin&lt;/code> ist wichtig, falls die SIM-Karte mit einer PIN geschützt ist. Unsere SIM ist nicht mit einer PIN geschützt, daher entfällt die Angabe.&lt;/p>
&lt;p>Ein &lt;code>nmcli c&lt;/code> sollte nun zeigen, dass eine neue Verbindung &amp;ldquo;telekom&amp;rdquo; angelegt wurde. Ist die Verbindung grün markiert, hat die Anmeldung im Netzwerk funktioniert:&lt;/p>
&lt;figure>&lt;img src="https://blog.zero-iee.com/posts/quectel-rm520n-and-telit-fn990a28-5g-modems-on-raspberrypi-os/images/networkmanager-ok.png">&lt;figcaption>
&lt;h4>nmcli c&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>Auch der ModemManager sollte nach einer kurzen Weile ähnlich wie hier aussehen und ein &amp;ldquo;connected&amp;rdquo; im Status zeigen: &lt;em>(&lt;code>mmcli -m 0&lt;/code>)&lt;/em>&lt;/p>
&lt;figure>&lt;img src="https://blog.zero-iee.com/posts/quectel-rm520n-and-telit-fn990a28-5g-modems-on-raspberrypi-os/images/modemmanager-ok.png">&lt;figcaption>
&lt;h4>mmcli -m 0&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;h3 id="funktion-prüfen" >Funktion prüfen
&lt;span>
&lt;a href="#funktion-pr%c3%bcfen">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Ob die Mobilfunkverbindung tatsächlich funktioniert, lässt sich schnell und einfach über einen Ping auf dem Mobilfunk-Device prüfen:&lt;/p>
&lt;pre>&lt;code>ping -I wwan0 1.1.1.1
&lt;/code>&lt;/pre>
&lt;p>Die Latenz bewegt sich bei einem 5G NSA Netz üblicherweise bei &amp;gt;= 25 ms, kann aber stark schwanken. Wir haben Latenzen von bis zu 600 ms beobachtet - abhängig von Empfang und Auslastung des Netzwerks.&lt;/p>
&lt;p>Bei einem Neustart des Raspberry Pis wird die Mobilfunkverbindung automatisch neu aufgenommen.&lt;/p>
&lt;p>Übrigens: Ein &lt;code>ip route&lt;/code> offenbart, dass NetworkManager eine Defaultroute für das 5G Modem angelegt hat. Da diese aber mit einer Metrik von 700 versehen ist, wird auf das Mobilfunkmodem nur zurückgegegriffen, falls ein Ziel über eine möglicherwiese vorhandene Ethernetverbindung nicht erreichbar ist. Ein &lt;code>apt update&lt;/code> und alles andere sollte also normalerweise über eine verfügbare Ethernetverbindung laufen. Ist diese nicht verfügbar, dient die Mobilfunkverbindung als Fallback (daher der &lt;code>-I wwan0&lt;/code> Parameter im &lt;code>ping&lt;/code> Kommando - hiermit wird eine Verbindung via Mobilfunk erzwungen).&lt;/p></description></item><item><title>Waveshare 4 Inch Display funktioniert nicht mit Waveshare CM4 Base IO Module B</title><link>https://blog.zero-iee.com/posts/waveshare-4-inch-display-with-cm4-base-io-b/</link><pubDate>Wed, 26 Apr 2023 14:33:50 +0200</pubDate><guid>https://blog.zero-iee.com/posts/waveshare-4-inch-display-with-cm4-base-io-b/</guid><description>&lt;p>Weil wir es auf die schmerzhafte Weise herausfinden mussten: Das &lt;a href="https://www.waveshare.com/wiki/CM4-IO-BASE-B">Waveshare IO BASE Module B&lt;/a> für das Raspberry Pi CM4 Modul funktioniert &lt;em>nicht&lt;/em> mit dem &lt;a href="https://www.waveshare.com/wiki/4inch_DSI_LCD">4&amp;quot; DSI Touch Display&lt;/a> von Waveshare - zumindest nicht, solange man eine BASE IO Board Revision &amp;lt; 4 verwendet.&lt;/p>
&lt;p>Erst ab Board Version 4 wird die höherperformante DSI1 Schnittstelle statt der DSI0 Schnittstelle des Raspberry CM4 vom IO Base Board genutzt.&lt;/p>
&lt;p>Die Information stammt vom Waveshare-Support, den wir wegen unserer Probleme mit den Display kontaktiert haben. Die Änderung des DSI-Ports mit Version 4 des IO Base Boards ist zwar &lt;a href="https://www.waveshare.com/wiki/CM4-IO-BASE-B#Version_Introduction">dokumentiert&lt;/a>, doch leider befindet sich zum aktuellen Zeitpunkt nirgendwo ein Hinweis auf die fehlende Kompatibilität zum Display - daher sei es hier dokumentiert &amp;hellip; ;-)&lt;/p></description></item><item><title>Waveshare CM4 Dual Gigabit Ethernet 5G/4G Base Board mit Radxa Rock 3 CM3 Compute Module in Betrieb nehmen</title><link>https://blog.zero-iee.com/posts/waveshare-cm4-dual-ethernet-io-board-with-radxa-rock3-cm3/</link><pubDate>Wed, 22 Mar 2023 09:56:25 +0100</pubDate><guid>https://blog.zero-iee.com/posts/waveshare-cm4-dual-ethernet-io-board-with-radxa-rock3-cm3/</guid><description>&lt;p>Da da Raspberry Pi CM4 (&amp;ldquo;Compute Module&amp;rdquo;) seit längerer Zeit wegen der anhaltenden Lieferkettenprobleme schwer und nur in geringen Stückzahlen zu beschaffen ist, haben wir von der ZERO GmbH uns nach einer Alternative umgesehen.&lt;/p>
&lt;p>Obwohl der Name es nicht direkt vermuten lässt, bietet Radxa mit dem &amp;ldquo;&lt;a href="https://wiki.radxa.com/Rock3/CM/CM3">Rock3 CM3&lt;/a>&amp;rdquo; eine weitestgehend Pin-kompatible Alternative zum Raspberry Pi CM4 an. &lt;em>&amp;ldquo;Weitestgehend&amp;rdquo;&lt;/em>, da Radxa über einen zusätzlichen, dritten Sockel weitere Pins für Radxa-spezifische Features anbietet. Weitere Interschiede sind auf &lt;a href="https://wiki.radxa.com/Rock3/CM3/vsCM4">dieser Seite in der Tabelle&lt;/a> zu finden. Dennoch lässt sich das Radxa CM3 Modul hardwareseitig problemlos in ein bestehendes Raspberry Pi CM4 IO-Board einbauen - in unserem Fall ein &lt;a href="https://www.waveshare.com/CM4-DUAL-ETH-4G-5G-BASE.htm">Waveshare Dual Gigabit Ethernet 5G/4G Base Board&lt;/a>.&lt;/p>
&lt;p>Auch wenn die Schnittstelle zwischen CM und Base IO Board nahezu identisch ist - der SoC auf dem Compute Module ist es keinesfalls. Während das CM4 der Raspberry Foundation auf einen Broadcom SoC (BCM2711) setzt, kommt auf dem Radxa Rock3 CM3 ein Rockchip-SoC (RK3566) zum Einsatz. Die Software kann also nicht 1:1 übertragen werden. Ein Raspbian oder Raspberry Pi OS auf dem Rockchip auszuführen, ist also nicht möglich.&lt;/p>
&lt;p>Stattdessen bietet Radxa ein paar für den Rockchip geeignete Betriebssysteme zum Download an. Darunter auch eine Debian 11 (&amp;ldquo;Bullyeye&amp;rdquo;) Version, deren Kernel auf den Rockchip-SoC angepasst ist. Leider kommt die Linux-Distribution mit dem Uraltkernel 4.19 - das soll hier aber erst einmal nicht weiter stören.&lt;/p>
&lt;p>Die &lt;a href="https://wiki.radxa.com/Rock3/downloads">Downloadseite&lt;/a> verweist auf GitHub Releaseseiten. Von dort aus kann die passende Debian-Version heruntergeladen werden. Da wir allerdings nicht das Radxa-eigene IO Board nutzen, sondern das Waveshare IO Board, welches für ein original CM4 konzipiert wurde, ist beim Download Vorsicht geboten: Hier muss die Version für ein &amp;ldquo;RASPCM4IO&amp;rdquo; board heruntergeladen werden. Das Image &lt;code>radxa-cm3-io-debian-bullseye-xfce4-arm64-&amp;lt;VERSION&amp;gt;-gpt.img.xz&lt;/code> ist also das passende (GitHub: &lt;a href="https://github.com/radxa-build/radxa-cm3-io/releases/tag/20221101-0118">Download&lt;/a>).&lt;/p>
&lt;p>Nun aber zu den konkreten Schritten für das Aufspielen des Debian-Images auf den eMMC Flash des Rock3 CM3 - unter Ubuntu Linux als Host. &amp;hellip;&lt;/p>
&lt;h2 id="rkdeveloptool-herunterladen-und-installieren" >rkdeveloptool herunterladen und installieren
&lt;span>
&lt;a href="#rkdeveloptool-herunterladen-und-installieren">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Da wir auf eine SD-Karte verzichten und das OS-Image direkt in den onboard-eMMC Speicher des CM3 schreiben wollen, benötigen wir zunächst das passende Entwicklerwerkzeug von Rockchip, mit dem sich derartige Schreibbvorgänge umsetzen lassen.&lt;/p>
&lt;p>Das passende Tool heißt &lt;code>rkdeveloptool&lt;/code> und kann von GitHub heruntergeladen werden:&lt;/p>
&lt;pre>&lt;code>git clone https://github.com/rockchip-linux/rkdeveloptool.git
&lt;/code>&lt;/pre>
&lt;p>Für den Kompiliervorgang müssen einige Pakete auf dem Host installiert sein:&lt;/p>
&lt;pre>&lt;code>sudo apt-get install build-essential libudev-dev libusb-1.0-0-dev dh-autoreconf
&lt;/code>&lt;/pre>
&lt;p>Danach wird es aus dem Sourcecode kompiliert und installiert:&lt;/p>
&lt;pre>&lt;code>cd rkdeveloptool
autoreconf -i
./configure
make
sudo make install
&lt;/code>&lt;/pre>
&lt;h2 id="os-image-in-emmc-schreiben" >OS-Image in eMMC schreiben
&lt;span>
&lt;a href="#os-image-in-emmc-schreiben">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Nun wird auf dem Waveshare IO Board der &amp;ldquo;Boot&amp;rdquo; Schalter auf &amp;ldquo;on&amp;rdquo; gestellt und das Board mit einem USB-C-Kabel zum Hostrechner verbunden. Ein &lt;code>lsusb&lt;/code> auf der Kommandozeile sollte offenbaren, dass ein Gerät von &amp;ldquo;Fuzhou Rockchip Electronics Company&amp;rdquo; erkannt wurde:&lt;/p>
&lt;pre>&lt;code>Bus 003 Device 005: ID 2207:350a Fuzhou Rockchip Electronics Company
&lt;/code>&lt;/pre>
&lt;p>Nun laden wir uns den Rockchip Loader herunter; eine Softwarekomponente, die in den RAM des SoC geladen wird, sodass wir von dort aus das Debian-Image in den eMMC Flash schreiben können:&lt;/p>
&lt;pre>&lt;code>wget https://dl.radxa.com/rock3/images/loader/rock-3a/rk356x_spl_loader_ddr1056_v1.10.111.bin
&lt;/code>&lt;/pre>
&lt;p>Der Loader wird nun über das rkdeveloptool in den RAM des SoC übertragen:&lt;/p>
&lt;pre>&lt;code>sudo rkdeveloptool db rk356x_spl_loader_ddr1056_v1.10.111.bin
&lt;/code>&lt;/pre>
&lt;p>Nun kann das Debian OS Image von GitHub heruntergeladen und entpackt werden:&lt;/p>
&lt;pre>&lt;code>wget https://github.com/radxa-build/radxa-cm3-io/releases/download/20221101-0118/radxa-cm3-io-debian-bullseye-xfce4-arm64-20221101-0302-gpt.img.xz
xz -d radxa-cm3-io-debian-bullseye-xfce4-arm64-20221101-0302-gpt.img.xz
&lt;/code>&lt;/pre>
&lt;p>Abschließend wird das Debian-Image über den Loader in den eMMC Flash geschrieben:&lt;/p>
&lt;pre>&lt;code>sudo rkdeveloptool wl 0 radxa-cm3-io-debian-bullseye-xfce4-arm64-20221101-0302-gpt.img
&lt;/code>&lt;/pre>
&lt;p>&amp;hellip; und der SoC neu gestartet:&lt;/p>
&lt;pre>&lt;code>sudo rkdeveloptool rd
&lt;/code>&lt;/pre>
&lt;p>Nach dem Neustart sollte auf einem angesteckten HDMI Bildschirm der Bootprozess sichtbar sein. Der &amp;ldquo;Boot&amp;rdquo; Schalter auf dem IO Board kann nun wieder auf &amp;ldquo;off&amp;rdquo; gestellt werden.&lt;/p>
&lt;p>Verbindet man das IO Board via Ethernet mit dem lokalen Netzwerk, ist das Radxa Modul über den Hostnamen &lt;code>radxa-cm3-io&lt;/code> erreichbar:&lt;/p>
&lt;pre>&lt;code>ssh rock@radxa-cm3-io
&lt;/code>&lt;/pre>
&lt;p>Standard-Logindaten sind&lt;/p>
&lt;ul>
&lt;li>Username: &lt;code>rock&lt;/code>&lt;/li>
&lt;li>Password: &lt;code>rock&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="apt-aktualisieren" >APT aktualisieren
&lt;span>
&lt;a href="#apt-aktualisieren">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Direkt nach der Installation konnten wir in unserem konkreten Fall keine Paketupdates für Debian einspielen, da Uhrzeit und Datum noch nicht korrekt eingestellt waren. Das ließ sich mittels&lt;/p>
&lt;pre>&lt;code>sudo systemctl restart ntp.service
&lt;/code>&lt;/pre>
&lt;p>schnell beheben.&lt;/p>
&lt;p>Zudem wurde mindestens ein APT Repository nicht also gültig erkannt, weil ein PGP-Schlüssel nicht aktuell war:&lt;/p>
&lt;pre>&lt;code>$ sudo apt update &amp;amp;&amp;amp; apt upgrade -y
W: GPG error: http://apt.radxa.com/bullseye-stable bullseye InRelease: The following signatures couldn't be verified because the public key is not available: NO_PUBKEY 9B98116C9AA302C7
&lt;/code>&lt;/pre>
&lt;p>Auch dieses Problem ließ sich mit einem einzigen Kommando schnell beseitigen:&lt;/p>
&lt;pre>&lt;code>wget -O - apt.radxa.com/$(lsb_release -c -s)-stable/public.key | sudo apt-key add -
&lt;/code>&lt;/pre>
&lt;p>Danach funktionierte auch ein &lt;code>sudo apt update&lt;/code> wieder einwandfrei.&lt;/p></description></item><item><title>Schlechte Qt Grafikperformance mit Raspi4</title><link>https://blog.zero-iee.com/posts/schlechte-qt-grafik-performance-mit-raspi4/</link><pubDate>Tue, 07 Feb 2023 08:19:47 +0100</pubDate><guid>https://blog.zero-iee.com/posts/schlechte-qt-grafik-performance-mit-raspi4/</guid><description>&lt;p>Während der Entwicklung einer Qt-basierten Anwendung auf einem Raspberry Pi 4 (CM) sind wir von der ZERO GmbH vor ein paar Tagen auf ein kurioses Problem gestoßen: Die Anwendung beinhaltet zwei Anwendungsfenster - ein QT Quick Fenster und ein weiteres Fenster, das mittels WebEngine (Chromium) eine Webanwendung darstellt. Die Inhalte in beiden Fenstern wurden während des Debuggings und beim manuellen Starten der Binärdatei aus der Kommandozeile heraus flüssig dargestellt. Bei Animationen und Mausbewegungen konnten wir keine bemerkenswerten Ruckler feststellen.&lt;/p>
&lt;p>Doch nach einem Start während des Boot-Prozesses durch ein Systemd Service-File sah die Sache schon ganz anders aus: Die Darstellung ruckelte stark und die CPU-Auslastung lag bereits bei einfachen Texteinblendungen bei ca 80 %.&lt;/p>
&lt;p>Wir konnten einen Zusammenhang zwischen dem Startzeitpunkt der Anwendung und der Performance feststellen. In frühen Bootphasen war die Performance schlecht - bei späterer Ausführung lief die Anwendung flüssig. Durch ein &amp;ldquo;sleep&amp;rdquo; Kommando in unserem Systemd Service File konnten wir den Zusammenhang verdeutlichen:&lt;/p>
&lt;pre tabindex="0">&lt;code>[Unit]
Description=App
[Service]
User=pi
Group=pi
Type=simple
ExecStart=/bin/bash -c &amp;#39;sleep 10; /opt/myapp/myapp -platform=eglfs&amp;#39;
[Install]
WantedBy=multi-user.target
&lt;/code>&lt;/pre>&lt;p>Alleine schon eine Verzögerung der Ausführung um 10 Sekunden führte zum gewünschten Ergebnis. Dies war jedoch keine Zufriedenstellende Lösung - schließlich wollten wir die Qt-Anwendung so schnell wie möglich starten und nicht unnötig Zeit verlieren, ohne den Grund für das Verhalten zu kennen.&lt;/p>
&lt;p>Ein Blick in das Systemlog offenbarte schließlich, dass unsere Anwendung den LLVMpipe Rasterizer nutze, wenn sie über ein Service-File gestartet wurde:&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;#34;Feb 03 04:33:29 raspberrypi bash[470]: Running on a software rasterizer (LLVMpipe), expect limited performance.&amp;#34;
&lt;/code>&lt;/pre>&lt;p>Letztendlich konnten wir das Performanceproblem nach einigen Websuchen durch ein Hinzufügen unseres &lt;code>pi&lt;/code> Benutzers zur Benutzergruppe &lt;code>render&lt;/code> (und einen Anschließenden Neustart) beheben:&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo usermod -aG render pi
&lt;/code>&lt;/pre>&lt;p>Nach &lt;a href="https://www.hardwareluxx.de/community/threads/raspberry-pi-os-und-ein-paar-fehler-beim-%C3%B6ffnen-eines-programmes.1272595/post-27563953">Aussage des Forennutzers &lt;em>&amp;ldquo;cRaZy-biScuiT&amp;rdquo;&lt;/em>&lt;/a> wird damit ein Bug behoben, der dafür sorgt, dass Anwendungen unter dem &lt;code>pi&lt;/code> User keine hardwarebeschleunigten Anwendungen ausführen können.&lt;/p>
&lt;p>Unsere Qt-Anwendung startete nun auch schon in früheren Bootphasen inkl. Hardwareunterstützung und die Performance war wie erwartet.&lt;/p>
&lt;p>Bisher können wir allerdings nicht erklären, wieso das Problem zu späteren Startzeitpunkten nicht auftrat. Wir vermuten eine externe Beeinflussung evtl. durch später startende, dritte Anwendungen, die dafür sorgte, dass die Hardwarebeschleunigung zu diesen Zeitpunkten dennoch zur Verfügung stand.&lt;/p></description></item></channel></rss>