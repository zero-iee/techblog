<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>iptables on ZERO GmbH Tech Blog</title><link>https://blog.zero-iee.com/tags/iptables/</link><description>ZERO GmbH Tech Blog (iptables)</description><generator>Hugo -- gohugo.io</generator><language>de</language><lastBuildDate>Mon, 04 Dec 2023 08:41:52 +0100</lastBuildDate><atom:link href="https://blog.zero-iee.com/tags/iptables/index.xml" rel="self" type="application/rss+xml"/><item><title>Die Wireguard VPN Firewall mit Shorewall übersichtlich halten</title><link>https://blog.zero-iee.com/posts/vpn-firewall-shorewall/</link><pubDate>Mon, 04 Dec 2023 08:41:52 +0100</pubDate><guid>https://blog.zero-iee.com/posts/vpn-firewall-shorewall/</guid><description>&lt;p>In unserem &lt;a href="https://blog.zero-iee.com/posts/multi-tenant-wireguard-vpn-server/">vorherigen Artikel&lt;/a> haben wir die iptables-Firewall für unseren Wireguard VPN-Server vorgestellt. Die Firewall regelt, welcher Traffic zwischen den einzelnen Kunden-VPNs und dem Management-VPN erlaubt ist und verhindert Zugriffe, die ein Sicherheitsrisiko darstellen.&lt;/p>
&lt;p>Die Verwaltung dieser Regeln mittels der iptables Command Line Tools ist zwar möglich, allerdings relativ schnell unübersichtlich und insbesondere für Außenstehende schwer zu erfassen. Wir haben deshalb die Firewallkonfiguration über das Tool &amp;ldquo;&lt;a href="https://shorewall.org/">Shorewall&lt;/a>&amp;rdquo; erprobt und für geeignet befunden.&lt;/p>
&lt;p>Shorewall ist ein Tool, das einfache Textdateien mit Firewallregeln nach einem vordefinierten Format einliest, validiert und in iptables-Regeln umsetzt. Es ist also nur ein Frontend, das iptables bedient und keine eigenständige Firewall im engeren Sinne.&lt;/p>
&lt;p>Durch die statische Konfiguration in einzelnen semantisch getrennten Textdateien fällt es leichter, den Überblick zu behalten. Iptables-Regeln können zwar via netfilter-persistent (bzw. iptables-persistent) ebenfalls in Textdateien persistiert werden, doch die Syntax ist beim Überfliegen nur schwer verständlich. Für kleinere Setups mag das ausreichen - doch wir planen einige VPN-Netze u.A. mit individuellen Berechtigungen aufzuspannen. Mit Shorewall als iptables-Konfigurator können wir die Übersicht über die Firewallregeln besser behalten und Fehler vermeiden.&lt;/p>
&lt;p>Die Firewallkonfiguration verteilt sich bei Shorewall über einige Dateien im Konfigurationsverzeichnis &lt;code>/etc/shorewall&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>/etc/shorewall/zones&lt;/code>: Definiert die Firewall-Zonen, die später in den Regelsätzen verwendet werden können.&lt;/li>
&lt;li>&lt;code>/etc/shorewall/interfaces&lt;/code>: Regelt, welche Netzwerk-Interfaces mit Shorewall benutzt werden sollen und welchen Zone sie angehören.&lt;/li>
&lt;li>&lt;code>/etc/shorewall/policy&lt;/code>: Definiert die Default-Policies zwischen Zonen. Darf Traffic zwischen Zonen passieren oder nicht?&lt;/li>
&lt;li>&lt;code>/etc/shorewall/rules&lt;/code>: Hier werden die feingranularen Regeln definiert: Wurde vorher beispielsweise eine &lt;code>REJECT&lt;/code> Policy zwischen Zonen definiert, können hier port-/protokoll-basierte Ausnahmen definiert werden.&lt;/li>
&lt;/ul>
&lt;p>Im Folgenden werfen wir einen Blick in unsere Konfiguration:&lt;/p>
&lt;p>&lt;code>zones&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>fw firewall
wan ipv4
customer1-vpn ipv4
customer1-vpn ipv4
mastervpn ipv4
&lt;/code>&lt;/pre>&lt;p>Wir legen Zone &lt;code>fw&lt;/code> (Alias: &lt;code>$FW&lt;/code>) als Firewall-eigene Zone fest und definieren weitere Zonen für unsere WAN Schnittstelle und unsere VPN-Netze.&lt;/p>
&lt;p>&lt;code>interfaces&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>wan eth0 detect dhcp,routefilter,tcpflags
customer1-vpn customer1-vpn detect routeback
customer2-vpn customer2-vpn detect routeback
mastervpn mastervpn detect routeback
&lt;/code>&lt;/pre>&lt;p>Hier werden Netzwerkinterface und Zone miteinander verknüpft - die Zone in der ersten Spalte, das zugeordnete Netzwerkinterface in der zweiten Spalte. Besonders wichtig ist bei den VPN-Zonen die &lt;code>routeback&lt;/code> Option, die dafür sorgt, dass Traffic, der an einem VPN-Interface eingeht, selbiges auch direkt wieder verlassen kann; so wie es bei einem VPN-Interface die Regel ist, wenn Clients miteinander kommunizieren. Später wird diese Client-to-Client Kommunikation zwar wieder deaktiviert, aber wir wollen uns die Möglichkeit vorhalten, sie für einzelne VPN-Clients zu ermöglichen.&lt;/p>
&lt;p>&lt;code>policy&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code># Source # Dest # Policy
wan all REJECT
$FW all ACCEPT
mastervpn all ACCEPT
customer1-vpn all REJECT
customer2-vpn all REJECT
&lt;/code>&lt;/pre>&lt;p>Eingehender Traffic auf WAN soll grundsätzlich erst einmal blockiert werden. Einzelne Ausnahmen - beispielsweise für die VPN-Server-Ports - werden später in der &lt;code>rules&lt;/code> Datei gemacht.&lt;/p>
&lt;p>Die Firewall selbst bekommt keine Einschränkungen und darf andere Zonen bzw. Interfaces beliebig ansprechen.&lt;/p>
&lt;p>Unser &lt;code>mastervpn&lt;/code> darf ebenfalls uneingeschränkt kommunizieren. Dabei handelt es sich um das Admin-Interface, von dem aus unsere Entwickler Verbindungen zu verschiedenen VPN-Clients herstellen.&lt;/p>
&lt;p>Restriktiver gehen wir bei den beiden Kunden-VPNs &lt;code>customer1-vpn&lt;/code> und &lt;code>customer2-vpn&lt;/code> vor: Diese werden mittels &lt;code>REJECT&lt;/code> eingesperrt und dürfen per default erst einmal mit niemandem kommunizieren.&lt;/p>
&lt;p>&lt;code>rules&lt;/code>: Nun folgen die Ausnahmen für die gerade erklärten Policies:&lt;/p>
&lt;pre tabindex="0">&lt;code># Policy # Source # Dest # Prot # Port
# Allow access to VPN ports
ACCEPT wan $FW UDP 51821,51822,51823
# Allow SSH from internet
SSH(ACCEPT) wan $FW
# Allow pings from all VPNs to their Server VPN interface
Ping(ACCEPT) customer1-vpn $FW:10.2.1.1
Ping(ACCEPT) customer2-vpn $FW:10.3.0.1
Ping(ACCEPT) mastervpn $FW:10.4.0.1
# Explicitly allow inter-client connections on some VPN devices (legacy &amp;#34;admin&amp;#34; devices)
ACCEPT customer1-vpn:10.2.1.10 customer1-vpn # device 1
ACCEPT customer1-vpn:10.2.1.11 customer1-vpn # device 2
ACCEPT customer1-vpn:10.2.1.12 customer1-vpn # device 3
# Prevent inter-client connections on VPNs for all devices that have not explicitly been allowed in the section before
REJECT customer1-vpn customer1-vpn:10.2.1.0/24
REJECT customer2-vpn customer2-vpn:10.3.0.0/16
&lt;/code>&lt;/pre>&lt;p>Zuerst wird der Zugriff auf die WAN Ports &lt;code>51821,51822,51823&lt;/code> erlaubt, sodass sich Wireguard-VPN Clients zum VPN Server verbinden können. Außerdem verbinden wir uns über SSH zum VPN-Server - auch das soll weiterhin erlaubt bleiben. In diesem Fall nutzen wir das &lt;code>SSH(ACCEPT)&lt;/code> Makro von Shorewall, um Port und Protokoll nicht gesondert definieren zu müssen.&lt;/p>
&lt;p>Pings von VPN-Clients zu deren jeweiligen serverseitigen Interface und seiner IP-Adressen sollen in allen Fällen erlaubt sein. Wir pingen in der Regel das Serverinterface an, um die Funktionsfähigkeit einer VPN-Verbindung festzustellen.&lt;/p>
&lt;p>Im nächsten Abschnitt wird Client-to-Client Kommunikation für einzelne VPN-Clients des Netzes &lt;code>customer1-vpn&lt;/code> explizit ermöglicht.&lt;/p>
&lt;p>&amp;hellip; für alle anderen Geräte wird diese Art der Kommunikation im darauf folgenden Abschnitt mittels &lt;code>REJECT&lt;/code> verhindert. Sie können folglich nur Antwortpakete zurückschicken (implizite Regel in Shorewall) und nicht von sich aus Verbindungen initiieren.&lt;/p>
&lt;p>IP-Forwarding ist auf unserem Server bereits aktiviert. Wer die Einstellung &lt;code>net.ipv4.ip_forward&lt;/code> in /etc/sysctl.conf noch nicht aktiviert hat, kann stattdessen auch in &lt;code>/etc/shorewall/shorewall.conf&lt;/code> &lt;code>IP_FORWARDING&lt;/code> auf &lt;code>On&lt;/code> setzen.&lt;/p>
&lt;p>Zum Schluss haben wir &lt;code>netfilter-persistent&lt;/code> aus dem Boot genommen:&lt;/p>
&lt;pre>&lt;code>systemctl disable netfilter-persistent
&lt;/code>&lt;/pre>
&lt;p>&amp;hellip; und die iptables-Regeln geleert:&lt;/p>
&lt;pre>&lt;code>iptables -F
&lt;/code>&lt;/pre>
&lt;p>&amp;hellip; um dann die neuen Shorewall-Regeln testen zu können:&lt;/p>
&lt;pre>&lt;code>shorewall start
&lt;/code>&lt;/pre>
&lt;p>Nachdem alles wie erhofft funktioniert hat, wurde Shorewall in den Autostart aufgenommen:&lt;/p>
&lt;pre>&lt;code>systemctl enable shorewall
&lt;/code>&lt;/pre></description></item><item><title>Mobilfunk-Internettraffic außerhalb eines VPNs einschränken</title><link>https://blog.zero-iee.com/posts/traffic-au%C3%9Ferhalb-vpn-verbieten/</link><pubDate>Fri, 12 May 2023 15:17:29 +0200</pubDate><guid>https://blog.zero-iee.com/posts/traffic-au%C3%9Ferhalb-vpn-verbieten/</guid><description>&lt;p>In diesem Beitrag wird erklärt, wie wir die &lt;code>iptables&lt;/code> Firewall eines IoT Gerätes konfiguriert haben, sodass eine Wartung über ein Wireguard VPN-Netz möglich ist, während andere Internetzugriffe aus oder in das Mobilfunknetz verhindert werden.&lt;/p>
&lt;h2 id="gegebenheiten" >Gegebenheiten
&lt;span>
&lt;a href="#gegebenheiten">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;ul>
&lt;li>(Optional) Ethernetverbindung ins Internet via Lokales LAN (&lt;code>eth0&lt;/code>)&lt;/li>
&lt;li>(Optional) LTE-Verbindung ins Internet via USB LTE Modem (&lt;code>usb0&lt;/code>, IP-Adresse &lt;code>192.168.8.1&lt;/code> bzw. &lt;code>fe80::c0b0:4fff:fefe:fefe&lt;/code>)&lt;/li>
&lt;li>Wireguard VPN-Server (&lt;code>vpn.mydomain.tld&lt;/code>)&lt;/li>
&lt;/ul>
&lt;h2 id="ziel" >Ziel
&lt;span>
&lt;a href="#ziel">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Die LTE-Verbindung soll ausschließlich für Verbindungen zum Wireguard-VPN-Server genutzt werden können. Nicht als allgemeine Internetverbindung, da der Traffic der SIM-Karte möglichst gering gehalten werden muss (Beschränkung des Datenvolumens!).&lt;/p>
&lt;p>Für die Übertragung größerer Datenmengen aus dem Internet (OS-Updates, &amp;hellip; ) soll eine optionale Ethernetverbindung genutzt werden.&lt;/p>
&lt;p>Daher: Beschränkung der ausgehenden Verbindungen über &lt;code>usb0&lt;/code> Interface auf Verbindungen zum VPN-Server. Weitere Ausnahmen:&lt;/p>
&lt;ul>
&lt;li>DNS-Anfragen (um Wireguard-Host aufzulösen)&lt;/li>
&lt;li>Ping Requests ins Internet (zum Debugging)&lt;/li>
&lt;/ul>
&lt;p>Die LTE-Schnittstelle wird vom Treiber des Netzwerk-Modems automatisch weniger hoch priorisiert als die Ethernet-Schnittstelle. Ist die Ethernet-Schnittstelle verfügbar, werden Daten bevorzugt hierüber (uneingeschränkt) ausgetauscht.&lt;/p>
&lt;h2 id="implementierung" >Implementierung
&lt;span>
&lt;a href="#implementierung">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>&lt;code>iptables&lt;/code> Firewallregel, um allen ausgehenden Traffic über das &lt;code>usb0&lt;/code> interface zu blockieren:&lt;/p>
&lt;pre>&lt;code>sudo iptables -t filter -A OUTPUT -o usb0 -j REJECT
sudo ip6tables -t filter -A OUTPUT -o usb0 -j REJECT
&lt;/code>&lt;/pre>
&lt;p>&lt;em>&lt;strong>Wichtig&lt;/strong>: Die Blockierregel wird mit &lt;code>-A&lt;/code> (&amp;ldquo;append&amp;rdquo;) hinzugefügt. Alle Ausnahmen zu dieser Blockierregel werden im Folgenden mit &lt;code>-I&lt;/code> (&amp;ldquo;insert&amp;rdquo;) hinzugefügt, damit sie in der Abarbeitung / Priorisierung weiter vorne stehen und triggern, bevor es zum &amp;ldquo;REJECT&amp;rdquo; kommt.&lt;/em>&lt;/p>
&lt;p>Verbindungen zum LTE Router selbst erlauben - sonst funktioniert gar nichts mehr:&lt;/p>
&lt;pre>&lt;code>sudo iptables -t filter -I OUTPUT -o usb0 -d 192.168.8.1 -j ACCEPT
sudo ip6tables -t filter -I OUTPUT -o usb0 -d fe80::c0b0:4fff:fefe:fefe -j ACCEPT
&lt;/code>&lt;/pre>
&lt;p>Allerdings müssen Verbindungen zum VPN-Server erlaubt bleiben:&lt;/p>
&lt;pre>&lt;code>sudo iptables -t filter -I OUTPUT -o usb0 -d vpn.mydomain.tld -p udp --dport 51821 -j ACCEPT
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>&lt;em>51821 = Wireguard port&lt;/em>&lt;/li>
&lt;li>&lt;em>Falls der VPN-Server auch via IPv6 erreichbar ist, Kommando mit &lt;code>ip6tables&lt;/code> wiederholen&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>&amp;hellip; und auch zum DNS, denn sonst kann der Hostnamen des Wireguard VPN Servers nicht aufgelöst werden:&lt;/p>
&lt;pre>&lt;code>sudo iptables -t filter -I OUTPUT -o usb0 -p udp --dport 53 -j ACCEPT
sudo ip6tables -t filter -I OUTPUT -o usb0 -p udp --dport 53 -j ACCEPT
&lt;/code>&lt;/pre>
&lt;h2 id="ausgehende-pings-erlauben" >Ausgehende Pings erlauben
&lt;span>
&lt;a href="#ausgehende-pings-erlauben">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Wer zu Debugging-Zwecken ausgehende Pings (ICMP requests) ins LTE-Netz erlauben will, kann eine Ausnahme hinzufügen:&lt;/p>
&lt;pre>&lt;code>sudo iptables -t filter -I OUTPUT -o usb0 -p icmp --icmp-type echo-request -j ACCEPT
sudo ip6tables -t filter -I OUTPUT -o usb0 -p icmpv6 --icmpv6-type echo-request -j ACCEPT
&lt;/code>&lt;/pre>
&lt;h2 id="alle-via-mobilfunk-eingehenden-verbindungen-blockieren" >Alle via Mobilfunk eingehenden Verbindungen blockieren
&lt;span>
&lt;a href="#alle-via-mobilfunk-eingehenden-verbindungen-blockieren">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Um zu verhindern, dass der SSH Port oder ein Webserver direkt aus dem Mobilfunknetz erreicht werden können, wird der Zugriff aus dem Mobilfunknetz weiter eingeschränkt. Services auf dem Target dürfen von außen &lt;em>nur&lt;/em> über das Wireguard VPN erreichbar sein.&lt;/p>
&lt;pre>&lt;code>sudo iptables -t filter -A INPUT -i usb0 -j REJECT
sudo iptables -t filter -I INPUT -i usb0 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
sudo ip6tables -t filter -A INPUT -i usb0 -j REJECT
sudo ip6tables -t filter -I INPUT -i usb0 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
&lt;/code>&lt;/pre>
&lt;p>Die &lt;code>-m conntrack&lt;/code> Regeln bewirken, dass für eingehende Pakete eine Ausnahme gemacht wird, wenn sie zuvor vom Target selbst angefragt wurden. Schließlich sollen Antworten auf DNS-Anfragen oder Ping-Anfragen das Target weiterhin durchdringen können.&lt;/p>
&lt;h2 id="ergebnis" >Ergebnis
&lt;span>
&lt;a href="#ergebnis">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;pre>&lt;code>pi@target:~ $ sudo iptables -L -t filter -n -v
Chain INPUT (policy ACCEPT 640 packets, 56736 bytes)
pkts bytes target prot opt in out source destination
456 69620 ACCEPT all -- usb0 * 0.0.0.0/0 0.0.0.0/0 ctstate RELATED,ESTABLISHED
0 0 REJECT all -- usb0 * 0.0.0.0/0 0.0.0.0/0 reject-with icmp-port-unreachable
Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
pkts bytes target prot opt in out source destination
Chain OUTPUT (policy ACCEPT 583 packets, 72865 bytes)
pkts bytes target prot opt in out source destination
3 252 ACCEPT icmp -- * usb0 0.0.0.0/0 0.0.0.0/0 icmptype 8
29 1921 ACCEPT udp -- * usb0 0.0.0.0/0 0.0.0.0/0 udp dpt:53
366 77068 ACCEPT udp -- * usb0 0.0.0.0/0 &amp;lt;vpnip&amp;gt; udp dpt:51821
0 0 ACCEPT all -- * usb0 0.0.0.0/0 192.168.8.1
69 6061 REJECT all -- * usb0 0.0.0.0/0 0.0.0.0/0 reject-with icmp-port-unreachable
&lt;/code>&lt;/pre>
&lt;p>&lt;em>&lt;code>&amp;lt;vpnip&amp;gt;&lt;/code> entspricht hier der aufgelösten IP Adresse zu &lt;code>vpn.mydomain.tld&lt;/code>. &lt;code>51821&lt;/code> ist der genutzte Wireguard Port.&lt;/em>&lt;/p>
&lt;p>Nur Verbindungen, die direkt über das &lt;code>usb0&lt;/code> Interface gehen, werden von der Firewall beschränkt. Verbindungen, die innerhalb des VPN-Netzes hergestellt werden, bleiben unberührt. So kann beispielsweise unbeschränkt über das Wireguard VPN auf den SSH Port und alle weiteren Dienste auf den Targets zugegriffen werden.&lt;/p>
&lt;p>Falls auch Zugriffe innerhalb des VPNs beschränkt werden sollen, können entsprechende &lt;code>iptables&lt;/code> Regeln mit einem &lt;code>-i &amp;lt;wireguardinterface&amp;gt;&lt;/code> Parameter versehen werden, sodass diese nur auf das Wireguard-Interface abzielen.&lt;/p></description></item></channel></rss>