<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>vpn on ZERO GmbH Tech Blog</title><link>https://blog.zero-iee.com/tags/vpn/</link><description>ZERO GmbH Tech Blog (vpn)</description><generator>Hugo -- gohugo.io</generator><language>de</language><lastBuildDate>Mon, 04 Dec 2023 08:41:52 +0100</lastBuildDate><atom:link href="https://blog.zero-iee.com/tags/vpn/index.xml" rel="self" type="application/rss+xml"/><item><title>Die Wireguard VPN Firewall mit Shorewall übersichtlich halten</title><link>https://blog.zero-iee.com/posts/vpn-firewall-shorewall/</link><pubDate>Mon, 04 Dec 2023 08:41:52 +0100</pubDate><guid>https://blog.zero-iee.com/posts/vpn-firewall-shorewall/</guid><description>&lt;p>In unserem &lt;a href="https://blog.zero-iee.com/posts/multi-tenant-wireguard-vpn-server/">vorherigen Artikel&lt;/a> haben wir die iptables-Firewall für unseren Wireguard VPN-Server vorgestellt. Die Firewall regelt, welcher Traffic zwischen den einzelnen Kunden-VPNs und dem Management-VPN erlaubt ist und verhindert Zugriffe, die ein Sicherheitsrisiko darstellen.&lt;/p>
&lt;p>Die Verwaltung dieser Regeln mittels der iptables Command Line Tools ist zwar möglich, allerdings relativ schnell unübersichtlich und insbesondere für Außenstehende schwer zu erfassen. Wir haben deshalb die Firewallkonfiguration über das Tool &amp;ldquo;&lt;a href="https://shorewall.org/">Shorewall&lt;/a>&amp;rdquo; erprobt und für geeignet befunden.&lt;/p>
&lt;p>Shorewall ist ein Tool, das einfache Textdateien mit Firewallregeln nach einem vordefinierten Format einliest, validiert und in iptables-Regeln umsetzt. Es ist also nur ein Frontend, das iptables bedient und keine eigenständige Firewall im engeren Sinne.&lt;/p>
&lt;p>Durch die statische Konfiguration in einzelnen semantisch getrennten Textdateien fällt es leichter, den Überblick zu behalten. Iptables-Regeln können zwar via netfilter-persistent (bzw. iptables-persistent) ebenfalls in Textdateien persistiert werden, doch die Syntax ist beim Überfliegen nur schwer verständlich. Für kleinere Setups mag das ausreichen - doch wir planen einige VPN-Netze u.A. mit individuellen Berechtigungen aufzuspannen. Mit Shorewall als iptables-Konfigurator können wir die Übersicht über die Firewallregeln besser behalten und Fehler vermeiden.&lt;/p>
&lt;p>Die Firewallkonfiguration verteilt sich bei Shorewall über einige Dateien im Konfigurationsverzeichnis &lt;code>/etc/shorewall&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>/etc/shorewall/zones&lt;/code>: Definiert die Firewall-Zonen, die später in den Regelsätzen verwendet werden können.&lt;/li>
&lt;li>&lt;code>/etc/shorewall/interfaces&lt;/code>: Regelt, welche Netzwerk-Interfaces mit Shorewall benutzt werden sollen und welchen Zone sie angehören.&lt;/li>
&lt;li>&lt;code>/etc/shorewall/policy&lt;/code>: Definiert die Default-Policies zwischen Zonen. Darf Traffic zwischen Zonen passieren oder nicht?&lt;/li>
&lt;li>&lt;code>/etc/shorewall/rules&lt;/code>: Hier werden die feingranularen Regeln definiert: Wurde vorher beispielsweise eine &lt;code>REJECT&lt;/code> Policy zwischen Zonen definiert, können hier port-/protokoll-basierte Ausnahmen definiert werden.&lt;/li>
&lt;/ul>
&lt;p>Im Folgenden werfen wir einen Blick in unsere Konfiguration:&lt;/p>
&lt;p>&lt;code>zones&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>fw firewall
wan ipv4
customer1-vpn ipv4
customer1-vpn ipv4
mastervpn ipv4
&lt;/code>&lt;/pre>&lt;p>Wir legen Zone &lt;code>fw&lt;/code> (Alias: &lt;code>$FW&lt;/code>) als Firewall-eigene Zone fest und definieren weitere Zonen für unsere WAN Schnittstelle und unsere VPN-Netze.&lt;/p>
&lt;p>&lt;code>interfaces&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>wan eth0 detect dhcp,routefilter,tcpflags
customer1-vpn customer1-vpn detect routeback
customer2-vpn customer2-vpn detect routeback
mastervpn mastervpn detect routeback
&lt;/code>&lt;/pre>&lt;p>Hier werden Netzwerkinterface und Zone miteinander verknüpft - die Zone in der ersten Spalte, das zugeordnete Netzwerkinterface in der zweiten Spalte. Besonders wichtig ist bei den VPN-Zonen die &lt;code>routeback&lt;/code> Option, die dafür sorgt, dass Traffic, der an einem VPN-Interface eingeht, selbiges auch direkt wieder verlassen kann; so wie es bei einem VPN-Interface die Regel ist, wenn Clients miteinander kommunizieren. Später wird diese Client-to-Client Kommunikation zwar wieder deaktiviert, aber wir wollen uns die Möglichkeit vorhalten, sie für einzelne VPN-Clients zu ermöglichen.&lt;/p>
&lt;p>&lt;code>policy&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code># Source # Dest # Policy
wan all REJECT
$FW all ACCEPT
mastervpn all ACCEPT
customer1-vpn all REJECT
customer2-vpn all REJECT
&lt;/code>&lt;/pre>&lt;p>Eingehender Traffic auf WAN soll grundsätzlich erst einmal blockiert werden. Einzelne Ausnahmen - beispielsweise für die VPN-Server-Ports - werden später in der &lt;code>rules&lt;/code> Datei gemacht.&lt;/p>
&lt;p>Die Firewall selbst bekommt keine Einschränkungen und darf andere Zonen bzw. Interfaces beliebig ansprechen.&lt;/p>
&lt;p>Unser &lt;code>mastervpn&lt;/code> darf ebenfalls uneingeschränkt kommunizieren. Dabei handelt es sich um das Admin-Interface, von dem aus unsere Entwickler Verbindungen zu verschiedenen VPN-Clients herstellen.&lt;/p>
&lt;p>Restriktiver gehen wir bei den beiden Kunden-VPNs &lt;code>customer1-vpn&lt;/code> und &lt;code>customer2-vpn&lt;/code> vor: Diese werden mittels &lt;code>REJECT&lt;/code> eingesperrt und dürfen per default erst einmal mit niemandem kommunizieren.&lt;/p>
&lt;p>&lt;code>rules&lt;/code>: Nun folgen die Ausnahmen für die gerade erklärten Policies:&lt;/p>
&lt;pre tabindex="0">&lt;code># Policy # Source # Dest # Prot # Port
# Allow access to VPN ports
ACCEPT wan $FW UDP 51821,51822,51823
# Allow SSH from internet
SSH(ACCEPT) wan $FW
# Allow pings from all VPNs to their Server VPN interface
Ping(ACCEPT) customer1-vpn $FW:10.2.1.1
Ping(ACCEPT) customer2-vpn $FW:10.3.0.1
Ping(ACCEPT) mastervpn $FW:10.4.0.1
# Explicitly allow inter-client connections on some VPN devices (legacy &amp;#34;admin&amp;#34; devices)
ACCEPT customer1-vpn:10.2.1.10 customer1-vpn # device 1
ACCEPT customer1-vpn:10.2.1.11 customer1-vpn # device 2
ACCEPT customer1-vpn:10.2.1.12 customer1-vpn # device 3
# Prevent inter-client connections on VPNs for all devices that have not explicitly been allowed in the section before
REJECT customer1-vpn customer1-vpn:10.2.1.0/24
REJECT customer2-vpn customer2-vpn:10.3.0.0/16
&lt;/code>&lt;/pre>&lt;p>Zuerst wird der Zugriff auf die WAN Ports &lt;code>51821,51822,51823&lt;/code> erlaubt, sodass sich Wireguard-VPN Clients zum VPN Server verbinden können. Außerdem verbinden wir uns über SSH zum VPN-Server - auch das soll weiterhin erlaubt bleiben. In diesem Fall nutzen wir das &lt;code>SSH(ACCEPT)&lt;/code> Makro von Shorewall, um Port und Protokoll nicht gesondert definieren zu müssen.&lt;/p>
&lt;p>Pings von VPN-Clients zu deren jeweiligen serverseitigen Interface und seiner IP-Adressen sollen in allen Fällen erlaubt sein. Wir pingen in der Regel das Serverinterface an, um die Funktionsfähigkeit einer VPN-Verbindung festzustellen.&lt;/p>
&lt;p>Im nächsten Abschnitt wird Client-to-Client Kommunikation für einzelne VPN-Clients des Netzes &lt;code>customer1-vpn&lt;/code> explizit ermöglicht.&lt;/p>
&lt;p>&amp;hellip; für alle anderen Geräte wird diese Art der Kommunikation im darauf folgenden Abschnitt mittels &lt;code>REJECT&lt;/code> verhindert. Sie können folglich nur Antwortpakete zurückschicken (implizite Regel in Shorewall) und nicht von sich aus Verbindungen initiieren.&lt;/p>
&lt;p>IP-Forwarding ist auf unserem Server bereits aktiviert. Wer die Einstellung &lt;code>net.ipv4.ip_forward&lt;/code> in /etc/sysctl.conf noch nicht aktiviert hat, kann stattdessen auch in &lt;code>/etc/shorewall/shorewall.conf&lt;/code> &lt;code>IP_FORWARDING&lt;/code> auf &lt;code>On&lt;/code> setzen.&lt;/p>
&lt;p>Zum Schluss haben wir &lt;code>netfilter-persistent&lt;/code> aus dem Boot genommen:&lt;/p>
&lt;pre>&lt;code>systemctl disable netfilter-persistent
&lt;/code>&lt;/pre>
&lt;p>&amp;hellip; und die iptables-Regeln geleert:&lt;/p>
&lt;pre>&lt;code>iptables -F
&lt;/code>&lt;/pre>
&lt;p>&amp;hellip; um dann die neuen Shorewall-Regeln testen zu können:&lt;/p>
&lt;pre>&lt;code>shorewall start
&lt;/code>&lt;/pre>
&lt;p>Nachdem alles wie erhofft funktioniert hat, wurde Shorewall in den Autostart aufgenommen:&lt;/p>
&lt;pre>&lt;code>systemctl enable shorewall
&lt;/code>&lt;/pre></description></item><item><title>Einen Multi-Tenant Wireguard VPN Server mit iptables absichern</title><link>https://blog.zero-iee.com/posts/multi-tenant-wireguard-vpn-server/</link><pubDate>Wed, 29 Nov 2023 11:31:59 +0100</pubDate><guid>https://blog.zero-iee.com/posts/multi-tenant-wireguard-vpn-server/</guid><description>&lt;p>Die &lt;a href="https://www.zero-iee.com/de/products/">ZERO AMPS Nodes&lt;/a> verfügen zwar nicht per default über eine Internetverbindung, doch in einigen Fällen statten wir sie mit einem Mobilfunkmodul aus, sodass wir sie in Absprache mit dem Kunden aus der Ferne aktualisieren, warten oder Fehler beheben können.&lt;/p>
&lt;p>Um eine sichere Verbindung zu unserer eigenen Infrastruktur herzustellen, nutzen wir größtenteils &lt;a href="https://www.wireguard.com">Wireguard&lt;/a> VPNs. Wireguard VPN sind sehr leichtgewichtig, performant und sind sich erfahrungsgemäß sehr robust - vor allem in Kombination mit Mobilfunkverbindungen. Der Wireguard Client auf den AMPS Nodes verbindet sich zu unserem zentralen VPN-Server. Über diesen stellen auch unsere Entwickler eine Verbindung her, sodass sie sich letztendlich zu dem jeweiligen AMPS Node verbinden können.&lt;/p>
&lt;p>Da wir allerdings verschiedene Kunden mit verschieden großen Projekten haben und bei der Datensicherheit keine Kompromisse eingehen wollen, haben wir unsere VPN-Netze nach Kunden und Projekten aufgetrennt:&lt;/p>
&lt;p>Kunde A wird so mit seinen Geräten niemals mit Geräten des Kunden B in Kontakt kommen können - dafür sorgen die individuellen VPN-Netze und unsere Firewallregeln, die den Datenverkehr innerhalb der VPNs und darüber hinaus beschränken. Es muss unbedingt verhindert werden, dass ein kompromittiertes Gerät die Kontrolle über sämtliche - auch kundenfremde - Nodes erhält.&lt;/p>
&lt;p>In der Regel kann also von einem Node aus nicht aus einem Kunden-VPN heraus kommuniziert werden. Eine Ausnahme gibt es dann aber doch: Ein eigenes &amp;ldquo;Master VPN&amp;rdquo; (&lt;code>mastervpn&lt;/code>) erlaubt unseren Entwicklern, über dieses VPN Geräte &lt;em>aller anderen&lt;/em> VPNs zu erreichen. Statt sich also mit vielen verschiedenen Wireguard-Profilen herumschlagen zu müssen, genügt es, wenn unsere Entwickler eine Verbindung mit diesem einen Master VPN herstellen.&lt;/p>
&lt;p>Unsere Netzwerktopologie sieht also in etwa so aus:&lt;/p>
&lt;p>&lt;img src="images/wireguard-networks.svg" alt="Networks Graphics">&lt;/p>
&lt;p>Die Firewallregeln auf dem VPN-Server vor der Implementierung der Sicherheitsmaßnahmen:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@vpnserver:~# iptables -L -v
Chain INPUT (policy ACCEPT 0 packets, 0 bytes)
pkts bytes target prot opt in out source destination
Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
pkts bytes target prot opt in out source destination
Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)
pkts bytes target prot opt in out source destination
&lt;/code>&lt;/pre>&lt;p>&lt;em>(Grund für die gähnende Leere: eine weitere Firewall befindet sich außerhalb des VPN-Servers und filtert eingehende Verbindungen bereits)&lt;/em>&lt;/p>
&lt;p>Diese Regeln galt es nun so auszubauen, dass folgende Anforderungen erfüllt sind:&lt;/p>
&lt;ul>
&lt;li>Ein AMPS Node in einem der Wireguard-Netz darf nur mit anderen AMPS Nodes (oder dem Server-Interface) seines eigenen VPN-Subnetzes kommunizieren.&lt;/li>
&lt;li>Ein Gerät im &lt;code>mastervpn&lt;/code> Wiregard Netz darf mit &lt;em>beliebigen&lt;/em> AMPS Nodes in &lt;em>allen&lt;/em> Wireguard-Netzen kommunizieren.&lt;/li>
&lt;/ul>
&lt;p>Damit überhaupt eine Kommunikation / ein Paket-Forwarding über Netzgrenzen (z.B. &lt;code>mastervpn&lt;/code> =&amp;gt; &lt;code>customer1-vpn&lt;/code> oder &lt;code>mastervpn&lt;/code> =&amp;gt; &lt;code>customer2-vpn&lt;/code>) hinweg möglich ist, muss im Linux Kernel zuerst das IPv4-Forwarding aktiviert werden. Temporär via&lt;/p>
&lt;pre>&lt;code>sysctl -w net.ipv4.ip_forward=1
&lt;/code>&lt;/pre>
&lt;p>&amp;hellip; oder dauerhaft durch die Anpassung der Datei &lt;code>/etc/sysctl.conf&lt;/code>:&lt;/p>
&lt;pre>&lt;code>net.ipv4.ip_forward=1
&lt;/code>&lt;/pre>
&lt;p>Gefolgt durch ein&lt;/p>
&lt;pre>&lt;code>sysctl -p
&lt;/code>&lt;/pre>
&lt;p>Per default kann nun jedes Netzwerkinterface an jedes andere Datenpakete weiterleiten. Clients verschiedener Wireguard-Netze könnten also - wenn sie clientseitig passend konfiguriert sind - miteinander sprechen. Doch dieses Verhalten soll bei uns normalerweise &lt;em>nicht&lt;/em> erlaubt sein. Daher wird die Default-Firewallregel für die &amp;ldquo;FORWARD&amp;rdquo; Chain der &amp;ldquo;Filter&amp;rdquo; Tabelle auf &amp;ldquo;DROP&amp;rdquo; gesetzt:&lt;/p>
&lt;pre>&lt;code>iptables -P FORWARD DROP
&lt;/code>&lt;/pre>
&lt;p>Für einen Fall müssen wir das Forwarding allerdings erlauben - nämlich für den Fall, dass eine Anfrage aus dem &lt;code>mastervpn&lt;/code> heraus in eines der Kunden-VPNs geschickt wird. Für diesen Fall wurde das Forwarding ja zuvor aktiviert:&lt;/p>
&lt;pre>&lt;code>iptables -A FORWARD --in-interface mastervpn --out-interface customer1-vpn -j ACCEPT
iptables -A FORWARD --in-interface mastervpn --out-interface customer2-vpn -j ACCEPT
&lt;/code>&lt;/pre>
&lt;p>Damit Geräte aus dem betreffenden Kunden-VPN antworten können, ist eine weitere Firewallregel wichtig, die dafür sorgt, dass AMPS Nodes aus dem Kunden-VPN in einem Fall eben doch Pakete in ein anderes Wireguard-Netz (&lt;code>mastervpn&lt;/code>) schicken dürfen. Nämlich dann, wenn es sich um eine Antwort auf eine zuvor eingegangene Anfrage aus &lt;code>mastervpn&lt;/code> handelt:&lt;/p>
&lt;pre>&lt;code>iptables -A FORWARD --out-interface mastervpn -m state --state ESTABLISHED,RELATED -j ACCEPT
&lt;/code>&lt;/pre>
&lt;p>Bisher haben wir nur die &lt;code>FORWARD&lt;/code> Regeln betrachtet. Dabei fällt aber ein Fall durch&amp;rsquo;s Raster: Was, wenn ein Paket nicht weitergeleitet werden muss, sondern sein Ziel schon erreicht hat? Das ist beispielsweise der Fall, wenn von &lt;code>customer3-vpn&lt;/code> aus die &lt;em>Wireguard Server-IP&lt;/em> von &lt;code>customer2-vpn&lt;/code> angesprochen wird. Da hier - trotz anders lautender IP-Adresse der Server selbst angesprochen wird, kommt kein Forwarding zum Tragen und derartige Kommunikation wird von den bisherigen Regeln nicht verhindert.&lt;/p>
&lt;p>Wenn wir solche Anfragen verhindern wollen, muss eine &lt;code>INPUT&lt;/code> Regel für jedes der VPNs erzeugt werden, z.B.:&lt;/p>
&lt;pre>&lt;code>iptables -A INPUT -d 10.4.0.1 ! --in-interface mastervpn -j REJECT
iptables -A INPUT -d 10.2.0.1 ! --in-interface customer1-vpn -j REJECT
iptables -A INPUT -d 10.3.0.1 ! --in-interface customer2-vpn -j REJECT
&lt;/code>&lt;/pre>
&lt;p>&lt;code>10.4.0.1&lt;/code> ist hier beispielsweise die IP-Adresse, die innerhalb des &lt;code>mastervpn&lt;/code> für den Server selbst genutzt wird. Genauso verhält es sich bei den anderen beiden Regeln für die &lt;code>customer&lt;/code> VPNs.&lt;/p>
&lt;p>Firewallregeln nach der Implementierung der Sicherheitsmaßnahmen:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@vpnserver:~# iptables -L -v
Chain INPUT (policy ACCEPT 5621 packets, 1148K bytes)
pkts bytes target prot opt in out source destination
7 588 REJECT all -- !mastervpn any anywhere 10.4.0.1
0 0 REJECT all -- !customer1-vpn any anywhere 10.2.0.1
0 0 REJECT all -- !customer2-vpn any anywhere 10.3.0.1
reject-with icmp-port-unreachable
Chain FORWARD (policy DROP 17 packets, 1428 bytes)
pkts bytes target prot opt in out source destination
2 168 ACCEPT all -- mastervpn customer1-vpn anywhere anywhere
207 17201 ACCEPT all -- mastervpn customer2-vpn anywhere anywhere
38 4692 ACCEPT all -- any mastervpn anywhere anywhere state RELATED,ESTABLISHED
Chain OUTPUT (policy ACCEPT 6708 packets, 1425K bytes)
pkts bytes target prot opt in out source destination
&lt;/code>&lt;/pre>&lt;p>Der Weg durch die Firewall wäre hiermit für unsere AMPS Kundengeräte geebnet.&lt;/p>
&lt;p>Nur eines fehlt noch: Eine Routinginformation für den Fall, dass jemand aus dem &lt;code>mastervpn&lt;/code> heraus auf eines der AMPS Nodes in den &lt;code>customer&lt;/code> VPNs zugreift. Es muss spezifiziert werden, wohin Antwortpakete geschickt werden sollen. Schließlich sehen die Geräte nur eine IP-Adresse aus dem mastervpn-Bereich, z.B. &lt;code>10.4.0.0/24&lt;/code>. Da standardmäßig nur Routinginformationen für ihr eigenes Subnetz vorliegen, müssen wir ihnen den Weg zu 10.4.0.0/24 zeigen. Dazu wird in der jeweiligen Wireguard-Konfiguration auf dem AMPS Node ein Eintrag für &lt;code>AllowedIPs&lt;/code> hinzugefügt:&lt;/p>
&lt;p>Aus&lt;/p>
&lt;pre>&lt;code>AllowedIPs = 10.3.0.0/16
&lt;/code>&lt;/pre>
&lt;p>wird beispielsweise&lt;/p>
&lt;pre>&lt;code>AllowedIPs = 10.3.0.0/16,10.4.0.0/24
&lt;/code>&lt;/pre>
&lt;p>Somit ist für den betroffenen Wireguard-Client aus dem Kundennetz klar, dass nicht nur Pakete für das eigene SUbnetz über den Server geroutet werden sollen, sondern auch (Antwort-)Pakete an das &lt;code>mastervpn&lt;/code> Netz &lt;code>10.4.0.0/24&lt;/code>.&lt;/p>
&lt;p>Nach einem Neuladen der Clientkonfiguration mittels &lt;code>systemctl restart wg-quick@customer1-vpn&lt;/code> ist die Änderung aktiv und die Routinginformationen sollten vorliegen:&lt;/p>
&lt;pre>&lt;code>ip route
&lt;/code>&lt;/pre>
&lt;p>&lt;em>Hinweis: Die oben genannten iptables Einstellungen sind &lt;strong>nicht&lt;/strong> persistent! Um sie nach einem Reboot wiederherzustellen, empfehlen wir, iptables Regeln mittels &lt;code>netfilter-persistent&lt;/code> zu persistieren.&lt;/em>&lt;/p></description></item></channel></rss>