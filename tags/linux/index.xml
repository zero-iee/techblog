<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux on ZERO GmbH Tech Blog</title><link>https://blog.zero-iee.com/tags/linux/</link><description>ZERO GmbH Tech Blog (linux)</description><generator>Hugo -- gohugo.io</generator><language>de</language><lastBuildDate>Fri, 21 Jul 2023 12:18:27 +0200</lastBuildDate><atom:link href="https://blog.zero-iee.com/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Ein Labornetzwerk unter Linux einrichten</title><link>https://blog.zero-iee.com/posts/labornetzwerk/</link><pubDate>Fri, 21 Jul 2023 12:18:27 +0200</pubDate><guid>https://blog.zero-iee.com/posts/labornetzwerk/</guid><description>&lt;p>Während meiner Arbeit verbinde ich mich regelmäßig zu verschiedenen Rechnern und eingebetteten Geräten, die über eine Ethernetverbindung erreichbar sind. Diese könnte man nun direkt - wie den Entwicklungsrechner auch - an das Firmennetzwerk anschließen&amp;hellip;&lt;/p>
&lt;p>&amp;hellip; oder man erstellt für seine Geräte ein eigenes &amp;ldquo;Labornetz&amp;rdquo;, welches nur vom eigenen Laptop aus erreichbar ist und über das man die volle Kontrolle hat. Vorteile können sein:&lt;/p>
&lt;ul>
&lt;li>Überblick über die verbundenen Geräte und ihre IP-Adressen&lt;/li>
&lt;li>Keine Exposition der angeschlossenen Geräte ins Firmennetz (Verbesserung der Sicherheit)&lt;/li>
&lt;li>Ist am Entwicklungsrechner nur WLAN verfügbar, können die embedded Geräte trotzdem einfach und kabelbunden erreicht werden.&lt;/li>
&lt;/ul>
&lt;p>In größeren Unternehmen kann zudem der Zugang zum internen Firmennetzwerk stark reguliert sein, sodass sich überhaupt nur freigeschaltene Geräte nutzen lassen. Mit einem eigenen kleinen Labornetz auf einem zweiten Netzwerkinterface kann das Problem elegant umgangen werden.&lt;/p>
&lt;h2 id="der-plan" >Der Plan
&lt;span>
&lt;a href="#der-plan">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Das Labornetz bekommt das IPv4-Netz &amp;ldquo;10.0.0.1/24&amp;rdquo;. IP-Adressen werden vergeben zwischen 10.0.0.10 und 10.0.0.254. Die eigene Entwicklungsrechner soll darin als Router und DNS-Resolver agieren und besitzt die IP-Adresse 10.0.0.1.&lt;/p>
&lt;p>Die Netzwerkparameter auf dem Laborinterface werden in den Netzwerkeinstellungen statisch festgelegt:&lt;/p>
&lt;ul>
&lt;li>IP-Adresse: 10.0.0.1&lt;/li>
&lt;li>Netzmaske: /24 (255.255.255.0)&lt;/li>
&lt;li>Gateway: 10.0.0.1&lt;/li>
&lt;/ul>
&lt;h2 id="dnsmasq-als-dhcp--und-dns-server-einsetzen" >Dnsmasq als DHCP- und DNS-Server einsetzen
&lt;span>
&lt;a href="#dnsmasq-als-dhcp--und-dns-server-einsetzen">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Der &lt;code>dnsmasq&lt;/code> Server wird genutzt, um einen DHCP- und DNS-Server im Labornetz bereitzustellen. DNS wird benötigt, falls über NAT (siehe letzter Abschnitt) eine Internetverbindung genutzt werden soll.&lt;/p>
&lt;pre>&lt;code>sudo apt install dnsmasq
&lt;/code>&lt;/pre>
&lt;p>In der neuen Konfigurationsdatei&lt;code>/etc/dnsmasq.d/labnet.conf&lt;/code> wird &lt;code>dnsmasq&lt;/code> konfiguriert:&lt;/p>
&lt;pre>&lt;code>listen-address=10.0.0.1
bind-interfaces
dhcp-range=10.0.0.10,10.0.0.254,255.255.255.0,24h
dhcp-option=option:router,10.0.0.1
dhcp-option=option:dns-server,10.0.0.1
&lt;/code>&lt;/pre>
&lt;p>&lt;code>listen-address&lt;/code> und &lt;code>bind-interfaces&lt;/code> sorgen dafür, dass der mitgelieferte DNS-Resolver nur auf dem Netzwerkinterface horcht, welches die IP-Adresse 10.0.0.1 zugeordnet hat. Lässt man die Option &lt;code>bind-interfaces&lt;/code> weg, versucht &lt;code>dnsmasq&lt;/code>, auch auf dem localhost Interface einen DNS-Service zu instaltiieren, was auf modernen Linuxdistributionen fehlschlägt, da hier schon &lt;code>systemd-resolved&lt;/code> läuft.&lt;/p>
&lt;p>Die neue Config-Datei wird unten in der Datei &lt;code>/etc/dnsmasq.conf&lt;/code> noch aktiviert, indem folgende Zeile einkommentiert wird:&lt;/p>
&lt;pre>&lt;code>conf-dir=/etc/dnsmasq.d/,*.conf
&lt;/code>&lt;/pre>
&lt;p>Nach einem Neustart von &lt;code>dnsmasq&lt;/code> ziehen sich Geräte, die nur am Laborinterface angesteckt werden, eine IP-Adresse via DHCP und sollten von der Entwicklungsrechner aus erreichbar sein. Welche IP-Adresse ein Gerät bekommen hat, lässt sich im &lt;code>dnsmasq&lt;/code> Log nachvollziehen:&lt;/p>
&lt;pre>&lt;code>sudo journalctl -u dnsmasq -f
&lt;/code>&lt;/pre>
&lt;h2 id="eine-temporäre-internetverbindung-bereitstellen" >Eine (temporäre) Internetverbindung bereitstellen
&lt;span>
&lt;a href="#eine-tempor%c3%a4re-internetverbindung-bereitstellen">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Damit angeschlossene Geräte für Softwareinstallationen und Updates einen Weg ins Internet finden, kann auf der Entwicklungsrechner ein Source-NAT eingerichtet werden. Ich nutze hierfür ein kleines Script:&lt;/p>
&lt;pre>&lt;code>#!/bin/bash
EXT_IFACE=ens33 # ens33 = interface to public network
INT_IFACE=ens37 # ens37 = interface to lab network
if [[ &amp;quot;$1&amp;quot; == &amp;quot;start&amp;quot; ]]; then
echo &amp;quot;Starting NAT ...&amp;quot;
sudo sh -c &amp;quot;echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward&amp;quot;
sudo iptables --table nat --append POSTROUTING --out-interface $EXT_IFACE -j MASQUERADE
sudo iptables --append FORWARD --in-interface $INT_IFACE -j ACCEPT
else
echo &amp;quot;Stopping NAT ...&amp;quot;
sudo iptables --table nat --delete POSTROUTING --out-interface $EXT_IFACE -j MASQUERADE
sudo iptables --delete FORWARD --in-interface $INT_IFACE -j ACCEPT
fi
&lt;/code>&lt;/pre>
&lt;p>&lt;em>(Wichtig: Interfacebezeichnungen &lt;code>ens33&lt;/code> bzw &lt;code>ens37&lt;/code> anpassen via Variablen EXT_IFACE und INT_IFACE!)*&lt;/em>&lt;/p>
&lt;p>Das Script wird unter &lt;code>~/.local/bin/natctl&lt;/code> abgespeichert und im PATH bekannt gemacht:&lt;/p>
&lt;p>&lt;code>~/.bashrc&lt;/code>:&lt;/p>
&lt;pre>&lt;code>export PATH=$PATH:~/.local/bin
&lt;/code>&lt;/pre>
&lt;p>Außerdem wird das Script ausführbar gemacht:&lt;/p>
&lt;pre>&lt;code>chmod u+x ~/.local/bin/netctl
&lt;/code>&lt;/pre>
&lt;p>Nach einem &lt;code>source ~/.bashrc&lt;/code> sollte das &lt;code>natctl&lt;/code> Script verfügbar sein. Über zwei einfache Kommandos kann die Internetverbindung dann aktiviert bzw. deaktiviert werden:&lt;/p>
&lt;pre>&lt;code>natctl start
natctl stop
&lt;/code>&lt;/pre>
&lt;p>&lt;em>Hinweis: Nach einem Reboot muss der &lt;code>dnsmasq&lt;/code> Server evtl. neu gestartet werden, da das Laborinterface zum ersten Startversuch möglicherweise noch nicht die passende IP-Adresse hatte und dieser deshalb fehlgeschlagen sein könnte. Sollten neu angesteckte Geräte also keine IP-Adresse bekommen, lohnt es sich, einmal einen Neustart via &lt;code>sudo systemctl restart dnsmasq&lt;/code> zu versuchen.&lt;/em>&lt;/p>
&lt;p>&lt;em>Hinweis 2: Auch die NAT-Funktion überlebt (absichtlich) keinen Neustart. Nach dem Booten muss das NAT mittels &lt;code>natctl start&lt;/code> wieder aktiviert werden.&lt;/em>&lt;/p></description></item><item><title>Quectel RM520N-GL 5G Mobilfunkmodem unter Ubuntu Linux in Betrieb nehmen</title><link>https://blog.zero-iee.com/posts/quectel-rm520n-gl-5g-modem-unter-ubuntu-linux/</link><pubDate>Mon, 02 Jan 2023 14:20:04 +0100</pubDate><guid>https://blog.zero-iee.com/posts/quectel-rm520n-gl-5g-modem-unter-ubuntu-linux/</guid><description>&lt;p>Um verschiedene 5G Usecases zu demonstrieren, sollte im Rahmen eines Projekts ein 5G-Modem an einem Ubuntu-basierten Mini PC betrieben werden. Hierzu haben wir uns das RM520N-GL von Quectel besorgt.&lt;/p>
&lt;p>Das Modem wird vom Linux-Kernel erst ab Version 6.0 vollständig unterstützt. Die dazugehörigen Patches sind &lt;a href="https://patchwork.kernel.org/project/linux-usb/patch/tencent_23054B863154DC02C6E98E5942416BFC200A@qq.com/">hier (USB &amp;ldquo;option&amp;rdquo; Treiber)&lt;/a> bzw &lt;a href="https://www.spinics.net/lists/linux-usb/msg230835.html">hier (qmi_wwan Treiber)&lt;/a> zu finden.&lt;/p>
&lt;p>Quectel liefert in der Dokumentation zwar auch Hinweise aus, an welchen Stellen die beteffenden Treiber angepasst werden müssen, doch das erwies sich in unserem Fall als fehleranfällig. Leider werden keine fertigen Git-Patches geliefert, sondern nur Code-Snippets in einem PDF-Dokument.&lt;/p>
&lt;p>Einfacher war es, den Ubuntu 22.04.1 LTS Kernel von Version 5.17 auf Version 6.0.1 anzuheben. Dazu muss der Kernel und seine Module nicht unbedingt neu gebaut werden. Canonical stellt bereits vorkompilierte Kernelartefakte in Form von Debian-Paketen zur Verfügung. Diese werden zwar nicht offiziell unterstützt oder mit Updates versorgt, doch für unsere Demonstrationszwecke war das völlig ausreichend.&lt;/p>
&lt;p>Unter &lt;a href="https://kernel.ubuntu.com/~kernel-ppa/mainline/v6.0.1/">https://kernel.ubuntu.com/~kernel-ppa/mainline/v6.0.1/&lt;/a> werden vier wichtige .deb Pakete zum Download angeboten:&lt;/p>
&lt;ul>
&lt;li>&lt;code>amd64/linux-headers-6.0.1-060001-generic_6.0.1-060001.202210120833_amd64.deb&lt;/code>&lt;/li>
&lt;li>&lt;code>amd64/linux-headers-6.0.1-060001_6.0.1-060001.202210120833_all.deb&lt;/code>&lt;/li>
&lt;li>&lt;code>amd64/linux-image-unsigned-6.0.1-060001-generic_6.0.1-060001.202210120833_amd64.deb&lt;/code>&lt;/li>
&lt;li>&lt;code>amd64/linux-modules-6.0.1-060001-generic_6.0.1-060001.202210120833_amd64.deb&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Alle vier Dateien werden heruntergeladen und über den Paketmanager installiert:&lt;/p>
&lt;pre>&lt;code>cd Downloads
sudo dkpg -i ./linux*.deb
&lt;/code>&lt;/pre>
&lt;p>Target neu starten - und fertig! Ein &lt;code>uname -r&lt;/code> sollte jetzt die neue kernelversion zeigen. Und auch die aktualisierten USB- und Netzwerktreiber für das Quectel Modem sollten jetzt den Dienst aufnehmen und die passenden Device Nodes unter /dev anlegen:&lt;/p>
&lt;ul>
&lt;li>&lt;code>/dev/cdc-wdm0&lt;/code>&lt;/li>
&lt;li>&lt;code>/dev/ttyUSB0&lt;/code>&lt;/li>
&lt;li>&lt;code>/dev/ttyUSB1&lt;/code>&lt;/li>
&lt;li>&lt;code>/dev/ttyUSB2&lt;/code>&lt;/li>
&lt;li>&lt;code>/dev/ttyUSB3&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;em>(USB Nodes können je nach angeschlossener Peripherie auch anders nummeriert sein!)&lt;/em>&lt;/p>
&lt;h2 id="eine-verbindung-über-den-networkmanager-und-modemmanager-herstellen" >Eine Verbindung über den NetworkManager und ModemManager herstellen
&lt;span>
&lt;a href="#eine-verbindung-%c3%bcber-den-networkmanager-und-modemmanager-herstellen">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Der &amp;ldquo;schönste&amp;rdquo; Weg führt über die NetworkManager-Integration des ModemManagers. Um zu sehen, ob das Quectel Modem überhaupt als solches vom ModemManager erkannt wurde, kann ein&lt;/p>
&lt;pre>&lt;code>mmcli --modem=0
&lt;/code>&lt;/pre>
&lt;p>ausgeführt werden. Ein paar Informationen zum Modemstatus sollten hier aufgelistet werden.&lt;/p>
&lt;p>Wer eine mit PIN gesicherte SIM-Karte im System nutzt, wird diese zuerst entsperren müssen. Dazu kann über das vorher genannte Kommando zuerst der virtuelle Pfad des SIM-Slots ermittelt werden, z.B.&lt;/p>
&lt;pre>&lt;code>-----------------------------------
SIM | primary sim path: /org/freedesktop/ModemManager1/SIM/0
| sim slot paths: slot 1: /org/freedesktop/ModemManager1/SIM/0 (active)
| slot 2: none
&lt;/code>&lt;/pre>
&lt;p>&amp;hellip; und dann die entsprechende SIM (Index 0) aktiviert werden:&lt;/p>
&lt;pre>&lt;code>mmcli -i=0 --pin=1234
&lt;/code>&lt;/pre>
&lt;p>Wer die SIM permanent entsperrt lassen will, kann die PIN-Sperre entfernen:&lt;/p>
&lt;pre>&lt;code>mmcli -i=0 --pin=1234 --disable-pin
&lt;/code>&lt;/pre>
&lt;p>Sobald die SIM-Karte entsperrt ist, sollte eine Verbindung mit dem Modul möglich sein:&lt;/p>
&lt;pre>&lt;code>nmcli c add type gsm ifname cdc-wdm0 con-name 5g apn internet.telekom
nmcli c up 5g
&lt;/code>&lt;/pre>
&lt;p>Bis sich das Kommando zurückmeldet, können einige Sekunden vergehen. Wir haben hier absichtlich den alten &lt;code>internet.telekom&lt;/code> APN gewählt, weil wir mit dem neueren &amp;ldquo;internet.v6.telekom&amp;rdquo; APN keine Verbindung herstellen konnten. Ursache (noch) unbekannt.&lt;/p>
&lt;h2 id="verbindung-über-das-qmi-network-tool" >Verbindung über das &lt;code>qmi-network&lt;/code> tool
&lt;span>
&lt;a href="#verbindung-%c3%bcber-das-qmi-network-tool">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Statt des Network-/ModemManagers kann für die Verbindungsherstellung auch das &lt;code>qmi-network&lt;/code> Script aus dem &lt;code>libqmi-utils&lt;/code> Paket verwendet werden. Dazu werden in &lt;code>/etc/qmi-network.conf&lt;/code> die richtigen Einstellungen für das Nodem hinterlegt:&lt;/p>
&lt;pre>&lt;code>DEVICE=/dev/cdc-wdm0
DEVICE_OPEN_QMI=YES
PROXY=YES
&lt;/code>&lt;/pre>
&lt;p>Speziell die &lt;code>DEVICE_OPEN_QMI&lt;/code> scheint hier eine wichtige Rolle zu spielen. Anders als in ähnlichen Anleitungen zur Inbetriebnahme von Mobilfunkmodems konnten wir hierauf nicht verzichten.&lt;/p>
&lt;p>Schließlich lässt sich eine Verbindung starten:&lt;/p>
&lt;pre>&lt;code>sudo qmi-network /dev/cdc-wdm0 start
&lt;/code>&lt;/pre>
&lt;p>Allerdings kümmert sich das Script nicht um das Beziehen einer IP-Adresse und der entsprechenden Konfiguration des &lt;code>wwan0&lt;/code> Netzwerkinterfaces. Hier hilft der &lt;code>udhcpc&lt;/code> Client aus dem gleichnamigen Debian-Paket:&lt;/p>
&lt;pre>&lt;code>sudo udhcpc -i wwan0
&lt;/code>&lt;/pre>
&lt;p>Im Idealfall ist nach wenigen Sekunden eine lokale IP-Adresse auf dem &lt;code>wwan0&lt;/code> Interface konfiguriert und lässt eine Kommunikation ins Internet zu:&lt;/p>
&lt;pre>&lt;code>curl ifconfig.me
&lt;/code>&lt;/pre>
&lt;p>zeigt dabei die IP-Adresse an, die für Verbindungen ins Internet aktuell genutzt wird. Es empfiehlt sich, vorher sicherzustellen, dass der Mini-PC über keine Ethernetverbindung ins Internet mehr verfügt. Dazu wird die default-Route zum lokalen Ethernetinterface &lt;code>enp0s29f1&lt;/code> entfernt:&lt;/p>
&lt;pre>&lt;code>sudo ip route del default via 192.168.179.1 dev enp0s29f1
&lt;/code>&lt;/pre>
&lt;p>&lt;em>(kommando anpassen - je nach Output des Kommandos &lt;code>ip route&lt;/code>)&lt;/em>&lt;/p></description></item><item><title>Linux Kernelmodule mit Source-Änderungen neu kompilieren</title><link>https://blog.zero-iee.com/posts/linux-kernelmodule-mit-aenderungen-neu-kompilieren/</link><pubDate>Fri, 23 Dec 2022 09:20:52 +0100</pubDate><guid>https://blog.zero-iee.com/posts/linux-kernelmodule-mit-aenderungen-neu-kompilieren/</guid><description>&lt;p>Wer - wie wir bei der ZERO GmbH - mit neuer Hardware hantiert, die vom Linux-Kernel noch gar nicht oder nur teilweise unterstützt wird, muss in einigen Fällen bestehende Kerneltreiber anpassen. In unserem konkreten Fall ging es dabei um ein 5G Mobilfunkmodem, das vom uns eingesetzten Linux-Kernel noch nicht korrekt als solches erkannt wurde. Die Hardware war mit ihrer USB Vendor- und Product-ID noch nicht in den dazugehörigen Treibern registriert und weitere Detailanpassungen mussten in den betroffenen Subsystemen vorgenommen werden.&lt;/p>
&lt;p>Glücklicherweise lagert die Linuxdistribution Ubuntu die meisten Kerneltreiber in flexibel generierbare Kernelmodule (&lt;code>.ko&lt;/code> Dateien) aus, sodass nicht der gesamte Kernel nach Änderungen neu kompiliert werden muss. Wie Änderungen beispielhaft am USB-Treiber &amp;ldquo;&lt;code>option&lt;/code>&amp;rdquo; durchgeführt werden können, wird im Folgenden erklärt.&lt;/p>
&lt;p>Zunächst einmal wird eine Quelltextkopie des aktuell laufenden Linux-Kernels heruntergeladen. Unter Ubuntu funktioniert das ganz einfach über die Installation des jeweiligen &lt;code>linux-source&lt;/code> Pakets:&lt;/p>
&lt;pre>&lt;code>sudo apt install linux-source
&lt;/code>&lt;/pre>
&lt;p>Die Sourcen liegen nach der Installation unter &lt;code>/usr/src/linux-source-5.15.0.tar.bz2&lt;/code> (Ubuntu 22.04.1) und können in das Home-Directory extrahiert werden:&lt;/p>
&lt;pre>&lt;code>tar -xf /usr/src/linux-source-5.15.0.tar.bz2 -C ~/
&lt;/code>&lt;/pre>
&lt;p>Außerdem werden die Linux Header installiert - passend zur Kernelversion:&lt;/p>
&lt;pre>&lt;code>sudo apt install linux-headers-$(uname -r)
&lt;/code>&lt;/pre>
&lt;p>Damit der Linux-Kernel bzw. seine Module überhaupt gebaut oder konfiguriert werden können, müssen ggf. noch einige weitere Softwarepakete installiert werden:&lt;/p>
&lt;pre>&lt;code>sudo apt install linux-headers-$(uname -r)
sudo apt install build-essential libncurses-dev gawk flex bison libssl-dev dkms libelf-dev libudev-dev libpci-dev libiberty-dev autoconf llvm
&lt;/code>&lt;/pre>
&lt;p>Nach einem Wechsel in das entpackte Source-Verzeichnis wird die Konfiguration des aktuell laufenden Kernels in die Buildumgebung übertragen:&lt;/p>
&lt;pre>&lt;code>cd ~/linux-source-5.15.0/
make oldconfig
&lt;/code>&lt;/pre>
&lt;p>Bevor es an die Änderungen im Sourcecode der Kerneltreiber geht, wird die Buildumgebung noch vorbereitet:&lt;/p>
&lt;pre>&lt;code>make scripts prepare modules_prepare
&lt;/code>&lt;/pre>
&lt;p>An dieser Stelle können nun die nötigen Änderungen am Treiber vorgenommen werden. In unserem Beispiel also unter &lt;code>drivers/usb/serial/option.c&lt;/code>. Sobald die Änderungen gespeichert sind, kann das betroffene Modul oder Subsystem (in diesem Fall &lt;code>usb/serial&lt;/code>) neu gebaut werden:&lt;/p>
&lt;pre>&lt;code>make -C /lib/modules/$(uname -r)/build M=$(pwd)/drivers/usb/serial
&lt;/code>&lt;/pre>
&lt;p>Dabei werden in &lt;code>drivers/usb/serial&lt;/code> neue &lt;code>.ko&lt;/code> Dateien generiert, die nun in das System installiert werden können:&lt;/p>
&lt;pre>&lt;code>sudo cp --backup drivers/usb/serial/option.ko /lib/modules/$(uname -r)/kernel/drivers/usb/serial/option.ko
&lt;/code>&lt;/pre>
&lt;p>Ein abschließendes&lt;/p>
&lt;pre>&lt;code>sudo depmod
&lt;/code>&lt;/pre>
&lt;p>generiert die Kernelmodul-Abhängigkeiten neu, sodass nach einem Neustart des Systems die veränderte Version des Kernelmoduls/-treibers geladen wird.&lt;/p>
&lt;p>Beachtet, dass diese Methode, Änderungen ins System einzupflegen, nicht unbedingt &amp;ldquo;Update-resistent&amp;rdquo; ist. Da wir hier &amp;ldquo;am Paketmanager vorbei arbeiten&amp;rdquo;, ist sich dieser unserer Änderungen nicht bewusst und überschreibt ggf. unsere Modulversion mit einer neuen, von Canonical ausgelieferten Version. Bei Updates des Kernels oder seiner Module ist also Vorsicht geboten. Für kleine proof-of-concepts eignet sich dieser Weg dennoch.&lt;/p></description></item><item><title>Embedded Linux: Video in Endlosschleife auf Framebuffer abspielen mit mplayer</title><link>https://blog.zero-iee.com/posts/embedded-linux-video-auf-framebuffer-abspielen-mplayer/</link><pubDate>Wed, 21 Dec 2022 02:38:26 -0800</pubDate><guid>https://blog.zero-iee.com/posts/embedded-linux-video-auf-framebuffer-abspielen-mplayer/</guid><description>&lt;p>Vor allem für Demozwecke, z.B. auf Messen, fragen Kunden immer wieder nach Displayansteuerungen, die eine Videodatei auf einem oder mehreren Bildschirmen präsentieren. Während sich zum Teil abenteuerliche Lösungen mit Windows und automatisch startenden PowerPoint-Präsentationen mit eingebettetem Video finden lassen, waren wir von ZERO auf der Suche nach einer eleganteren Lösung, die zudem zügig startet und wenig Raum für Fehlbedienung lässt.&lt;/p>
&lt;p>Zentraler Bestandteil in unserem Ubuntu-basierten Setup ist der &lt;code>mplayer&lt;/code> - ein Videoplayer, der seinen Videoutput nicht nur in einer grafischen Desktopumgebung einbetten kann, sondern diesen auch ganz ohne GUI direkt auf den Framebuffer schreiben kann. So können wir auf das Laden einer Xorg- oder Wayland-basierten Desktupumgebung verzichten und beschlenigen den Bootprozess deutlich. Zudem entstehen keine Hürden wie Login oder automatisch startende Applikationen, die das Video verdecken (z.B. der Ubuntu Softwareupdatedienst).&lt;/p>
&lt;p>Der &lt;code>mplayer&lt;/code> kann aus den Standardpaketquellen von Ubuntu bezogen werden:&lt;/p>
&lt;pre>&lt;code>apt update
apt install mplayer
&lt;/code>&lt;/pre>
&lt;p>Nach der Installation wird unter &lt;code>/opt/runvideo.sh&lt;/code> ein Script angelegt, das &lt;code>mplayer&lt;/code> mit einigen Parametern startet:&lt;/p>
&lt;pre tabindex="0">&lt;code>#!/bin/bash
VIDEOFILE=$(find /home/showdisplay/Videos/ -type f -print -quit)
mplayer -vo sdl:driver=fbcon ${VIDEOFILE} -loop 0
&lt;/code>&lt;/pre>&lt;p>In der zweiten Zeile wird die erste Videodatei ermittelt, die sich im Verzeichnis &lt;code>/home/showdisplay/Videos&lt;/code> befindet (nach alphabetischer Reihenfolge). In Zeile 3 passiert dann die eigentliche &lt;code>mplayer&lt;/code>-Magie:&lt;/p>
&lt;ul>
&lt;li>&lt;code>-vo sdl:driver=fbcon&lt;/code>: Video auf dem Framebuffer wiedergeben&lt;/li>
&lt;li>&lt;code>-loop 0&lt;/code>: Das Video in einer Endlosschleife abspielen. &lt;strong>WICHTIG: Dieser Parameter muss an letzter Stelle stehen - sonst startet nicht nur das Video neu, sondern die gesamte &lt;code>mplayer&lt;/code> Instanz. Das führt zu einem deutlichen Flackern beim Neustart. Das Verhalten ist nicht dokumentiert. Deshalb sei hiermit explizit darauf hingewiesen.&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Das Startscript wird nun noch ausführbar gemacht:&lt;/p>
&lt;pre>&lt;code>chmod u+x /opt/runvideo.sh
&lt;/code>&lt;/pre>
&lt;p>&amp;hellip; und eine &lt;code>systemd&lt;/code> Servicedatei wird erstellt, um das Script beim Boot automatisch auszuführen:&lt;/p>
&lt;pre tabindex="0">&lt;code>[Unit]
Description=Run video
ConditionPathExists=/opt/runvideo.sh
[Service]
Type=forking
ExecStart=/opt/runvideo.sh
TimeoutSec=0
StandardOutput=tty
RemainAfterExit=yes
SysVStartPriority=99
[Install]
WantedBy=multi-user.target
&lt;/code>&lt;/pre>&lt;p>Zuletzt wird der neue Service aktiviert:&lt;/p>
&lt;pre>&lt;code>systemctl daemon-reload
systemctl enable runvideo.service
&lt;/code>&lt;/pre>
&lt;p>Da keine GUI benötigt wird (bzw. in diesem Fall sogar stört), wird der Gnome Desktop Manager (GDM) deaktiviert:&lt;/p>
&lt;pre>&lt;code>sudo systemctl disable gdm
&lt;/code>&lt;/pre>
&lt;p>Fertig!&lt;/p>
&lt;p>Sobald der Displaycontroller neu gestartet wird, wird die erste Videodatei aus &lt;code>/home/showdisplay/Videos/&lt;/code> abgespielt - zumindest, solange das Format vom &lt;code>mplayer&lt;/code> unterstützt wird.&lt;/p></description></item></channel></rss>