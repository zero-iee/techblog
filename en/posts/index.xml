<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on ZERO GmbH Tech Blog</title><link>https://blog.zero-iee.com/en/posts/</link><description>ZERO GmbH Tech Blog (Posts)</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 18 Apr 2024 15:11:30 +0200</lastBuildDate><atom:link href="https://blog.zero-iee.com/en/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Connecting a Raspberry Pi to the Internet with Waveshare NB-IoT HAT / Simcom SIM7070G modem</title><link>https://blog.zero-iee.com/en/posts/nb-iot-internet-connection-with-simcom-sim7070g-modem/</link><pubDate>Wed, 17 Jan 2024 10:00:00 +0100</pubDate><guid>https://blog.zero-iee.com/en/posts/nb-iot-internet-connection-with-simcom-sim7070g-modem/</guid><description>&lt;p>We took a closer look at the &amp;ldquo;Waveshare SIM7070G Cat-M/NB-IoT/GPRS HAT&amp;rdquo; for the Raspberry Pi and put it into operation. We uncovered various pitfalls and describe below how we set up the NB-IoT modem to connect one of our &lt;a href="https://www.zero-iee.com/de/products/">#AMPS nodes&lt;/a> to the internet.&lt;/p>
&lt;ul>
&lt;li>Hardware:
&lt;ul>
&lt;li>Raspberry Pi 4 B&lt;/li>
&lt;li>Mobilfunk-HAT: &lt;a href="https://www.waveshare.com/wiki/SIM7070G_Cat-M/NB-IoT/GPRS_HAT">Waveshare SIM7070G Cat-M/NB-IoT/GPRS HAT&lt;/a>&lt;/li>
&lt;li>SIM-Karte: Telekom M2M&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Software: Raspbian 12 &amp;ldquo;Bookworm&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;p>&lt;img alt="Animated Webp Image of the blinking Waveshare module attached to a Raspi" src="https://blog.zero-iee.com/posts/nb-iot-internet-connection-with-simcom-sim7070g-modem/images/waveshare-raspi.webp">&lt;/p>
&lt;h2 id="connecting-the-modem-to-the-raspberry-pi" >Connecting the modem to the Raspberry Pi
&lt;span>
&lt;a href="#connecting-the-modem-to-the-raspberry-pi">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Like any other HAT module, the modem is connected to the Raspberry Pi 4 B via the Raspberry pin header. In addition, we have connected the module to the Raspberry Pi via the USB cable supplied in order to check whether the serial console works as expected as a first step.&lt;/p>
&lt;p>The USB cable can be dispensed with later.&lt;/p>
&lt;h2 id="supply-the-modem-with-power" >Supply the modem with power
&lt;span>
&lt;a href="#supply-the-modem-with-power">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>The mobile modem is obviously connected to one of the GPIO pins of the Raspberry Pi. The modem is switched on or off by activating GPIO pin 4. After starting, the pin should first be switched to a low level so that a high level is present at the SimCom modem (due to an NPN transistor on the module). The high level should be permanently present at the input if &lt;em>no&lt;/em> action is required. However, if a switch-on or switch-off action is required, a low level must be applied to the SimCom Modem for at least one second (switch on) or 1.2 seconds (switch off) before switching back to a high level.&lt;/p>
&lt;p>The initial switching to the high level can be carried out as follows:&lt;/p>
&lt;pre>&lt;code>echo &amp;quot;4&amp;quot; &amp;gt; /sys/class/gpio/export
sleep 0.1
echo &amp;quot;out&amp;quot; &amp;gt; /sys/class/gpio/gpio4/direction
echo &amp;quot;0&amp;quot; &amp;gt; /sys/class/gpio/gpio4/value
&lt;/code>&lt;/pre>
&lt;p>&lt;em>Reminder: &amp;ldquo;0&amp;rdquo; causes a low level on the NPN transistor and therefore an inverted &amp;ldquo;high&amp;rdquo; level on the modem!&lt;/em>&lt;/p>
&lt;p>This command sequence is packed into the file &lt;code>/etc/rc.local&lt;/code> before the &lt;code>exit 0&lt;/code> instruction and thus executed once after each boot. By default, the modem should start after it has been supplied with power.&lt;/p>
&lt;p>If the modem is to be explicitly switched on or off, the input must - as already mentioned - be pulled to a low level on the modem for at least 1.2 seconds. This is achieved by applying a short high level to the module inputs.&lt;/p>
&lt;p>To switch the power supply, we create a script &lt;code>/home/pi/powertoggle.sh&lt;/code> which contains the following sequence:&lt;/p>
&lt;pre tabindex="0">&lt;code>#!/bin/bash
echo &amp;#34;1&amp;#34; &amp;gt; /sys/class/gpio/gpio4/value
sleep 1.2
echo &amp;#34;0&amp;#34; &amp;gt; /sys/class/gpio/gpio4/value
&lt;/code>&lt;/pre>&lt;p>If the script is executed once, the modem starts. If it is executed again, it is shut down.&lt;/p>
&lt;p>Normally, this &lt;code>powertoggle.sh&lt;/code> script does not need to be executed after starting, as the modem starts automatically. However, if no serial connection is established, it may help to switch the power supply once by executing the script.&lt;/p>
&lt;h2 id="check-serial-connection-to-the-modem" >Check serial connection to the modem
&lt;span>
&lt;a href="#check-serial-connection-to-the-modem">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Communication with the mobile modem takes place exclusively via a serial connection, which is provided within USB. The bandwidth of the interface is very limited, but completely sufficient in the NB-IoT application, as the available bandwidth in the mobile network is minimal anyway and is only suitable for transmitting very small amounts of data (status information, sensor data, commands, &amp;hellip;).&lt;/p>
&lt;p>Our modem identifies itself at the USB port with USB Vendor ID &lt;code>1e0e&lt;/code> and Product ID &lt;code>9206&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>pi@raspberrypi:~ $ lsusb
Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub
Bus 001 Device 020: ID 1e0e:9206 Qualcomm / Option SimTech SIM7080 &amp;lt;------ SIM7070 Modem
Bus 001 Device 002: ID 2109:3431 VIA Labs, Inc. hub
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
&lt;/code>&lt;/pre>&lt;p>According to the data sheet (&lt;a href="https://www.simcom.com/product/SIM7070G.html">SIM7070_SIM7080_SIM7090 Series_Linux_Application Note_V1.02&lt;/a>), the modem offers the following interfaces via USB:&lt;/p>
&lt;ul>
&lt;li>0: (USB serial): Diagnostic interface&lt;/li>
&lt;li>1: (USB serial): GPS NMEA interface&lt;/li>
&lt;li>2: (USB serial): AT port interface&lt;/li>
&lt;li>3: (USB serial): QFLOG interface&lt;/li>
&lt;li>4: (USB serial): DAM interface&lt;/li>
&lt;li>5: (USB serial): Modem port interface&lt;/li>
&lt;/ul>
&lt;p>The port assignment may differ depending on the product ID - it may therefore be worth taking a look at the data sheet. However, the most important interface for this article is always in position 2: the AT port interface.&lt;/p>
&lt;p>As is usual in the mobile radio sector, this mobile radio modem is also controlled via so-called AT commands on a serial interface. The Linux kernel from mainline kernel 5.8.10 contains the &lt;a href="https://elixir.bootlin.com/linux/v5.8.10/source/drivers/usb/serial/option.c#L1827">necessary adjustments&lt;/a> in the USB options driver, which provides the aforementioned serial interfaces via USB.&lt;/p>
&lt;p>To test the AT interface, it is sufficient to establish a connection using Minicom. Minicom is installed for this purpose:&lt;/p>
&lt;pre>&lt;code>sudo apt install minicom
&lt;/code>&lt;/pre>
&lt;p>&amp;hellip; and started:&lt;/p>
&lt;pre>&lt;code>sudo minicom -b 115200 -D /dev/ttyUSB2
&lt;/code>&lt;/pre>
&lt;p>You can then start Minicom by entering&lt;/p>
&lt;pre>&lt;code>AT
&lt;/code>&lt;/pre>
&lt;p>to check whether AT commands are accepted. This ensures that we are talking to the correct console. If an &amp;ldquo;OK&amp;rdquo; is returned, everything is OK and the modem is responding to our commands.&lt;/p>
&lt;p>Minicom can be exited again via &lt;code>CTRL+A&lt;/code> and &lt;code>X&lt;/code>.&lt;/p>
&lt;h2 id="switch-to-the-raspberry-pis-own-serial-interface" >Switch to the Raspberry Pi&amp;rsquo;s own serial interface
&lt;span>
&lt;a href="#switch-to-the-raspberry-pis-own-serial-interface">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>If we are sure that the USB-based serial communication with the modem works, we can also switch to the Raspberry Pi&amp;rsquo;s own serial interface &lt;code>ttyS0&lt;/code>. This has the great advantage that there no longer needs to be a USB connection between the Raspi and the Waveshare module: The USB cable can be removed.&lt;/p>
&lt;p>On the Raspberry Pi, the serial console still needs to be activated and set appropriately.
To do this, select &amp;ldquo;03 Interface options&amp;rdquo; and then &amp;ldquo;I5 Serial Port&amp;rdquo; in the &lt;code>raspi-config&lt;/code> tool. Settings:&lt;/p>
&lt;ul>
&lt;li>Login Shell: NO&lt;/li>
&lt;li>Serial Port Hardware enabled: YES&lt;/li>
&lt;/ul>
&lt;p>Important: &amp;ldquo;Login shell&amp;rdquo; must be set to &lt;code>NO&lt;/code>. Otherwise, communication problems with the modem may occur. Finally, restart the Raspi once to activate the settings.&lt;/p>
&lt;p>From now on, serial communication via the &lt;code>/dev/ttyS0&lt;/code> interface should also be possible. As in the case above, Minicom can be used again to check the connection.&lt;/p>
&lt;p>Tip: If a response to the &amp;ldquo;AT&amp;rdquo; command does not appear immediately, a new input can lead to success. More on this in the section &lt;em>&amp;ldquo;Modem does not respond: An auto bauding problem&amp;rdquo;&lt;/em>.&lt;/p>
&lt;h2 id="open-an-ip-data-channel-with-ppp" >Open an IP data channel with PPP
&lt;span>
&lt;a href="#open-an-ip-data-channel-with-ppp">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>To obtain an IP address from the mobile phone provider, a PPP registration must be carried out. We use a Telekom M2M (Machine-to-Machine) SIM card, which supports the Telekom NB-IoT network. The PPP information given below is suitable for the Telekom M2M network and possibly also for that of some resellers. For other providers, APN or possibly more configuration parameters must be adapted.&lt;/p>
&lt;p>We establish the PPP connection via the PPP daemon &lt;code>pppd&lt;/code>, which is installed as follows:&lt;/p>
&lt;pre>&lt;code>sudo apt install ppp
&lt;/code>&lt;/pre>
&lt;p>The PPP daemon must be configured in two places. Let&amp;rsquo;s start with the provider configuration, which is created in &lt;code>/etc/ppp/peers/telekomM2M&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>user &amp;#34;m2m&amp;#34;
connect &amp;#34;/usr/sbin/chat -v -f /etc/chatscripts/telekomM2M -T internet.m2mportal.de&amp;#34;
# Serial device to which the modem is connected.
/dev/ttyS0
# Speed of the serial line.
115200
nocrtscts
debug
nodetach
ipcp-accept-local
ipcp-accept-remote
# Assumes that your IP address is allocated dynamically by the ISP.
noipdefault
# Try to get the name server addresses from the ISP.
usepeerdns
# Use this connection as the default route.
defaultroute
# Makes pppd &amp;#34;dial again&amp;#34; when the connection is lost.
persist
maxfail 0
holdoff 5
# Do not ask the remote to authenticate.
noauth
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>/etc/chatscripts/telekomM2M&lt;/code> is the name of the &amp;ldquo;chat script&amp;rdquo; for communication with the modem&lt;/li>
&lt;li>&lt;code>internet.m2mportal.de&lt;/code> is the APN name of the M2M network&lt;/li>
&lt;/ul>
&lt;p>As the chat script &lt;code>/etc/chatscripts/telekomM2M&lt;/code> does not yet exist, it will now be created:&lt;/p>
&lt;pre tabindex="0">&lt;code>ABORT &amp;#34;BUSY&amp;#34;
ABORT &amp;#34;VOICE&amp;#34;
ABORT &amp;#34;NO CARRIER&amp;#34;
ABORT &amp;#34;NO DIALTONE&amp;#34;
ABORT &amp;#34;NO DIAL TONE&amp;#34;
ABORT &amp;#34;NO ANSWER&amp;#34;
ABORT &amp;#34;DELAYED&amp;#34;
ABORT &amp;#34;ERROR&amp;#34;
TIMEOUT 5
&amp;#39;&amp;#39; AT
&amp;#39;OK&amp;#39; AT
OK ATE1
OK AT+CGDCONT=1,&amp;#34;IPV4V6&amp;#34;,&amp;#34;\T&amp;#34;,&amp;#34;&amp;#34;,0,0
OK ATD*99#
TIMEOUT 22
CONNECT &amp;#39;&amp;#39;
&lt;/code>&lt;/pre>&lt;p>As with the previous configuration file: This chat script may only work for the &amp;ldquo;Telekom M2M&amp;rdquo; network of Deutsche Telekom. We are currently unable to say for sure whether it works in the same or a similar way for other providers. However, it may also be possible to use it for other providers such as Vodafone.&lt;/p>
&lt;p>By the way: We have built a second &amp;ldquo;AT&amp;rdquo; query into this script to avoid a timing problem. More on this later under &amp;ldquo;A timing problem&amp;rdquo;.&lt;/p>
&lt;p>Now that both configuration files are ready, we can bring the modem to life. Make sure that the serial console &lt;code>/dev/ttyS0&lt;/code> is no longer used by Minicom or a similar terminal and run the following command on the Raspberry Pi:&lt;/p>
&lt;pre>&lt;code>sudo pppd call telekomM2M
&lt;/code>&lt;/pre>
&lt;p>The PPP daemon now attempts to log on to the network. If it is successful, it obtains an IP address and other information about a mobile data connection from the PPP server. A new network interface &lt;code>ppp0&lt;/code> is set up in the background. This can be traced in a second console window:&lt;/p>
&lt;pre tabindex="0">&lt;code>pi@raspberrypi:~ $ ip addr
[...]
22: ppp0: &amp;lt;POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UNKNOWN group default qlen 3
link/ppp
inet 10.155.22.50 peer 10.64.64.64/32 scope global ppp0
valid_lft forever preferred_lft forever
&lt;/code>&lt;/pre>&lt;p>The (private) IP address &lt;code>10.155.22.50&lt;/code> is available at the interface and can now be used for communication with other network participants or on the Internet:&lt;/p>
&lt;pre>&lt;code>ping -I ppp0 1.1.1.1
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>If pings do not come through immediately: Don&amp;rsquo;t worry!&lt;/strong> The NB-IoT M2M network is not optimised for latency. At our location, it takes approx. 7 seconds for the first data packets to come back. The latency then slowly improves with each data packet until we are approaching 100 ms.&lt;/p>
&lt;pre tabindex="0">&lt;code>pi@raspberrypi:~ $ ping -I ppp0 1.1.1.1
PING 1.1.1.1 (1.1.1.1) from 10.155.22.50 ppp0: 56(84) bytes of data.
64 bytes from 1.1.1.1: icmp_seq=2 ttl=51 time=7002 ms
64 bytes from 1.1.1.1: icmp_seq=3 ttl=51 time=5978 ms
64 bytes from 1.1.1.1: icmp_seq=4 ttl=51 time=5337 ms
64 bytes from 1.1.1.1: icmp_seq=5 ttl=51 time=4313 ms
64 bytes from 1.1.1.1: icmp_seq=8 ttl=51 time=2297 ms
64 bytes from 1.1.1.1: icmp_seq=9 ttl=51 time=2316 ms
64 bytes from 1.1.1.1: icmp_seq=10 ttl=51 time=1315 ms
64 bytes from 1.1.1.1: icmp_seq=11 ttl=51 time=433 ms
64 bytes from 1.1.1.1: icmp_seq=12 ttl=51 time=392 ms
64 bytes from 1.1.1.1: icmp_seq=13 ttl=51 time=393 ms
64 bytes from 1.1.1.1: icmp_seq=14 ttl=51 time=231 ms
64 bytes from 1.1.1.1: icmp_seq=15 ttl=51 time=429 ms
64 bytes from 1.1.1.1: icmp_seq=16 ttl=51 time=268 ms
64 bytes from 1.1.1.1: icmp_seq=17 ttl=51 time=347 ms
64 bytes from 1.1.1.1: icmp_seq=18 ttl=51 time=546 ms
64 bytes from 1.1.1.1: icmp_seq=19 ttl=51 time=163 ms
64 bytes from 1.1.1.1: icmp_seq=20 ttl=51 time=282 ms
64 bytes from 1.1.1.1: icmp_seq=21 ttl=51 time=283 ms
64 bytes from 1.1.1.1: icmp_seq=22 ttl=51 time=139 ms
64 bytes from 1.1.1.1: icmp_seq=23 ttl=51 time=116 ms
64 bytes from 1.1.1.1: icmp_seq=24 ttl=51 time=135 ms
64 bytes from 1.1.1.1: icmp_seq=25 ttl=51 time=154 ms
64 bytes from 1.1.1.1: icmp_seq=26 ttl=51 time=173 ms
^C
--- 1.1.1.1 ping statistics ---
27 packets transmitted, 23 received, 14.8148% packet loss, time 26180ms
rtt min/avg/max/mdev = 116.182/1436.578/7001.561/2066.895 ms, pipe 7
&lt;/code>&lt;/pre>&lt;p>The two DNS servers obtained from the PPP daemon are listed in &lt;code>/etc/resolv.conf&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>pi@raspberrypi:~ $ cat /etc/resolv.conf
nameserver 10.74.210.210
nameserver 10.74.210.211
&lt;/code>&lt;/pre>&lt;p>This means that name resolution is also available via the Telekom DNS server.&lt;/p>
&lt;p>Information such as assigned IP address, DNS server and gateway (&amp;ldquo;remote IP address&amp;rdquo;) is also written to the ppp daemon log output:&lt;/p>
&lt;pre tabindex="0">&lt;code>[...]
local IP address 10.155.22.50
remote IP address 10.64.64.64
primary DNS address 10.74.210.210
secondary DNS address 10.74.210.211
[...]
&lt;/code>&lt;/pre>&lt;p>&amp;hellip; which unfortunately does not apply to the public IPv6 address assigned to the modem: This can only be found in the output of &lt;code>ip addr show dev ppp0&lt;/code>. Nevertheless, IPv6 is also available:&lt;/p>
&lt;pre>&lt;code>ping -I ppp0 2001:4860:4860::8888
&lt;/code>&lt;/pre>
&lt;p>If you now want to use the M2M network for all your Internet traffic, you can change the default route to this:&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo ip route del default
sudo ip -6 route del default
sudo ip route add default via 10.64.64.64 dev ppp0
sudo ip -6 route add default via fe80::1:2:47b1:3706 dev ppp0
&lt;/code>&lt;/pre>&lt;p>The IPv4 gateway address &lt;code>10.64.64.64&lt;/code> was taken from the ppp log - the IPv6 counterpart &lt;code>fe80::1:2:47b1:3706&lt;/code> was taken from the IPv6 routing information using &lt;code>ip -6 route&lt;/code>.&lt;/p>
&lt;p>&lt;strong>By the way&lt;/strong>: the PPP daemon seems to handle the resolver entries in &lt;code>/etc/resolv.conf&lt;/code> relatively ruthlessly and simply overwrites existing entries. If the default route is left on the Ethernet interface, for example, it is possible that no DNS resolver can be reached and name resolutions will fail. In this case, a subsequent correction of &lt;code>resolv.conf&lt;/code> provides a remedy.&lt;/p>
&lt;h2 id="autostart-for-the-ppp-daemon" >Autostart for the PPP daemon
&lt;span>
&lt;a href="#autostart-for-the-ppp-daemon">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>By default, the ppp package in Debian does not include a systemd service for the PPP daemon - but no problem! The package maintainers of Arch Linux have created a suitable &lt;a href="https://gitlab.archlinux.org/archlinux/packaging/packages/ppp/-/blob/main/ppp.systemd?ref_type=heads">service file&lt;/a>:&lt;/p>
&lt;pre tabindex="0">&lt;code>[Unit]
Description=PPP link to %I
Before=network.target
[Service]
Type=notify
ExecStart=/usr/sbin/pppd call %I nodetach nolog up_sdnotify
[Install]
WantedBy=multi-user.target
&lt;/code>&lt;/pre>&lt;p>We can save this under &lt;code>/etc/systemd/system/ppp@.service&lt;/code> and include the daemon in the boot autostart:&lt;/p>
&lt;pre>&lt;code>sudo systemctl daemon-reload
sudo systemctl enable ppp@telekomM2M.service
&lt;/code>&lt;/pre>
&lt;p>&lt;code>telekomM2M&lt;/code> is the name of the file &lt;code>/etc/ppp/peers/telekomM2M&lt;/code>. The part must be adapted accordingly if the PP configuration file is named differently. Accordingly, if several provider configs are used, a &lt;code>sudo systemctl enable ppp@provider2.service&lt;/code> could also be called up, for example.&lt;/p>
&lt;p>The PPP daemon can of course also be started via a systemd &amp;ldquo;start&amp;rdquo; command:&lt;/p>
&lt;pre>&lt;code>sudo systemctl start ppp@telekomM2M.service
&lt;/code>&lt;/pre>
&lt;h2 id="modem-does-not-respond-an-auto-bauding-problem" >Modem does not respond: An auto bauding problem
&lt;span>
&lt;a href="#modem-does-not-respond-an-auto-bauding-problem">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>During our experiments with Waveshare&amp;rsquo;s SIM7070G-based cellular module, we encountered a timing problem. We could solve it, but it wasn&amp;rsquo;t trivial to find, so let&amp;rsquo;s take a quick look at it.&lt;/p>
&lt;h3 id="symptoms" >Symptoms
&lt;span>
&lt;a href="#symptoms">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>During the first steps with the module, we did not use the native serial interface, but took the diversions via the USB-to-serial adapter. So Raspi =&amp;gt; USB connection of the module. With this setup, the PPP daemon worked perfectly and we were able to establish an Internet connection.&lt;/p>
&lt;p>Later, we switched to the native serial connection - i.e. without the USB port - and used the &lt;code>/dev/ttyS0&lt;/code> interface under Linux instead of &lt;code>/dev/ttyUSB2&lt;/code> to establish communication via the Raspi header. However, the PPP daemon could no longer establish a connection from this point onwards and terminated with a timeout.&lt;/p>
&lt;p>In this case, we were still able to get the modem to communicate under one condition: Namely, if we connected to the interfaces with a serial console (e.g. Minicom) before executing the PPP daemon and executed the &amp;ldquo;AT&amp;rdquo; command once or several times to get an &amp;ldquo;OK&amp;rdquo; back. The modem responded and when the PPP daemon was restarted, a connection could finally be established. Switching on with a terminal emulator therefore seemed to fix the connection.&lt;/p>
&lt;h3 id="the-cause" >The cause
&lt;span>
&lt;a href="#the-cause">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>By systematically trying out and fixing the baud rate on the modem, we were finally able to find the cause: The modem&amp;rsquo;s &amp;ldquo;auto-baud&amp;rdquo; feature - by all appearances in conjunction with a timing problem.&lt;/p>
&lt;p>The modem is set at the factory so that it does not accept a fixed baud rate, but attempts to recognise and set the baud rate itself with the first &amp;ldquo;AT&amp;rdquo; command. For example, if you set your Minicom tool to a baud rate of 115200 and connect to the serial interface, the execution of &amp;ldquo;AT&amp;rdquo; will also cause the modem to set itself to 115200 baud. This also explains why we were never able to get the PPP daemon to work with a different baud rate after such a step. The first connection and its baud rate are decisive after sending &amp;ldquo;AP&amp;rdquo;.&lt;/p>
&lt;p>So the first thing the modem had to get from our Raspi was an &amp;ldquo;AT&amp;rdquo; string in order to be able to configure its own baud rate appropriately. In the next step, we checked our chat script and realised that the first command was indeed an &amp;ldquo;AT&amp;rdquo; command. So everything was fine?&lt;/p>
&lt;p>Not quite. We eventually found out that we may be running into a timing problem at this point. This is because the documentation for another mobile radio module from the same manufacturer, SimCom, mentions the auto-baud feature, which states that after the first &amp;ldquo;AT&amp;rdquo; there should be a wait before further commands are sent. Otherwise, the following commands may no longer be interpreted correctly.&lt;/p>
&lt;h3 id="the-solution" >The solution
&lt;span>
&lt;a href="#the-solution">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>As the ChatScript syntax does not seem to recognise a &amp;ldquo;sleep&amp;rdquo; command or similar, we have simply added a second &amp;ldquo;AT&amp;rdquo; query to gain some time.&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;#39;&amp;#39; AT
&amp;#39;OK&amp;#39; AT
&lt;/code>&lt;/pre>&lt;p>And indeed - we were now able to communicate with the modem via the native serial interface - without having to connect via Minicom first. The PPP daemon ran immediately after booting.&lt;/p>
&lt;p>But why did it work perfectly via the USB serial connection? We suspect that the conversion from and to USB causes enough delay in the system so that the timing problem does not occur in this case.&lt;/p>
&lt;h2 id="a-better-solution-for-power-management" >A better solution for power management
&lt;span>
&lt;a href="#a-better-solution-for-power-management">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>At the beginning of this article we already described that the SIM7070G module can be switched on or off via GPIO4 of the Raspberry Pi. However, we failed to mention that we always switch the pin in our &lt;code>powertoggle.sh&lt;/code> script to a high level for one second (resulting in a low level on the SIM7070G modem).&lt;/p>
&lt;p>In fact, the data sheet of the mobile modem reveals the following:&lt;/p>
&lt;ul>
&lt;li>Low level for at least 1.0 second: Switch on&lt;/li>
&lt;li>Low level for at least 1.2 seconds: Switch off.&lt;/li>
&lt;/ul>
&lt;p>We can therefore not only &amp;ldquo;switch over&amp;rdquo; and reverse a possibly unknown initial state to its opposite, but also specifically bring about an &amp;ldquo;on&amp;rdquo; or &amp;ldquo;off&amp;rdquo; state through precise timing when switching.&lt;/p>
&lt;p>We initially experimented with bash commands, but realised relatively quickly that the timing of the bash shell is too imprecise to switch on or off reliably. We therefore implemented a small tool &lt;code>modemctl&lt;/code> in C, which can accept &amp;ldquo;init&amp;rdquo;, &amp;ldquo;on&amp;rdquo; and &amp;ldquo;off&amp;rdquo; arguments and control the GPIO4 output of the Raspi with corresponding precision:&lt;/p>
&lt;p>Source code &lt;code>modemctl.c&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>/*
* modemctl: Controls Waveshare NB-IoT power state by controlling GPIO pin
* Installing dependencies: sudo apt install pigpio
* Compiling: gcc -o modemctl modemctl.c -l pigpio
* Running: sudo ./modemctl init
* sudo ./modemctl on
* sudo ./modemctl off
*/
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;pigpio.h&amp;gt;
#define GPIO_PIN 4 // GPIO number of pin
#define ON_TIME 1.0 // Hold time for turning on
#define OFF_TIME 1.2 // Hold time for turning off
int main(int argc, char *argv[]) {
if (gpioInitialise() &amp;lt; 0) {
fprintf(stderr, &amp;#34;pigpio initialisation failed\n&amp;#34;);
return 1;
}
/* Set GPIO modes */
gpioSetMode(GPIO_PIN, PI_OUTPUT);
if (strcmp(argv[1], &amp;#34;init&amp;#34;) == 0) {
printf(&amp;#34;Initialising NB-IoT module power state\n&amp;#34;);
gpioWrite(GPIO_PIN, 0); /* Set pin to low to generate HIGH level on PWR input of module */
} else if (strcmp(argv[1], &amp;#34;on&amp;#34;) == 0) {
printf(&amp;#34;Turning NB-IoT module ON\n&amp;#34;);
gpioWrite(GPIO_PIN, 1); /* Set GPIO4 to 1 for ON_TIME seconds */
time_sleep(ON_TIME);
gpioWrite(GPIO_PIN, 0);
} else if (strcmp(argv[1], &amp;#34;off&amp;#34;) == 0) {
printf(&amp;#34;Turning NB-IoT module OFF\n&amp;#34;);
gpioWrite(GPIO_PIN, 1); /* Set GPIO4 to 1 for OFF_TIME seconds */
time_sleep(OFF_TIME);
gpioWrite(GPIO_PIN, 0);
} else {
printf(&amp;#34;Please provide \&amp;#34;on\&amp;#34; or \&amp;#34;off\&amp;#34; as an argument!\n&amp;#34;);
}
}
&lt;/code>&lt;/pre>&lt;p>The programme is started via&lt;/p>
&lt;pre>&lt;code>gcc -o modemctl modemctl.c -l pigpio
&lt;/code>&lt;/pre>
&lt;p>and can then be started with sudo to switch the module, e.g.&lt;/p>
&lt;pre>&lt;code>sudo ./modemctl init
sudo ./modemctl on
&lt;/code>&lt;/pre>
&lt;p>&amp;hellip; to switch on the module.&lt;/p>
&lt;p>Please note that switching the modem on and off can take a few seconds and the serial interface is not available immediately afterwards.&lt;/p>
&lt;p>The status can be read from the flashing &amp;ldquo;Net&amp;rdquo; LED on the module:&lt;/p>
&lt;ul>
&lt;li>No flashing: Switched off&lt;/li>
&lt;li>Slow flashing: Switched on, but no PPP connection / data transmission&lt;/li>
&lt;li>Fast flashing (~ 800 second cycle): Switched on and data transmission active&lt;/li>
&lt;/ul>
&lt;p>Instead of relying on the modem working immediately after booting _ - we have had the opposite experience -_ we can add the following to &lt;code>/etc/rc.local&lt;/code> instead of the &lt;code>init.sh&lt;/code> script:&lt;/p>
&lt;pre>&lt;code>/home/pi/modemctl init
/home/pi/modemctl on
&lt;/code>&lt;/pre>
&lt;p>This should reliably activate the modem at boot time. The &lt;code>powertoggle.sh&lt;/code> script is no longer required.&lt;/p>
&lt;h2 id="performance" >Performance
&lt;span>
&lt;a href="#performance">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>As shown in the ping output above, the latency of the network connection can vary greatly. At our location, we have found that the latency is initially a few seconds. However, as the data transfer continues, the latency drops to just under 200 ms. Naturally, the connection is therefore not suitable for transferring medium or large amounts of data. However, the connection is perfectly suitable for our use cases:&lt;/p>
&lt;ul>
&lt;li>Rollout of configuration changes (SSH / Ansible)&lt;/li>
&lt;li>Transfer of status information&lt;/li>
&lt;li>Transfer of small firmware updates&lt;/li>
&lt;li>Remote SSH login for debugging&lt;/li>
&lt;/ul>
&lt;p>gping test:&lt;/p>
&lt;pre>&lt;code>gping -i ppp0 -s -n 1.0 -b 60 1.1.1.1
&lt;/code>&lt;/pre>
&lt;p>&lt;img alt="gping test with the above mentioned command: Graph shows latency over 60 seconds" src="https://blog.zero-iee.com/posts/nb-iot-internet-connection-with-simcom-sim7070g-modem/images/gping.webp">&lt;/p>
&lt;p>Download test with:&lt;/p>
&lt;pre>&lt;code>curl http://speedtest.tele2.net/1GB.zip -o /dev/null -m 60
&lt;/code>&lt;/pre>
&lt;p>We measured 9.579 kByte/s (~77 kBit/s) in the download within a building and near a mobile phone mast. Time span: 60 seconds.&lt;/p>
&lt;p>Upload test:&lt;/p>
&lt;pre>&lt;code>curl -T /dev/urandom http://speedtest.tele2.net/upload.php -O /dev/null -m 60
&lt;/code>&lt;/pre>
&lt;p>We were also able to achieve similar to slightly higher data rates in the upload. However, we were unable to achieve a longer, continuous upload process due to connection interruptions. The significance of the test is therefore questionable. The reason for the disconnections may be a limitation of the available &amp;ldquo;air time&amp;rdquo; in the NB-IoT network.&lt;/p>
&lt;p>By the way: If you want to simulate locally (regardless of the latency) how an SSH session &amp;ldquo;feels&amp;rdquo; at the data transfer rate we measured, you can use the following command:&lt;/p>
&lt;pre>&lt;code>ssh -o ProxyCommand='pv -qL 9K | nc %h %p | pv -qL 9K' user@target-machine
&lt;/code>&lt;/pre>
&lt;p>To summarise, however, it can be said that the data rate is sufficient for the above-mentioned purposes. Thanks to &lt;a href="https://www.wireguard.com/">Wireguard&lt;/a>&amp;rsquo;s lean VPN protocol, we are even able to establish relatively low-latency connections to our &lt;a href="https://blog.zero-iee.com/en/posts/vpn-firewall-shorewall/">Management VPN&lt;/a>. We are curious to see how the system will perform in initial field tests.&lt;/p>
&lt;hr>
&lt;p>Sources:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.waveshare.com/wiki/SIM7070G_Cat-M/NB-IoT/GPRS_HAT">Waveshare Wiki&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.waveshare.com/w/upload/3/39/SIM7080_Series_AT_Command_Manual_V1.02.pdf">SimCom AT Kommandoreferenz&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.waveshare.com/w/upload/4/47/SIM7080_Series_Linux_Application_Note_V1.00.pdf">SimCom Linux Application Note&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tldp.org/HOWTO/PPP-HOWTO/x1219.html">ChatScript&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.digikey.jp/htmldatasheets/production/1833952/0/0/1/sim800-series-at-command-manual.html#pf12">Auto-Bouding explained in a SIM800 Series datasheet&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Keeping the Wireguard VPN firewall clear with Shorewall</title><link>https://blog.zero-iee.com/en/posts/vpn-firewall-shorewall/</link><pubDate>Mon, 04 Dec 2023 08:41:52 +0100</pubDate><guid>https://blog.zero-iee.com/en/posts/vpn-firewall-shorewall/</guid><description>&lt;p>In our &lt;a href="https://blog.zero-iee.com/en/posts/multi-tenant-wireguard-vpn-server/">previous article&lt;/a> we introduced the iptables firewall for our Wireguard VPN server. The firewall regulates which traffic is permitted between the individual customer VPNs and the management VPN and prevents access that poses a security risk.&lt;/p>
&lt;p>Although it is possible to manage these rules using the iptables command line tools, it quickly becomes confusing and difficult to understand, especially for outsiders. We have therefore tested the firewall configuration using the &amp;ldquo;&lt;a href="https://shorewall.org/">Shorewall&lt;/a>&amp;rdquo; tool and found it to be suitable.&lt;/p>
&lt;p>Shorewall is a tool that reads simple text files with firewall rules according to a predefined format, validates them and converts them into iptables rules. It is therefore only a front end that operates iptables and not an independent firewall in the strict sense.&lt;/p>
&lt;p>The static configuration in individual semantically separated text files makes it easier to maintain an overview. Iptables rules can also be persisted in text files via netfilter-persistent (or iptables-persistent), but the syntax is difficult to understand at a glance. This may be sufficient for smaller setups - but we are planning to set up some VPN networks with individual authorisations, among other things. With Shorewall as an iptables configurator, we can keep a better overview of the firewall rules and avoid errors.&lt;/p>
&lt;p>With Shorewall, the firewall configuration is distributed across several files in the configuration directory &lt;code>/etc/shorewall&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>/etc/shorewall/zones&lt;/code>: Defines the firewall zones that can later be used in the rule sets.&lt;/li>
&lt;li>&lt;code>/etc/shorewall/interfaces&lt;/code>: Defines which network interfaces are to be used with Shorewall and which zone they belong to.&lt;/li>
&lt;li>&lt;code>/etc/shorewall/policy&lt;/code>: Defines the default policies between zones. Is traffic allowed to pass between zones or not?&lt;/li>
&lt;li>&lt;code>/etc/shorewall/rules&lt;/code>: The fine-grained rules are defined here: For example, if a &lt;code>REJECT&lt;/code> policy was previously defined between zones, port/protocol-based exceptions can be defined here.&lt;/li>
&lt;/ul>
&lt;p>Below we take a look at our configuration:&lt;/p>
&lt;p>&lt;code>zones&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>fw firewall
wan ipv4
customer1-vpn ipv4
customer1-vpn ipv4
mastervpn ipv4
&lt;/code>&lt;/pre>&lt;p>We define zone &lt;code>fw&lt;/code> (alias: &lt;code>$FW&lt;/code>) as the firewall&amp;rsquo;s own zone and define further zones for our WAN interface and our VPN networks.&lt;/p>
&lt;p>&lt;code>interfaces&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>wan eth0 detect dhcp,routefilter,tcpflags
customer1-vpn customer1-vpn detect routeback
customer2-vpn customer2-vpn detect routeback
mastervpn mastervpn detect routeback
&lt;/code>&lt;/pre>&lt;p>The network interface and zone are linked here - the zone in the first column, the assigned network interface in the second column. The &lt;code>routeback&lt;/code> option is particularly important for the VPN zones, which ensures that traffic arriving at a VPN interface can also leave it again directly, as is the rule with a VPN interface when clients communicate with each other. This client-to-client communication will be deactivated again later, but we want to retain the option of enabling it for individual VPN clients.&lt;/p>
&lt;p>&lt;code>policy&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code># Source # Dest # Policy
wan all REJECT
$FW all ACCEPT
mastervpn all ACCEPT
customer1-vpn all REJECT
customer2-vpn all REJECT
&lt;/code>&lt;/pre>&lt;p>Incoming traffic on the WAN should always be blocked first. Individual exceptions - for example for the VPN server ports - are made later in the &lt;code>rules&lt;/code> file.&lt;/p>
&lt;p>The firewall itself has no restrictions and can address other zones or interfaces as required.&lt;/p>
&lt;p>Our &lt;code>mastervpn&lt;/code> may also communicate without restrictions. This is the admin interface from which our developers establish connections to various VPN clients.&lt;/p>
&lt;p>We take a more restrictive approach with the two customer VPNs &lt;code>customer1-vpn&lt;/code> and &lt;code>customer2-vpn&lt;/code>: These are locked in using &lt;code>REJECT&lt;/code> and are not allowed to communicate with anyone by default.&lt;/p>
&lt;p>&lt;code>rules&lt;/code>: The exceptions for the policies just explained now follow:&lt;/p>
&lt;pre tabindex="0">&lt;code># Policy # Source # Dest # Prot # Port
# Allow access to VPN ports
ACCEPT wan $FW UDP 51821,51822,51823
# Allow SSH from internet
SSH(ACCEPT) wan $FW
# Allow pings from all VPNs to their Server VPN interface
Ping(ACCEPT) customer1-vpn $FW:10.2.1.1
Ping(ACCEPT) customer2-vpn $FW:10.3.0.1
Ping(ACCEPT) mastervpn $FW:10.4.0.1
# Explicitly allow inter-client connections on some VPN devices (legacy &amp;#34;admin&amp;#34; devices)
ACCEPT customer1-vpn:10.2.1.10 customer1-vpn # device 1
ACCEPT customer1-vpn:10.2.1.11 customer1-vpn # device 2
ACCEPT customer1-vpn:10.2.1.12 customer1-vpn # device 3
# Prevent inter-client connections on VPNs for all devices that have not explicitly been allowed in the section before
REJECT customer1-vpn customer1-vpn:10.2.1.0/24
REJECT customer2-vpn customer2-vpn:10.3.0.0/16
&lt;/code>&lt;/pre>&lt;p>Firstly, access to the WAN ports &lt;code>51821,51822,51823&lt;/code> is permitted so that Wireguard VPN clients can connect to the VPN server. We also connect to the VPN server via SSH - this should also remain permitted. In this case, we use the &lt;code>SSH(ACCEPT)&lt;/code> macro from Shorewall so that we do not have to define the port and protocol separately.&lt;/p>
&lt;p>Pings from VPN clients to their respective server-side interface and its IP addresses should be allowed in all cases. We usually ping the server interface to determine the functionality of a VPN connection.&lt;/p>
&lt;p>In the next section, client-to-client communication is explicitly enabled for individual VPN clients of the &lt;code>customer1-vpn&lt;/code> network.&lt;/p>
&lt;p>&amp;hellip; For all other devices, this type of communication is prevented in the following section using &lt;code>REJECT&lt;/code>. Consequently, they can only send back response packets (implicit rule in Shorewall) and cannot initiate connections of their own accord.&lt;/p>
&lt;p>IP forwarding is already activated on our server. If you have not yet activated the setting &lt;code>net.ipv4.ip_forward&lt;/code> in /etc/sysctl.conf, you can also set &lt;code>IP_FORWARDING&lt;/code> to &lt;code>On&lt;/code> in &lt;code>/etc/shorewall/shorewall.conf&lt;/code> instead.&lt;/p>
&lt;p>Finally, we took &amp;rsquo;netfilter-persistent&amp;rsquo; out of the boat:&lt;/p>
&lt;pre>&lt;code>systemctl disable netfilter-persistent
&lt;/code>&lt;/pre>
&lt;p>&amp;hellip; and emptied the iptables rules:&lt;/p>
&lt;pre>&lt;code>iptables -F
&lt;/code>&lt;/pre>
&lt;p>&amp;hellip; to be able to test the new Shorewall rules:&lt;/p>
&lt;pre>&lt;code>shorewall start
&lt;/code>&lt;/pre>
&lt;p>After everything worked as hoped, Shorewall was added to the autostart:&lt;/p>
&lt;pre>&lt;code>systemctl enable shorewall
&lt;/code>&lt;/pre></description></item><item><title>Securing a multi-tenant Wireguard VPN server with iptables</title><link>https://blog.zero-iee.com/en/posts/multi-tenant-wireguard-vpn-server/</link><pubDate>Wed, 29 Nov 2023 11:31:59 +0100</pubDate><guid>https://blog.zero-iee.com/en/posts/multi-tenant-wireguard-vpn-server/</guid><description>&lt;p>The &lt;a href="https://www.zero-iee.com/de/products/">ZERO AMPS Nodes&lt;/a> do not have an internet connection by default, but in some cases we equip them with a mobile module so that we can update, maintain or troubleshoot them remotely.&lt;/p>
&lt;p>To establish a secure connection to our own infrastructure, we mostly use &lt;a href="https://www.wireguard.com">Wireguard&lt;/a> VPNs. Wireguard VPNs are very lightweight, perform well and experience has shown them to be very robust - especially in combination with mobile connections. The Wireguard client on the AMPS nodes connects to our central VPN server. Our developers also use this to establish a connection so that they can connect to the respective AMPS node.&lt;/p>
&lt;p>However, as we have different customers with projects of different sizes and do not want to compromise on data security, we have separated our VPN networks according to customer and project:&lt;/p>
&lt;p>Customer A will never be able to come into contact with customer B&amp;rsquo;s devices - this is ensured by the individual VPN networks and our firewall rules, which restrict data traffic within the VPNs and beyond. It is essential to prevent a compromised device from gaining control over all nodes, including those belonging to other customers.&lt;/p>
&lt;p>As a rule, it is therefore not possible for a node to communicate from a customer VPN. However, there is one exception: a separate &amp;ldquo;master VPN&amp;rdquo; (&lt;code>mastervpn&lt;/code>) allows our developers to reach devices of &lt;em>all other&lt;/em> VPNs via this VPN. So instead of having to deal with many different Wireguard profiles, it is sufficient for our developers to establish a connection with this one master VPN.&lt;/p>
&lt;p>Our network topology looks something like this:&lt;/p>
&lt;p>&lt;img alt="Networks Graphics" src="https://blog.zero-iee.com/posts/multi-tenant-wireguard-vpn-server/images/wireguard-networks.svg">&lt;/p>
&lt;p>The firewall rules on the VPN server before implementing the security measures:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@vpnserver:~# iptables -L -v
Chain INPUT (policy ACCEPT 0 packets, 0 bytes)
pkts bytes target prot opt in out source destination
Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
pkts bytes target prot opt in out source destination
Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)
pkts bytes target prot opt in out source destination
&lt;/code>&lt;/pre>&lt;p>&lt;em>(The reason for the void: another firewall is located outside the VPN server and is already filtering incoming connections)&lt;/em>&lt;/p>
&lt;p>These rules now had to be expanded so that the following requirements were met:&lt;/p>
&lt;ul>
&lt;li>An AMPS node in one of the wireguard networks may only communicate with other AMPS nodes (or the server interface) of its own VPN subnet.&lt;/li>
&lt;li>A device in the &lt;code>mastervpn&lt;/code> Wiregard network may communicate with &lt;em>any&lt;/em> AMPS nodes in &lt;em>all&lt;/em> Wireguard networks.&lt;/li>
&lt;/ul>
&lt;p>To enable communication / packet forwarding across network boundaries (e.g. &lt;code>mastervpn&lt;/code> =&amp;gt; &lt;code>customer1-vpn&lt;/code> or &lt;code>mastervpn&lt;/code> =&amp;gt; &lt;code>customer2-vpn&lt;/code>), IPv4 forwarding must first be activated in the Linux kernel. Temporarily via&lt;/p>
&lt;pre>&lt;code>sysctl -w net.ipv4.ip_forward=1
&lt;/code>&lt;/pre>
&lt;p>&amp;hellip; or permanently by adjusting the file &lt;code>/etc/sysctl.conf&lt;/code>:&lt;/p>
&lt;pre>&lt;code>net.ipv4.ip_forward=1
&lt;/code>&lt;/pre>
&lt;p>Followed by a&lt;/p>
&lt;pre>&lt;code>sysctl -p
&lt;/code>&lt;/pre>
&lt;p>By default, every network interface can now forward data packets to every other network interface. Clients of different Wireguard networks could therefore - if they are configured appropriately on the client side - talk to each other. However, this behavior should &lt;em>not&lt;/em> normally be allowed here. Therefore, the default firewall rule for the &amp;ldquo;FORWARD&amp;rdquo; chain of the &amp;ldquo;Filter&amp;rdquo; table is set to &amp;ldquo;DROP&amp;rdquo;:&lt;/p>
&lt;pre>&lt;code>iptables -P FORWARD DROP
&lt;/code>&lt;/pre>
&lt;p>However, we must allow forwarding in one case - namely in the event that a request is sent from the &lt;code>mastervpn&lt;/code> to one of the customer VPNs. Forwarding was previously activated for this case:&lt;/p>
&lt;pre>&lt;code>iptables -A FORWARD --in-interface mastervpn --out-interface customer1-vpn -j ACCEPT
iptables -A FORWARD --in-interface mastervpn --out-interface customer2-vpn -j ACCEPT
&lt;/code>&lt;/pre>
&lt;p>To enable devices from the relevant customer VPN to respond, another firewall rule is important, which ensures that AMPS nodes from the customer VPN are allowed to send packets to another wireguard network (&lt;code>mastervpn&lt;/code>) in one case. Namely, if it is a response to a previously received request from &lt;code>mastervpn&lt;/code>:&lt;/p>
&lt;pre>&lt;code>iptables -A FORWARD --out-interface mastervpn -m state --state ESTABLISHED,RELATED -j ACCEPT
&lt;/code>&lt;/pre>
&lt;p>So far, we have only looked at the &lt;code>FORWARD&lt;/code> rules. However, one case falls through the cracks: What if a packet does not need to be forwarded but has already reached its destination? This is the case, for example, if the &lt;em>Wireguard Server-IP&lt;/em> of &lt;code>customer2-vpn&lt;/code> is addressed from &lt;code>customer3-vpn&lt;/code>. As the server itself is addressed here - despite the different IP address - no forwarding is used and such communication is not prevented by the previous rules.&lt;/p>
&lt;p>If we want to prevent such requests, an &lt;code>INPUT&lt;/code> rule must be created for each of the VPNs, e.g:&lt;/p>
&lt;pre>&lt;code>iptables -A INPUT -d 10.4.0.1 ! --in-interface mastervpn -j REJECT
iptables -A INPUT -d 10.2.0.1 ! --in-interface customer1-vpn -j REJECT
iptables -A INPUT -d 10.3.0.1 ! --in-interface customer2-vpn -j REJECT
&lt;/code>&lt;/pre>
&lt;p>For example, &lt;code>10.4.0.1&lt;/code> is the IP address that is used within the &lt;code>mastervpn&lt;/code> for the server itself. The same applies to the other two rules for the &lt;code>customer&lt;/code> VPNs.&lt;/p>
&lt;p>Firewall rules after implementing the security measures:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@vpnserver:~# iptables -L -v
Chain INPUT (policy ACCEPT 5621 packets, 1148K bytes)
pkts bytes target prot opt in out source destination
7 588 REJECT all -- !mastervpn any anywhere 10.4.0.1
0 0 REJECT all -- !customer1-vpn any anywhere 10.2.0.1
0 0 REJECT all -- !customer2-vpn any anywhere 10.3.0.1
reject-with icmp-port-unreachable
Chain FORWARD (policy DROP 17 packets, 1428 bytes)
pkts bytes target prot opt in out source destination
2 168 ACCEPT all -- mastervpn customer1-vpn anywhere anywhere
207 17201 ACCEPT all -- mastervpn customer2-vpn anywhere anywhere
38 4692 ACCEPT all -- any mastervpn anywhere anywhere state RELATED,ESTABLISHED
Chain OUTPUT (policy ACCEPT 6708 packets, 1425K bytes)
pkts bytes target prot opt in out source destination
&lt;/code>&lt;/pre>&lt;p>This would pave the way through the firewall for our AMPS customer devices.&lt;/p>
&lt;p>Only one thing is still missing: routing information in the event that someone accesses one of the AMPS nodes in the &lt;code>customer&lt;/code> VPNs from the &lt;code>mastervpn&lt;/code>. It must be specified where response packets should be sent. Finally, the devices only see one IP address from the mastervpn range, e.g. &lt;code>10.4.0.0/24&lt;/code>. As only routing information for their own subnet is available by default, we have to show them the way to 10.4.0.0/24. To do this, an entry for &lt;code>AllowedIPs&lt;/code> is added in the respective Wireguard configuration on the AMPS node:&lt;/p>
&lt;p>For example&lt;/p>
&lt;pre>&lt;code>AllowedIPs = 10.3.0.0/16
&lt;/code>&lt;/pre>
&lt;p>becomes&lt;/p>
&lt;pre>&lt;code>AllowedIPs = 10.3.0.0/16,10.4.0.0/24
&lt;/code>&lt;/pre>
&lt;p>It is therefore clear to the affected Wireguard client from the customer network that not only packets for its own SU network should be routed via the server, but also (response) packets to the &lt;code>mastervpn&lt;/code> network &lt;code>10.4.0.0/24&lt;/code>.&lt;/p>
&lt;p>After reloading the client configuration using &lt;code>systemctl restart wg-quick@customer1-vpn&lt;/code>, the change is active and the routing information should be available:&lt;/p>
&lt;pre>&lt;code>ip route
&lt;/code>&lt;/pre>
&lt;p>&lt;em>Note: The above iptables settings are &lt;strong>not&lt;/strong> persistent! To restore them after a reboot, we recommend persisting iptables rules using &lt;code>netfilter-persistent&lt;/code>.&lt;/em>&lt;/p></description></item><item><title>Prevent DSI output errors when starting a Qt application (Raspberry Pi)</title><link>https://blog.zero-iee.com/en/posts/resolving-qt-dsi-failed-to-move-flip-permission-denied-error/</link><pubDate>Tue, 26 Sep 2023 09:39:39 +0200</pubDate><guid>https://blog.zero-iee.com/en/posts/resolving-qt-dsi-failed-to-move-flip-permission-denied-error/</guid><description>&lt;p>Yesterday, while completing some of our AMPS units with display and Qt application, we encountered an error that caused the application to fail to launch correctly and crash in rare cases. The error looks like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>-- Logs begin at Mon 2023-09-25 12:17:01 CEST, end at Mon 2023-09-25 12:32:43 CEST. --
Sep 25 12:32:24 0601-010200-0012 systemd[1]: Started app.
Sep 25 12:32:27 0601-010200-0012 tester[444]: Failed to move cursor on screen DSI1: -13
Sep 25 12:32:27 0601-010200-0012 tester[444]: Failed to move cursor on screen DSI1: -13
Sep 25 12:32:27 0601-010200-0012 tester[444]: Could not set cursor on screen DSI1: -13
Sep 25 12:32:28 0601-010200-0012 tester[444]: Could not set DRM mode for screen DSI1 (Permission denied)
Sep 25 12:32:28 0601-010200-0012 tester[444]: Could not queue DRM page flip on screen DSI1 (Permission denied)
Sep 25 12:32:29 0601-010200-0012 tester[444]: Could not queue DRM page flip on screen DSI1 (Permission denied)
&lt;/code>&lt;/pre>&lt;p>&amp;ldquo;In rare cases&amp;rdquo;, because the bug was apparently timing-dependent. However, because we were not completely unaware of the error messages, we were able to find out relatively quickly where they were coming from:&lt;/p>
&lt;p>Our application runs in EGLFS mode and claims complete control over the display. There is no XServer, Wayland or similar running in the background. The error messages indicate a permission problem, but actually come from the fact that another application is already exerting control over the display.&lt;/p>
&lt;p>In our case: The boot splash screen (&lt;code>plymouth&lt;/code>) of our Rasbian distribution. The error occurs only about 1-2 times out of 10, because in most cases systemd starts the application at a time when the display has already been released. Depending on the boot time - which can vary slightly - it can happen that the timing is so unfavorable that the splash screen has &lt;em>not&lt;/em> released the display when our application already wants to use it.&lt;/p>
&lt;p>Fortunately, this problem can be solved by adding another dependency to the systemd service of our application via &lt;code>After&lt;/code>, e.g.&lt;/p>
&lt;pre>&lt;code>[Unit]
Description=App
After=systemd-user-sessions.service plymouth-quit.service
[Service]
Type=simple
User=pi
Group=pi
ExecStart=/opt/tester/bin/tester -platform=eglfs
[Install]
WantedBy=multi-user.target
&lt;/code>&lt;/pre>
&lt;p>&lt;em>By the way: In this context, it may also be worthwhile to check whether the user running the application is in the &amp;ldquo;render&amp;rdquo; user group. The group membership is required in order to be allowed to access the display as an application via eglfs at all.&lt;/em>&lt;/p></description></item><item><title>Setting up a lab network on Linux</title><link>https://blog.zero-iee.com/en/posts/labornetzwerk/</link><pubDate>Fri, 21 Jul 2023 13:55:47 +0200</pubDate><guid>https://blog.zero-iee.com/en/posts/labornetzwerk/</guid><description>&lt;p>During my work, I regularly connect to various computers and embedded devices that are accessible via an Ethernet connection. These could now be connected directly - like the development computer - to the company network&amp;hellip;&lt;/p>
&lt;p>&amp;hellip; or you can create your own &amp;ldquo;lab network&amp;rdquo; for your devices, which is only accessible from your own laptop and over which you have full control. Advantages can be:&lt;/p>
&lt;ul>
&lt;li>Overview of the connected devices and their IP addresses.&lt;/li>
&lt;li>No exposure of the connected devices to the company network (improvement of security)&lt;/li>
&lt;li>If only Wifi is available at the development computer, the embedded devices can still be reached easily and wired.&lt;/li>
&lt;/ul>
&lt;p>In larger companies, access to the internal company network may also be heavily regulated, so that only unlocked devices can be used at all. With an own small laboratory network on a second network interface, this problem can be elegantly circumvented.&lt;/p>
&lt;h2 id="the-plan" >The plan
&lt;span>
&lt;a href="#the-plan">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>The laboratory network at the network interface &lt;code>ens37&lt;/code> gets the IPv4 network &lt;code>10.0.0.1/24&lt;/code>. IP addresses are assigned between 10.0.0.10 and 10.0.0.254. The own development computer is to act in it as router and DNS resolver and has the IP address &lt;code>10.0.0.1&lt;/code>.&lt;/p>
&lt;p>The network parameters on the lab interface are set statically in the network settings:&lt;/p>
&lt;ul>
&lt;li>IP address: 10.0.0.1&lt;/li>
&lt;li>Netmask: /24 (255.255.255.0)&lt;/li>
&lt;li>Gateway: 10.0.0.1&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>All occurrences of &lt;code>ens37 are to be replaced by the own name of the used network interface! Often for example: &lt;/code>eth1&lt;code>or&lt;/code>enp85s0` or similar!)&lt;/strong>.&lt;/p>
&lt;h2 id="using-dnsmasq-as-dhcp-and-dns-server" >Using Dnsmasq as DHCP and DNS server
&lt;span>
&lt;a href="#using-dnsmasq-as-dhcp-and-dns-server">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>The &lt;code>dnsmasq&lt;/code> server is used to provide a DHCP and DNS server in the laboratory network. DNS is needed if an internet connection is to be used via NAT (see last section).&lt;/p>
&lt;pre>&lt;code>sudo apt install dnsmasq
&lt;/code>&lt;/pre>
&lt;p>In the new configuration file &lt;code>/etc/dnsmasq.d/labnet.conf&lt;/code> dnsmasq is configured:&lt;/p>
&lt;pre>&lt;code># interface to use
interface=ens37
# DHCP settings
dhcp-authoritative
dhcp-range=10.0.0.100,10.0.0.250,255.255.255.0,12h
dhcp-option=option:router,10.0.0.1
dhcp-option=option:dns-server,10.0.0.1
# Always assign the same IP addresses to these hosts
dhcp-host=10:00:00:00:00:01,10.0.0.100
dhcp-host=10:00:00:00:00:01,10.0.0.101
# Upstream DNS resolver
server=127.0.0.53
# Local TLD
domain=lab
local=/lab/
expand-hosts
# Static DNS hostnames in labnet
address=/mydevice-altname.com/10.0.0.101
&lt;/code>&lt;/pre>
&lt;p>&lt;code>interface=ens37&lt;/code> makes the DNS resolver listen only on the network interface &lt;code>ens37&lt;/code>. If you omit the setting, &lt;code>dnsmasq&lt;/code> tries to start a DNS service on the localhost interface as well, which fails on modern Linux distributions, because &lt;code>systemd-resolved&lt;/code> is already running here.&lt;/p>
&lt;p>Subsequently, the DHCP range is defined from which IP addresses are to be distributed to devices in the laboratory network (&lt;code>10.0.0.100 - 10.0.0.250&lt;/code>). This guarantees that an IP address remains valid for at least 12 hours.&lt;/p>
&lt;p>The &lt;code>dhcp-option&lt;/code> settings are used to tell the terminated devices under which IP addresses the default gateway and DNS resolver are located. In both cases, this is the host that runs dnsmasq.&lt;/p>
&lt;p>With &lt;code>dhcp-host&lt;/code> IP addresses for individual network interfaces or devices can be &amp;ldquo;fixed&amp;rdquo;. Thus the device with the MAC address &lt;code>10:00:00:00:0&lt;/code> is always assigned the IP address &lt;code>10.0.0.101&lt;/code>.&lt;/p>
&lt;p>If the devices connected to the laboratory network are to have Internet access (see section &lt;em>&amp;ldquo;Providing a (temporary) Internet connection&amp;rdquo;&lt;/em>), an upstream DNS server must be specified for the dnsmasq instance. Dnsmasq cannot resolve global domain names such as google.com itself and instead falls back on the DNS server stored here. Here it is set to the IP address of the systemd-resolved service that comes with most modern Linux distributions.&lt;/p>
&lt;p>The three following parameters (&lt;code>domain=&lt;/code> etc.) define which top-level domain should be used within the lab network. This is important to be able to tell systemd-resolved later which DNS resolver (namely dnsmasq!) should be used for the lab network.
If you want to manipulate public DNS records or simulate your own virtual ones, you can set one or more &lt;code>address=&lt;/code> parameters. The domain name mentioned in it will then be statically converted to the IP address set behind it (and the upstream DNS server will be bypassed).&lt;/p>
&lt;p>The new config file is still activated at the bottom of the &lt;code>/etc/dnsmasq.conf&lt;/code> file by commenting the following line:&lt;/p>
&lt;pre>&lt;code>conf-dir=/etc/dnsmasq.d/,*.conf
&lt;/code>&lt;/pre>
&lt;p>Last but not least, systemd-resolved is told to automatically resolve domain names ending with &lt;code>.lab&lt;/code> using the dnsmasq server instead of another possibly public DNS server (which of course would not know the names in the lab network). For this purpose, a new systemd service file &lt;code>/etc/system/system/resolved-set-dns-ens37.service&lt;/code> is created:&lt;/p>
&lt;pre>&lt;code>[Unit]
Description=Pper-link DNS configuration for ens37
BindsTo=sys-subsystem-net-devices-ens37.device
After=sys-subsystem-net-devices-ens37.device
[Service]
Type=oneshot
ExecStart=/usr/bin/resolvectl dns ens37 10.0.0.1
ExecStart=/usr/bin/resolvectl domain ens37 ~lab
ExecStopPost=/usr/bin/resolvectl revert ens37
RemainAfterExit=yes
[Install]
WantedBy=sys-subsystem-net-devices-ens37.device
&lt;/code>&lt;/pre>
&lt;p>&lt;em>(the tilde character ~ in front of the &amp;ldquo;lab&amp;rdquo; is important here, so that the DNS server is only used for the named &amp;ldquo;lab&amp;rdquo; top-level domain!)&lt;/em>.&lt;/p>
&lt;p>The new Service is activated by:&lt;/p>
&lt;pre>&lt;code>sudo systemctl daemon-reload
sudo systemctl enable --now resolved-set-dns-ens37
&lt;/code>&lt;/pre>
&lt;p>A&lt;/p>
&lt;pre>&lt;code>sudo resolvectl status
&lt;/code>&lt;/pre>
&lt;p>should show that &amp;ldquo;DNS Servers&amp;rdquo; and &amp;ldquo;DNS Domain&amp;rdquo; are set:&lt;/p>
&lt;pre>&lt;code>Link 3 (ens37)
Aktuelle Bereiche: DNS
DefaultRoute-Einstellung: nein
LLMNR-Einstellung: ja
MulticastDNS-Einstellung: nein
DNSOverTLS-Einstellung: nein
DNSSEC-Einstellung: nein
DNSSEC unterstützt: nein
DNS-Server: 10.0.0.1
DNS-Domäne: ~Labor
&lt;/code>&lt;/pre>
&lt;p>After restarting &lt;code>dnsmasq&lt;/code>, devices that are only plugged into the lab interface will pull an IP address via DHCP and should be reachable from the development computer. Which IP address a device got can be traced in the &lt;code>dnsmasq&lt;/code> log:&lt;/p>
&lt;pre>&lt;code>sudo journalctl -u dnsmasq -f
&lt;/code>&lt;/pre>
&lt;p>If a device with the hostname &lt;code>mydevice&lt;/code> reports to the DHCP server, it can be pinged using the hostname &lt;code>mydevice.lab&lt;/code> for example, or an SSH session can be opened as follows:&lt;/p>
&lt;pre>&lt;code>ssh user@mydevice.lab
&lt;/code>&lt;/pre>
&lt;h2 id="providing-a-temporary-internet-connection" >Providing a (temporary) Internet connection
&lt;span>
&lt;a href="#providing-a-temporary-internet-connection">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>To allow connected devices to find a way to the Internet for software installations and updates, a source NAT can be set up on the development machine. I use a small script for this:&lt;/p>
&lt;pre>&lt;code>#!/bin/bash
EXT_IFACE=ens33 # ens33 = interface to public network
INT_IFACE=ens37 # ens37 = interface to lab network
if [[ &amp;quot;$1&amp;quot; == &amp;quot;start&amp;quot; ]]; then
echo &amp;quot;Starting NAT ...&amp;quot;
sudo sh -c &amp;quot;echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward&amp;quot;
sudo iptables --table nat --append POSTROUTING --out-interface $EXT_IFACE -j MASQUERADE
sudo iptables --append FORWARD --in-interface $INT_IFACE -j ACCEPT
else
echo &amp;quot;Stopping NAT ...&amp;quot;
sudo iptables --table nat --delete POSTROUTING --out-interface $EXT_IFACE -j MASQUERADE
sudo iptables --delete FORWARD --in-interface $INT_IFACE -j ACCEPT
fi
&lt;/code>&lt;/pre>
&lt;p>&lt;em>(Important: Adjust interface names &lt;code>ens33&lt;/code> or &lt;code>ens37&lt;/code> via variables EXT_IFACE and INT_IFACE!)&lt;/em>&lt;/p>
&lt;p>The script is stored under &lt;code>~/.local/bin/natctl&lt;/code> and made known in the PATH:&lt;/p>
&lt;p>&lt;code>~/.bashrc&lt;/code>:&lt;/p>
&lt;pre>&lt;code>export PATH=$PATH:~/.local/bin
&lt;/code>&lt;/pre>
&lt;p>The executable bit on the script is set:&lt;/p>
&lt;pre>&lt;code>chmod u+x ~/.local/bin/natctl
&lt;/code>&lt;/pre>
&lt;p>After a &lt;code>source ~/.bashrc&lt;/code> the &lt;code>natctl&lt;/code> script should be available. With two simple commands the internet connection can then be enabled or disabled:&lt;/p>
&lt;pre>&lt;code>natctl start
natctl stop
&lt;/code>&lt;/pre>
&lt;p>&lt;em>Note: After a reboot, the &lt;code>dnsmasq&lt;/code> server may have to be restarted, since the lab interface may not have had the right IP address for the first startup attempt and this may have failed. If newly connected devices do not get an IP address, it is worthwhile to try a restart via &lt;code>sudo systemctl restart dnsmasq&lt;/code>.&lt;/em>&lt;/p>
&lt;p>&lt;em>Note 2: The NAT function also does not survive a reboot (on purpose). After booting, the NAT must be re-enabled via &lt;code>natctl start&lt;/code>.&lt;/em>&lt;/p></description></item><item><title>Using a Mikroe CAN SPI Click 3v3 Module on a Raspberry Pi 4</title><link>https://blog.zero-iee.com/en/posts/mikroe-can-shield-on-raspberry-pi/</link><pubDate>Tue, 20 Jun 2023 14:31:26 +0200</pubDate><guid>https://blog.zero-iee.com/en/posts/mikroe-can-shield-on-raspberry-pi/</guid><description>&lt;p>Mikroelektronika (MikroE) from Serbia offers within its &amp;ldquo;Click&amp;rdquo; ecosystem numerous function modules that can be operated on microcontrollers. One of them is the &amp;ldquo;&lt;a href="https://www.mikroe.com/can-spi-33v-click">CAN SPI Click 3.3V&lt;/a>&amp;rdquo; CAN controller module, which can be connected via the standardized &amp;ldquo;MikroBus&amp;rdquo; interface or SPI. To make the connection to a Raspberry Pi 4 work, we added the &amp;ldquo;&lt;a href="https://www.mikroe.com/pi-4-click-shield">Pi 4 Click Shield&lt;/a>&amp;rdquo;.&lt;/p>
&lt;p>In this post we will briefly explain how we got the CAN module working in conjunction with the Raspberry Pi 4.&lt;/p>
&lt;p>The CAN SPI Click 3.3V module contains according to &lt;a href="https://www.mikroe.com/can-spi-33v-click">product description&lt;/a> a MCP2515 CAN controller from Microchip. So that the chip can be recognized by its driver, the device tree must be adapted by means of an overlay. A suitable overlay is already on the Raspi stand distribution &amp;ldquo;Raspberry Pi OS&amp;rdquo;, so that the suitable overlay must be activated only.&lt;/p>
&lt;p>For this the configuration file &lt;code>/boot/config.txt&lt;/code> is adapted:&lt;/p>
&lt;pre>&lt;code>[all]
dtoverlay=mcp2515-can0,oscillator=10000000,interrupt=6
&lt;/code>&lt;/pre>
&lt;p>Important are the two parameters &amp;ldquo;oscillator&amp;rdquo; and &amp;ldquo;interrupt&amp;rdquo;:&lt;/p>
&lt;ul>
&lt;li>&lt;code>oscillator&lt;/code> describes the clock frequency of the clock on the CAN module. &lt;a href="https://download.mikroe.com/documents/add-on-boards/click/canspi-33v/can-spi-click-33v-manual-v100.pdf">The schematic&lt;/a> of the module reveals that it is a 10 MHz crystal - so 10,000,000 Hz must be specified here.&lt;/li>
&lt;li>&lt;code>interrupt&lt;/code> describes the GPIO pin of the Raspberry Pi, which transmits an interrupt signal on incoming CAN frames. The INT signal from just mentioned schematic can be traced further through the MicroBus interface to the Pi 4 Click Shield, where it is finally &lt;a href="https://download.mikroe.com/documents/add-on-boards/click/pi_4_click_shield/pi-4-click-shield-click-schematic-v101.pdf">connected to GPIO6 of the Raspberry Pi&lt;/a>. Therefore the value &amp;ldquo;6&amp;rdquo; has to be specified here.&lt;/li>
&lt;/ul>
&lt;p>Continue with the configuration of the CAN network interface. In the new file &lt;code>/etc/network/interfaces.d/can0&lt;/code> the following content is entered:&lt;/p>
&lt;pre>&lt;code>auto can0
iface can0 can static
bitrate 500000
&lt;/code>&lt;/pre>
&lt;p>This sets a bitrate of 500 kBit/s on the CAN interface and starts the interface on boot.&lt;/p>
&lt;p>After a reboot of the Raspberry Pi you should see the following in the kernel messages:&lt;/p>
&lt;pre>&lt;code>pi@raspi:~ $ dmesg | grep mcp
[ 8.239956] mcp251x spi0.0 can0: MCP2515 successfully initialized.
&lt;/code>&lt;/pre>
&lt;p>So the CAN controller has been detected successfully.&lt;/p>
&lt;p>Also an &lt;code>ip link&lt;/code> should now show a CAN interface with the status &amp;ldquo;UP&amp;rdquo;:&lt;/p>
&lt;pre>&lt;code>pi@raspi:~ $ ip link
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc mq state UP mode DEFAULT group default qlen 1000
link/ether e4:5f:01:af:96:bc brd ff:ff:ff:ff:ff:ff
3: wlan0: &amp;lt;BROADCAST,MULTICAST&amp;gt; mtu 1500 qdisc noop state DOWN mode DORMANT group default qlen 1000
link/ether e4:5f:01:af:96:bd brd ff:ff:ff:ff:ff:ff
4: can0: &amp;lt;NOARP,UP,LOWER_UP,ECHO&amp;gt; mtu 16 qdisc pfifo_fast state UP mode DEFAULT group default qlen 10
link/can
&lt;/code>&lt;/pre>
&lt;p>To test the function we can make use of the &lt;code>can-utils&lt;/code> and send a message to the Raspi itself via CAN:&lt;/p>
&lt;pre>&lt;code>sudo apt install can-utils
&lt;/code>&lt;/pre>
&lt;p>In an SSH session the &lt;code>candump&lt;/code> command is started to show all incoming CAN messages:&lt;/p>
&lt;pre>&lt;code>sudo candump can0
&lt;/code>&lt;/pre>
&lt;p>In another SSH session, test data is sent via &lt;code>cansend&lt;/code>:&lt;/p>
&lt;pre>&lt;code>sudo cansend 123#FEFE
&lt;/code>&lt;/pre>
&lt;p>If the message just sent is also visible in the candump window, the CAN bus is working properly.&lt;/p>
&lt;hr>
&lt;p>Sources:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://download.mikroe.com/documents/add-on-boards/click/pi_4_click_shield/pi-4-click-shield-click-schematic-v101.pdf">https://download.mikroe.com/documents/add-on-boards/click/pi_4_click_shield/pi-4-click-shield-click-schematic-v101.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://download.mikroe.com/documents/add-on-boards/click/canspi-33v/can-spi-click-33v-manual-v100.pdf">https://download.mikroe.com/documents/add-on-boards/click/canspi-33v/can-spi-click-33v-manual-v100.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://download.mikroe.com/documents/datasheets/MCP2515.pdf">https://download.mikroe.com/documents/datasheets/MCP2515.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://crycode.de/can-bus-am-raspberry-pi">https://crycode.de/can-bus-am-raspberry-pi&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.beyondlogic.org/adding-can-controller-area-network-to-the-raspberry-pi/">https://www.beyondlogic.org/adding-can-controller-area-network-to-the-raspberry-pi/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Set default DNS resolver for Dnsmasq on Raspbian Buster</title><link>https://blog.zero-iee.com/en/posts/set-default-dns-resolver-for-dnsmasq-on-raspbian-buster/</link><pubDate>Mon, 12 Jun 2023 12:43:53 +0200</pubDate><guid>https://blog.zero-iee.com/en/posts/set-default-dns-resolver-for-dnsmasq-on-raspbian-buster/</guid><description>&lt;p>On one of our Raspberry Pis with Raspbian &amp;ldquo;Buster&amp;rdquo; image we had a strange problem in combination with a USB mobile stick: The Wireguard VPN client could not connect correctly to the Wireguard server again and again when starting the Pi. The error log said that the hostname of the Wireguard server could not be resolved in the client configuration.&lt;/p>
&lt;p>A possible cause for this could be that at the time the Wireguard server was started, the internal DNS resolver of the mobile stick (NAT/router operation) was not yet operational and resolution failed because of this. To confirm the theory and fix the error, a default name server should now be introduced, which is always the same regardless of the network connection and is available immediately.&lt;/p>
&lt;p>Usually the currently used DNS resolver is automatically entered into the file &lt;code>/etc/resolv.conf&lt;/code> by the network management - this is also the case with Raspbian. In most cases, the DNS resolver assigned by the DHCP server of the local network is entered here.&lt;/p>
&lt;p>In our case the setup is a bit more complicated:
Since we run Dnsmasq on the Raspi for other purposes, it has taken control of DNS name resolution and entered itself (127.0.0.1) into &lt;code>/etc/resolv.conf&lt;/code>. However, Dnsmasq itself only takes over the role of a &amp;ldquo;caching DNS resolver&amp;rdquo; - it does not make queries up to the DNS root servers itself, but uses another, external DNS resolver on the side.&lt;/p>
&lt;p>But which DNS resolver is addressed by Dnsmasq?
The answer is not to be found in the Dnsmasq configuration under &lt;code>/etc/dnsmasq&lt;/code> as expected at first. A look at the table of running processes reveals that Dnsmasq was started with the &lt;code>-r&lt;/code> option:&lt;/p>
&lt;pre>&lt;code>$ sudo ps -aux
dnsmasq 647 0.0 0.1 11076 1876 ? S 10:12 0:00 /usr/sbin/dnsmasq -x /run/dnsmasq/dnsmasq.pid -u dnsmasq -r /run/dnsmasq/resolv.conf -7 /etc/dnsmasq.d,.dpkg-dist,
&lt;/code>&lt;/pre>
&lt;p>&lt;code>-r&lt;/code> stands for &lt;code>--resolv-file&lt;/code> and points to a file &lt;code>/run/dnsmasq/resolv.conf&lt;/code> which contains the upstream DNS resolvers Dnsmasq should fall back on.&lt;/p>
&lt;p>A look into the file reveals that the DNS resolver of our ISP has been entered there. The first line indicates that the file is generated by &lt;code>resolvconf&lt;/code>. But how can we put our own default resolver here?&lt;/p>
&lt;p>In StackOverflow answers like &lt;a href="https://unix.stackexchange.com/questions/128220/how-do-i-set-my-dns-when-resolv-conf-is-being-overwritten">this&lt;/a> it is recommended to put the default nameserver in &lt;code>/etc/resolvconf/resolv.conf.d/head&lt;/code> or &lt;code>base&lt;/code>. However, on our target this fails - the directory &lt;code>/etc/resolvconf/resolv.conf.d&lt;/code> cannot be found.&lt;/p>
&lt;p>The reason is that Raspbian &amp;ldquo;Buster&amp;rdquo; uses a different &lt;code>resolvconf&lt;/code> implementation than newer Linux distributions: &lt;code>openresolv&lt;/code>. This does not know a &lt;code>head&lt;/code> or &lt;code>base&lt;/code> file. Nevertheless it is possible to store one or more default resolvers, which are automatically added to the list of resolvers to be used.&lt;/p>
&lt;p>To do this, the configuration file &lt;code>/etc/resolvconf.conf&lt;/code> must be edited and a line such as the following must be added:&lt;/p>
&lt;pre>&lt;code>name_servers=&amp;quot;9.9.9.9&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>Alternatively for multiple servers e.g.&lt;/p>
&lt;pre>&lt;code>name_servers=&amp;quot;9.9.9.9 1.1.1.1 8.8.8.8&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>To apply the changes, Dnsmasq&amp;rsquo;s resolver file &lt;code>/run/dnsmasq/resolv.conf&lt;/code> is regenerated:&lt;/p>
&lt;pre>&lt;code>sudo resolvconf -u /run/dnsmasq/resolv.conf
&lt;/code>&lt;/pre>
&lt;p>A check of the file shows that the default resolver (besides the network specific resolver &lt;code>10.0.0.1&lt;/code>) has been included:&lt;/p>
&lt;pre>&lt;code>nameserver 9.9.9.9
nameserver 10.0.0.1
&lt;/code>&lt;/pre>
&lt;p>In this example, the Quad9 server 9.9.9.9 was included. To check whether this is now actually addressed during a name resolution, the following command can be issued:&lt;/p>
&lt;p>&lt;em>(before possibly &lt;code>apt install dnsutils&lt;/code>)&lt;/em>&lt;/p>
&lt;pre>&lt;code>nslookup -q=txt -class=chaos id.server.on.quad9.net
&lt;/code>&lt;/pre>
&lt;p>The answer should look something like this:&lt;/p>
&lt;pre>&lt;code>;; Warning: Message parser reports malformed message packet.
Server: 127.0.0.1
Address: 127.0.0.1#53
Non-authoritative answer:
id.server.on.quad9.net canonical name = res120.fra.on.quad9.net.
Authoritative answers can be found from:
&lt;/code>&lt;/pre>
&lt;p>It is important that the &amp;ldquo;canonical name&amp;rdquo; ends with &amp;ldquo;quad9.net&amp;rdquo;. If a &amp;ldquo;SERVFAIL&amp;rdquo; response is returned instead, something has gone wrong and the DNS resolver is obviously not active.&lt;/p></description></item><item><title>Using Quectel RM520M and Telit FM990A28 5G Modem with Raspberry Pi OS</title><link>https://blog.zero-iee.com/en/posts/quectel-rm520n-and-telit-fn990a28-5g-modems-on-raspberrypi-os/</link><pubDate>Wed, 31 May 2023 12:44:58 +0200</pubDate><guid>https://blog.zero-iee.com/en/posts/quectel-rm520n-and-telit-fn990a28-5g-modems-on-raspberrypi-os/</guid><description>&lt;p>On our odyssey in search of a 5G cellular modem, we have tried several modems from different manufacturers. Unfortunately, the commissioning was not always successful. Sometimes the driver support in the Linux kernel was completely missing - sometimes the control via NetworkManager / ModemManager was buggy or not possible at all.&lt;/p>
&lt;p>Easy commissioning and stable operation are important to us. Since we do not want to use the modems on only a few devices, a manual adaptation of the Linux kernel is usually out of the question for us. The effort involved is too great and the consequences for the further life cycle of a product are too unclear. Therefore, the operating system - often a Raspberry Pi OS - should be used in its factory state and without major adjustments, if possible.&lt;/p>
&lt;p>&lt;strong>Two modems have emerged for us that work &amp;ldquo;out of the box&amp;rdquo; in combination with the current &lt;a href="https://www.raspberrypi.com/software/operating-systems/">Raspberry Pi OS&lt;/a> on Debian 11 &amp;ldquo;Bullseye&amp;rdquo; basis (kernel 6.1):&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://www.quectel.com/product/5g-rm520n-gl">Quectel RM520N&lt;/a>&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://www.telit.com/devices/fn990axx/">Telit FM990A28&lt;/a>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>both 5G modems support not only the currently widespread &amp;ldquo;5G New Radio&amp;rdquo; with LTE Control Plane (NSA), but also 5G NR Standalone (SA), so that with a corresponding expansion stage of the 5G mobile network can also benefit from extremely lower latencies.&lt;/p>
&lt;h2 id="hardware-setup" >Hardware Setup
&lt;span>
&lt;a href="#hardware-setup">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Out hardware setup is as follows:&lt;/p>
&lt;ul>
&lt;li>Raspberry Pi CM4&lt;/li>
&lt;li>&lt;a href="https://www.waveshare.com/wiki/CM4-DUAL-ETH-4G/5G-BASE">Waveshare Dual Ethernet IoT Base Board&lt;/a> (with M.2 Slot)&lt;/li>
&lt;li>Telit FM990A28 M.2 Modul &lt;em>or&lt;/em>&lt;/li>
&lt;li>Quectel RM520N&lt;/li>
&lt;li>IoT SIM card of Deutsche Telekom&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://blog.zero-iee.com/posts/quectel-rm520n-and-telit-fn990a28-5g-modems-on-raspberrypi-os/images/waveshare-board.jpg">&lt;figcaption>
&lt;h4>Waveshare Board with Quectel 5G Modem&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;h2 id="commissioning" >Commissioning
&lt;span>
&lt;a href="#commissioning">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>The commissioning of our Telit module went as follows: &lt;em>(similar for Quectel!)&lt;/em>&lt;/p>
&lt;p>Check the visibility of the module in the USB subsystem:&lt;/p>
&lt;pre>&lt;code>$ lsusb
&lt;/code>&lt;/pre>
&lt;p>A Telit Device should be visible here:&lt;/p>
&lt;pre>&lt;code>[...]
Bus 002 Device 003: ID 1bc7:1070 Telit Wireless Solutions FN990
[...]
&lt;/code>&lt;/pre>
&lt;p>The ModemManager should also recognize the module:&lt;/p>
&lt;pre>&lt;code>tom@raspberry:~ $ mmcli -L
/org/freedesktop/ModemManager1/Modem/0 [Telit] FN990A28
&lt;/code>&lt;/pre>
&lt;p>Using&lt;/p>
&lt;pre>&lt;code>mmcli -m 0
&lt;/code>&lt;/pre>
&lt;p>some details about the modem can be output - among others, if there is a connection to the mobile network or if a SIM card is assigned.&lt;/p>
&lt;p>In our first attempt, a red &lt;code>sim-missing&lt;/code> was displayed in the &amp;ldquo;Status&amp;rdquo; section, although a SIM card was inserted in the slot of the Waveshare Base IO module. Also attempts with other SIM cards were of no use - no card was detected in the system.&lt;/p>
&lt;h3 id="fix-sim-missing-problem" >Fix &amp;ldquo;SIM Missing&amp;rdquo; problem
&lt;span>
&lt;a href="#fix-sim-missing-problem">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;em>(This problem does not occur with the Quectel modem!)&lt;/em>&lt;/p>
&lt;p>A look into the &lt;a href="https://www.waveshare.com/w/upload/4/46/CM4-DUAL-ETH-4G_5G-BASE_SchDoc.pdf">Schematics of the Waveshare Board&lt;/a> revealed that the signal line (&amp;ldquo;CD&amp;rdquo; - &amp;ldquo;Card detect&amp;rdquo;) for the physical detection of a SIM card in the slot is not continued to the M.2 slot, so that the cellular module &lt;em>cannot&lt;/em> detect a corresponding signal. No wonder, then, that we were permanently shown a &amp;ldquo;&lt;strong>sim-missing&lt;/strong>&amp;rdquo;.&lt;/p>
&lt;figure>&lt;img src="https://blog.zero-iee.com/posts/quectel-rm520n-and-telit-fn990a28-5g-modems-on-raspberrypi-os/images/waveshare-schematics.png">&lt;figcaption>
&lt;h4>Screenshot of the Waveshare Dual Ethernet IoT Base Board&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>The problem can be fixed by configuring the modem to accept a SIM card that is always inserted and to stop performing HotSwap queries. The configuration is done via AT commands within a terminal session with the modem itself:&lt;/p>
&lt;pre>&lt;code>sudo apt install minicom
sudo minicom -D /dev/ttyUSB2
&lt;/code>&lt;/pre>
&lt;p>Issue AT commands - should be acknowledged with &amp;ldquo;OK&amp;rdquo;.&lt;/p>
&lt;pre>&lt;code>AT#HSEN=0,0
AT#HSEN=0,1
&lt;/code>&lt;/pre>
&lt;p>&lt;em>(more precisely, this disables HotSwap for both potential SIM slots supported by the modem)&lt;/em>.&lt;/p>
&lt;p>The Minicom session can be terminated with CTRL-A followed by &amp;ldquo;X&amp;rdquo;.&lt;/p>
&lt;p>For the change to be applied, the Raspi including the modem was rebooted / the power supply was interrupted.&lt;/p>
&lt;p>After a reboot the SIM card was finally recognized in the ModemManager - at the end of the output of &lt;code>mmcli -m 0&lt;/code> a &amp;ldquo;SIM&amp;rdquo; line with the D-Bus path to the SIM device was displayed:&lt;/p>
&lt;pre>&lt;code>SIM | dbus path: /org/freedesktop/ModemManager1/SIM/0
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>The just mentioned adjustment at the Telit modem is not necessary at the Quectel modem!&lt;/strong>&lt;/p>
&lt;p>The next step is to activate the respective modem:&lt;/p>
&lt;pre>&lt;code>mmcli -m 0 --enable
&lt;/code>&lt;/pre>
&lt;h3 id="setting-up-a-connection-using-networkmanager" >Setting up a connection using NetworkManager
&lt;span>
&lt;a href="#setting-up-a-connection-using-networkmanager">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>A new cellular connection is now set up using NetworkManager. To do this, we create a new &amp;ldquo;Connection&amp;rdquo; in the NetworkManager. In the background, this communicates with the ModemManager in order to pass on APN details to it.&lt;/p>
&lt;p>For our telecom card, the following APN information is to be used:&lt;/p>
&lt;ul>
&lt;li>APN: internet.telekom&lt;/li>
&lt;li>IP-Type: ipv4&lt;/li>
&lt;li>Username: telekom&lt;/li>
&lt;li>Password: tm&lt;/li>
&lt;/ul>
&lt;p>The APN information of each provider can be looked up quickly on the Internet.&lt;/p>
&lt;p>Unfortunately, we had no luck with the newer IPv6-enabled APN of Telekom &lt;code>internet.v6.telekom&lt;/code> (and &amp;ldquo;ipv4v6&amp;rdquo;) - we could not establish a connection. Problems in the IPv6 stack of the modem drivers are already known to us. Possibly they come to bear here as well. Therefore we are content with pure IPv4 support for the time being.&lt;/p>
&lt;p>Before the connection can be established, it must be ensured that the NetworkManager is running:&lt;/p>
&lt;pre>&lt;code>systemctl enable --now NetworkManager
&lt;/code>&lt;/pre>
&lt;p>On a stock Raspberry Pi OS image this is not the case. A reboot after the systemctl command can&amp;rsquo;t hurt. In our case, the interaction between the two managers only worked after a reboot.&lt;/p>
&lt;p>Finally, this command creates a new GSM connection in the NetworkManager:&lt;/p>
&lt;pre>&lt;code>mmcli c add type gsm ifname cdc-wdm0 con-name telekom apn internet.telekom connection.autoconnect yes
&lt;/code>&lt;/pre>
&lt;p>In the case of Telekom, the APN &amp;ldquo;internet.telekom&amp;rdquo; including the other parameters is already stored in the SIM profile, so that only the name of the matching APN profile needs to be specified. User name and password can usually be omitted.&lt;/p>
&lt;p>If this does not work, other parameters can be specified as an alternative, e.g.&lt;/p>
&lt;pre>&lt;code>mmcli c add type gsm ifname cdc-wdm0 con-name telekom apn internet.telekom gsm.username telekom gsm.password tm gsm.pin 1234 connection.autoconnect yes
&lt;/code>&lt;/pre>
&lt;p>Especially the specification of a &lt;code>gsm.pin&lt;/code> is important if the SIM card is protected with a PIN. Our SIM is not protected with a PIN, so the specification is omitted.&lt;/p>
&lt;p>A &lt;code>nmcli c&lt;/code> should now show that a new connection &amp;ldquo;telekom&amp;rdquo; has been created. If the connection is marked green, the login to the network has worked:&lt;/p>
&lt;figure>&lt;img src="https://blog.zero-iee.com/posts/quectel-rm520n-and-telit-fn990a28-5g-modems-on-raspberrypi-os/images/networkmanager-ok.png">&lt;figcaption>
&lt;h4>nmcli c&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>The ModemManager should also look similar to this after a short while, showing a &amp;ldquo;connected&amp;rdquo; in the status: &lt;em>(&lt;code>mmcli -m 0&lt;/code>)&lt;/em>&lt;/p>
&lt;figure>&lt;img src="https://blog.zero-iee.com/posts/quectel-rm520n-and-telit-fn990a28-5g-modems-on-raspberrypi-os/images/modemmanager-ok.png">&lt;figcaption>
&lt;h4>mmcli -m 0&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;h3 id="check-function" >Check function
&lt;span>
&lt;a href="#check-function">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Whether the cellular connection is actually working can be quickly and easily checked by pinging the cellular device:&lt;/p>
&lt;pre>&lt;code>ping -I wwan0 1.1.1.1
&lt;/code>&lt;/pre>
&lt;p>Latency typically hovers around &amp;gt;= 25 ms on a 5G NSA network, but can vary greatly. We have observed latencies as high as 600 ms - depending on reception and network load.&lt;/p>
&lt;p>When rebooting the Raspberry Pi, the cellular connection is automatically reestablished.&lt;/p>
&lt;p>By the way: An &lt;code>ip route&lt;/code> reveals that NetworkManager has created a default route for the 5G modem. However, since this has a metric of 700, the cellular modem is only used if a destination cannot be reached over a possible Ethernet connection. So an &lt;code>apt update&lt;/code> and everything else should normally run over an available Ethernet connection. If this is not available, the cellular connection serves as a fallback (hence the &lt;code>-I wwan0&lt;/code> parameter in the &lt;code>ping&lt;/code> command - this forces a connection via cellular).&lt;/p></description></item><item><title>Waveshare 4 Inch display does not work with IO BASE MODULE B</title><link>https://blog.zero-iee.com/en/posts/waveshare-4-inch-display-with-cm4-base-io-b/</link><pubDate>Wed, 26 Apr 2023 14:47:13 +0200</pubDate><guid>https://blog.zero-iee.com/en/posts/waveshare-4-inch-display-with-cm4-base-io-b/</guid><description>&lt;p>Because we had to find out the painful way: The &lt;a href="https://www.waveshare.com/wiki/CM4-IO-BASE-B">Waveshare IO BASE Module B&lt;/a> for the Raspberry Pi CM4 module does &lt;em>not&lt;/em> work with the &lt;a href="https://www.waveshare.com/wiki/4inch_DSI_LCD">4&amp;quot; DSI Touch Display&lt;/a> from Waveshare - at least not as long as you use a BASE IO board revision &amp;lt; 4.&lt;/p>
&lt;p>Only from board version 4 the higher performance DSI1 interface is used instead of the DSI0 interface of the Raspberry CM4 by the IO Base Board.&lt;/p>
&lt;p>The information comes from Waveshare support, which we contacted because of our problems with the display. The change of the DSI port with version 4 of the IO Base Board is &lt;a href="https://www.waveshare.com/wiki/CM4-IO-BASE-B#Version_Introduction">documented&lt;/a>, but unfortunately there is no reference to the missing compatibility to the display anywhere at the moment - so it is documented here &amp;hellip; ;-)&lt;/p></description></item><item><title>Pistache REST API Server Returns Incorrect Responses to Requests</title><link>https://blog.zero-iee.com/en/posts/pistache-rest-api-server-gibt-falsche-daten-zur%C3%BCck/</link><pubDate>Fri, 27 Jan 2023 12:17:09 +0100</pubDate><guid>https://blog.zero-iee.com/en/posts/pistache-rest-api-server-gibt-falsche-daten-zur%C3%BCck/</guid><description>&lt;p>Until a few hours ago we had to deal with a strange bug related to the C++ HTTP library &amp;ldquo;&lt;a href="https://pistacheio.github.io/pistache/">Pistache&lt;/a>&amp;rdquo;, which could not be identified completely at first. Maybe we are not the only ones - so in this post we want to briefly present the setup and our fix.&lt;/p>
&lt;p>The environment consists of a C++ based backend from which data is to be read via a REST API and displayed in a web browser.&lt;/p>
&lt;p>The request of the data from the API is done via a Javascript. We work without a library - quite traditionally using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest">XMLHttpRequest&lt;/a>. Since several different data sets are displayed on the website, several parallel &lt;a href="https://de.wikipedia.org/wiki/Ajax_(programming)">Ajax&lt;/a> requests to the REST API are periodically formulated and transmitted in the background.&lt;/p>
&lt;p>&lt;strong>The problem was that we - seemingly randomly - kept getting Ajax responses back that we had not requested in this context.&lt;/strong> For example, if a request for all available cars was sent, we got the response for the request for all available ships. In parallel, all available ships were also requested in the background - but just not in &lt;em>the&lt;/em> function that was responsible for the cars. It seemed that the answers to HTTP requests were partially mixed.&lt;/p>
&lt;p>The first assumption was that we had a bug in our Javascript and were overwriting variables with each other on simultaneous requests. However, after careful checking and clearly renaming the variables involved, we were able to rule that out.&lt;/p>
&lt;p>A bug in the web browser that caused requests and responses to get mixed up? Unlikely. The problem occurred in both the Chromium and Firefox web browsers.&lt;/p>
&lt;p>Then it had to be the backend. We started to examine the backend more closely. It turned out that the problems only occurred when a certain HTTP handler function was called. This custom function is called by the Pistache library when a request is received. Within the function, the parameters of the request can be checked and processed, and a suitable response can be formulated.&lt;/p>
&lt;p>By gradually commenting out within the function and reducing it to the essentials (namely, sending a suitable response to the web browser), we were finally able to narrow down the problem.&lt;/p>
&lt;p>Within the function there was the following code section:&lt;/p>
&lt;pre tabindex="0">&lt;code>void ApiHandler::getVehicle(const Rest::Request &amp;amp;request, Http::ResponseWriter response){
json j;
[...]
if (myModel-&amp;gt;getType() == &amp;#34;car&amp;#34;) {
[...]
j[&amp;#34;licensePlate&amp;#34;] = car-&amp;gt;getLicensePlate();
j[&amp;#34;owner&amp;#34;] = car-&amp;gt;getOwnerName();
response.send(Http::Code::Ok, j.dump() + &amp;#39;\n&amp;#39;); // Respond with JSON string
} else if (myModel-&amp;gt;getType() == &amp;#34;ship&amp;#34;) {
[...]
j[&amp;#34;homeCountry&amp;#34;] = car-&amp;gt;getHomeCountry();
j[&amp;#34;owner&amp;#34;] = car-&amp;gt;getOwnerName();
response.send(Http::Code::Ok, j.dump() + &amp;#39;\n&amp;#39;); // Respond with JSON string
}
response.send(Http::Code::Unprocessable_Entity);
}
&lt;/code>&lt;/pre>&lt;p>Found the mistake? Quite simple: The intention was to return an &amp;ldquo;Unprocessable_Entity&amp;rdquo; error if the function was executed for a model other than a &amp;ldquo;Car&amp;rdquo; or &amp;ldquo;Ship&amp;rdquo; model. However, an &lt;code>else&lt;/code> was forgotten. Correctly it should be like this:&lt;/p>
&lt;pre tabindex="0">&lt;code> else {
response.send(Http::Code::Unprocessable_Entity);
}
&lt;/code>&lt;/pre>&lt;p>Omitting the &lt;code>else&lt;/code> here is possible in cases where the further processing of the function is stopped by &amp;ldquo;return&amp;rdquo;. But not here - in our case the error leads to &lt;code>response.send&lt;/code> being run twice in most cases.&lt;/p>
&lt;p>The Pistache HTTP server does not seem to be able to cope with this and behaves &lt;em>undefined&lt;/em>. We did not investigate further within the Pistache library, but it seemed worth mentioning that the library behaves unpredictably in such a case and apparently even mixes up responses to concurrent HTTP requests.&lt;/p>
&lt;p>So if you are struggling with an uncontrollably behaving Pistache server, you might want to check your code for duplicate response.send() statements.&lt;/p></description></item><item><title>Qt 5.15.2 with WebEngine (Chromium) - Limit RAM usage to avoid crashes</title><link>https://blog.zero-iee.com/en/posts/qt-5.15.2-mit-webengine-ram-begrenzen/</link><pubDate>Wed, 11 Jan 2023 14:19:06 +0100</pubDate><guid>https://blog.zero-iee.com/en/posts/qt-5.15.2-mit-webengine-ram-begrenzen/</guid><description>&lt;p>When compiling Qt 5.15.2 from the official open source sources, we encountered a problem in combination with our build server: The build process was interrupted while compiling the Chromium-based &amp;ldquo;WebEngine&amp;rdquo; component with initially mysterious error messages. A look at the kernel log using &lt;code>dmesg -w&lt;/code> then quickly revealed that the so-called OOM killer of the Linux kernel had struck. Apparently the RAM consumption of the build process was so memory-intensive that the process had to be aborted to keep the operating system running.&lt;/p>
&lt;p>But how could this be? Our build server has 32 GB of RAM and 24 CPU cores. A quite powerful machine. It should not actually reach its performance limits so quickly.&lt;/p>
&lt;p>The problem is caused by two factors. First, building the Chromium browser engine is extremely memory intensive. Generally, &lt;a href="https://chromium.googlesource.com/chromium/src/+/main/docs/linux/build_instructions.md">not less than 16 GB RAM is recommended&lt;/a>. In our case, however, there is another problem: By default, &amp;ldquo;Ninja&amp;rdquo; - the build system used in Chromium - creates a build thread for each available virtual CPU core, so that the build process is parallelized to the maximum. What may still work well for a standard PC with 16 GB RAM, however, forces our build server with its 24 cores to its knees. Every single thread needs a not to be underestimated amount of RAM. In the end, the ratio of CPU cores and available RAM is no longer correct on our server, so the build process stops.&lt;/p>
&lt;p>The problem can be prevented if we artificially reduce the number of Ninja threads to be used - if we don&amp;rsquo;t build with 24 CPU cores, for example, but only with 18.&lt;/p>
&lt;p>For this purpose the environment variable &lt;code>NINJAJOBS&lt;/code> can be set before a &lt;code>make -j$(nproc)&lt;/code>. Contrary to what one might expect &lt;em>(and contrary to what is described in the &lt;a href="https://www.linuxfromscratch.org/blfs/view/svn/x/qtwebengine.html">LFS manual&lt;/a>)&lt;/em>, however, not just a number is stored here, but the complete &lt;code>-j&lt;/code> &lt;a href="https://manpages.debian.org/testing/ninja-build/ninja.1.en.html">parameter of Ninja&lt;/a>:&lt;/p>
&lt;pre>&lt;code>export NINJAJOBS=&amp;quot;-j16&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>If a &lt;code>make&lt;/code> is subsequently executed, the usual Qt components are compiled with all cores, while the Ninja-based parts (in this case Chromium as part of the WebEngine) are built with fewer CPU cores to conserve RAM.&lt;/p>
&lt;p>For our combination of 32 GB RAM and 24 CPU cores, we experimentally determined a count of 16 kernels with which to still run our build process. With only 8 CPU cores, RAM usage peaked at about 12 GB.&lt;/p></description></item><item><title>Hello World!</title><link>https://blog.zero-iee.com/en/posts/hello-world/</link><pubDate>Tue, 20 Dec 2022 06:08:14 -0800</pubDate><guid>https://blog.zero-iee.com/en/posts/hello-world/</guid><description>&lt;p>Welcome to the Tech Blog of &lt;a href="https://zero-iee.com">ZERO GmbH&lt;/a>!&lt;/p>
&lt;p>Soon we will present here experiences and notes from our technical development, in the hope that they will be helpful for others.&lt;/p></description></item></channel></rss>