<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ZERO GmbH Tech Blog</title><link>https://blog.zero-iee.com/en/</link><description>ZERO GmbH Tech Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 12 Jun 2023 12:43:53 +0200</lastBuildDate><atom:link href="https://blog.zero-iee.com/en/index.xml" rel="self" type="application/rss+xml"/><item><title>Set default DNS resolver for Dnsmasq on Raspbian Buster</title><link>https://blog.zero-iee.com/en/posts/set-default-dns-resolver-for-dnsmasq-on-raspbian-buster/</link><pubDate>Mon, 12 Jun 2023 12:43:53 +0200</pubDate><guid>https://blog.zero-iee.com/en/posts/set-default-dns-resolver-for-dnsmasq-on-raspbian-buster/</guid><description>&lt;p>On one of our Raspberry Pis with Raspbian &amp;ldquo;Buster&amp;rdquo; image we had a strange problem in combination with a USB mobile stick: The Wireguard VPN client could not connect correctly to the Wireguard server again and again when starting the Pi. The error log said that the hostname of the Wireguard server could not be resolved in the client configuration.&lt;/p>
&lt;p>A possible cause for this could be that at the time the Wireguard server was started, the internal DNS resolver of the mobile stick (NAT/router operation) was not yet operational and resolution failed because of this. To confirm the theory and fix the error, a default name server should now be introduced, which is always the same regardless of the network connection and is available immediately.&lt;/p>
&lt;p>Usually the currently used DNS resolver is automatically entered into the file &lt;code>/etc/resolv.conf&lt;/code> by the network management - this is also the case with Raspbian. In most cases, the DNS resolver assigned by the DHCP server of the local network is entered here.&lt;/p>
&lt;p>In our case the setup is a bit more complicated:
Since we run Dnsmasq on the Raspi for other purposes, it has taken control of DNS name resolution and entered itself (127.0.0.1) into &lt;code>/etc/resolv.conf&lt;/code>. However, Dnsmasq itself only takes over the role of a &amp;ldquo;caching DNS resolver&amp;rdquo; - it does not make queries up to the DNS root servers itself, but uses another, external DNS resolver on the side.&lt;/p>
&lt;p>But which DNS resolver is addressed by Dnsmasq?
The answer is not to be found in the Dnsmasq configuration under &lt;code>/etc/dnsmasq&lt;/code> as expected at first. A look at the table of running processes reveals that Dnsmasq was started with the &lt;code>-r&lt;/code> option:&lt;/p>
&lt;pre>&lt;code>$ sudo ps -aux
dnsmasq 647 0.0 0.1 11076 1876 ? S 10:12 0:00 /usr/sbin/dnsmasq -x /run/dnsmasq/dnsmasq.pid -u dnsmasq -r /run/dnsmasq/resolv.conf -7 /etc/dnsmasq.d,.dpkg-dist,
&lt;/code>&lt;/pre>
&lt;p>&lt;code>-r&lt;/code> stands for &lt;code>--resolv-file&lt;/code> and points to a file &lt;code>/run/dnsmasq/resolv.conf&lt;/code> which contains the upstream DNS resolvers Dnsmasq should fall back on.&lt;/p>
&lt;p>A look into the file reveals that the DNS resolver of our ISP has been entered there. The first line indicates that the file is generated by &lt;code>resolvconf&lt;/code>. But how can we put our own default resolver here?&lt;/p>
&lt;p>In StackOverflow answers like &lt;a href="https://unix.stackexchange.com/questions/128220/how-do-i-set-my-dns-when-resolv-conf-is-being-overwritten">this&lt;/a> it is recommended to put the default nameserver in &lt;code>/etc/resolvconf/resolv.conf.d/head&lt;/code> or &lt;code>base&lt;/code>. However, on our target this fails - the directory &lt;code>/etc/resolvconf/resolv.conf.d&lt;/code> cannot be found.&lt;/p>
&lt;p>The reason is that Raspbian &amp;ldquo;Buster&amp;rdquo; uses a different &lt;code>resolvconf&lt;/code> implementation than newer Linux distributions: &lt;code>openresolv&lt;/code>. This does not know a &lt;code>head&lt;/code> or &lt;code>base&lt;/code> file. Nevertheless it is possible to store one or more default resolvers, which are automatically added to the list of resolvers to be used.&lt;/p>
&lt;p>To do this, the configuration file &lt;code>/etc/resolvconf.conf&lt;/code> must be edited and a line such as the following must be added:&lt;/p>
&lt;pre>&lt;code>name_servers=&amp;quot;9.9.9.9&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>Alternatively for multiple servers e.g.&lt;/p>
&lt;pre>&lt;code>name_servers=&amp;quot;9.9.9.9 1.1.1.1 8.8.8.8&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>To apply the changes, Dnsmasq&amp;rsquo;s resolver file &lt;code>/run/dnsmasq/resolv.conf&lt;/code> is regenerated:&lt;/p>
&lt;pre>&lt;code>sudo resolvconf -u /run/dnsmasq/resolv.conf
&lt;/code>&lt;/pre>
&lt;p>A check of the file shows that the default resolver (besides the network specific resolver &lt;code>10.0.0.1&lt;/code>) has been included:&lt;/p>
&lt;pre>&lt;code>nameserver 9.9.9.9
nameserver 10.0.0.1
&lt;/code>&lt;/pre>
&lt;p>In this example, the Quad9 server 9.9.9.9 was included. To check whether this is now actually addressed during a name resolution, the following command can be issued:&lt;/p>
&lt;p>&lt;em>(before possibly &lt;code>apt install dnsutils&lt;/code>)&lt;/em>&lt;/p>
&lt;pre>&lt;code>nslookup -q=txt -class=chaos id.server.on.quad9.net
&lt;/code>&lt;/pre>
&lt;p>The answer should look something like this:&lt;/p>
&lt;pre>&lt;code>;; Warning: Message parser reports malformed message packet.
Server: 127.0.0.1
Address: 127.0.0.1#53
Non-authoritative answer:
id.server.on.quad9.net canonical name = res120.fra.on.quad9.net.
Authoritative answers can be found from:
&lt;/code>&lt;/pre>
&lt;p>It is important that the &amp;ldquo;canonical name&amp;rdquo; ends with &amp;ldquo;quad9.net&amp;rdquo;. If a &amp;ldquo;SERVFAIL&amp;rdquo; response is returned instead, something has gone wrong and the DNS resolver is obviously not active.&lt;/p></description></item><item><title>Using Quectel RM520M and Telit FM990A28 5G Modem with Raspberry Pi OS</title><link>https://blog.zero-iee.com/en/posts/quectel-rm520n-and-telit-fn990a28-5g-modems-on-raspberrypi-os/</link><pubDate>Wed, 31 May 2023 12:44:58 +0200</pubDate><guid>https://blog.zero-iee.com/en/posts/quectel-rm520n-and-telit-fn990a28-5g-modems-on-raspberrypi-os/</guid><description>&lt;p>On our odyssey in search of a 5G cellular modem, we have tried several modems from different manufacturers. Unfortunately, the commissioning was not always successful. Sometimes the driver support in the Linux kernel was completely missing - sometimes the control via NetworkManager / ModemManager was buggy or not possible at all.&lt;/p>
&lt;p>Easy commissioning and stable operation are important to us. Since we do not want to use the modems on only a few devices, a manual adaptation of the Linux kernel is usually out of the question for us. The effort involved is too great and the consequences for the further life cycle of a product are too unclear. Therefore, the operating system - often a Raspberry Pi OS - should be used in its factory state and without major adjustments, if possible.&lt;/p>
&lt;p>&lt;strong>Two modems have emerged for us that work &amp;ldquo;out of the box&amp;rdquo; in combination with the current &lt;a href="https://www.raspberrypi.com/software/operating-systems/">Raspberry Pi OS&lt;/a> on Debian 11 &amp;ldquo;Bullseye&amp;rdquo; basis (kernel 6.1):&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://www.quectel.com/product/5g-rm520n-gl">Quectel RM520N&lt;/a>&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://www.telit.com/devices/fn990axx/">Telit FM990A28&lt;/a>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>both 5G modems support not only the currently widespread &amp;ldquo;5G New Radio&amp;rdquo; with LTE Control Plane (NSA), but also 5G NR Standalone (SA), so that with a corresponding expansion stage of the 5G mobile network can also benefit from extremely lower latencies.&lt;/p>
&lt;h2 id="hardware-setup" >Hardware Setup
&lt;span>
&lt;a href="#hardware-setup">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Out hardware setup is as follows:&lt;/p>
&lt;ul>
&lt;li>Raspberry Pi CM4&lt;/li>
&lt;li>&lt;a href="https://www.waveshare.com/wiki/CM4-DUAL-ETH-4G/5G-BASE">Waveshare Dual Ethernet IoT Base Board&lt;/a> (with M.2 Slot)&lt;/li>
&lt;li>Telit FM990A28 M.2 Modul &lt;em>or&lt;/em>&lt;/li>
&lt;li>Quectel RM520N&lt;/li>
&lt;li>IoT SIM card of Deutsche Telekom&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="images/waveshare-board.jpg"/>&lt;figcaption>
&lt;h4>Waveshare Board with Quectel 5G Modem&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;h2 id="commissioning" >Commissioning
&lt;span>
&lt;a href="#commissioning">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>The commissioning of our Telit module went as follows: &lt;em>(similar for Quectel!)&lt;/em>&lt;/p>
&lt;p>Check the visibility of the module in the USB subsystem:&lt;/p>
&lt;pre>&lt;code>$ lsusb
&lt;/code>&lt;/pre>
&lt;p>A Telit Device should be visible here:&lt;/p>
&lt;pre>&lt;code>[...]
Bus 002 Device 003: ID 1bc7:1070 Telit Wireless Solutions FN990
[...]
&lt;/code>&lt;/pre>
&lt;p>The ModemManager should also recognize the module:&lt;/p>
&lt;pre>&lt;code>tom@raspberry:~ $ mmcli -L
/org/freedesktop/ModemManager1/Modem/0 [Telit] FN990A28
&lt;/code>&lt;/pre>
&lt;p>Using&lt;/p>
&lt;pre>&lt;code>mmcli -m 0
&lt;/code>&lt;/pre>
&lt;p>some details about the modem can be output - among others, if there is a connection to the mobile network or if a SIM card is assigned.&lt;/p>
&lt;p>In our first attempt, a red &lt;code>sim-missing&lt;/code> was displayed in the &amp;ldquo;Status&amp;rdquo; section, although a SIM card was inserted in the slot of the Waveshare Base IO module. Also attempts with other SIM cards were of no use - no card was detected in the system.&lt;/p>
&lt;h3 id="fix-sim-missing-problem" >Fix &amp;ldquo;SIM Missing&amp;rdquo; problem
&lt;span>
&lt;a href="#fix-sim-missing-problem">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;em>(This problem does not occur with the Quectel modem!)&lt;/em>&lt;/p>
&lt;p>A look into the &lt;a href="https://www.waveshare.com/w/upload/4/46/CM4-DUAL-ETH-4G_5G-BASE_SchDoc.pdf">Schematics of the Waveshare Board&lt;/a> revealed that the signal line (&amp;ldquo;CD&amp;rdquo; - &amp;ldquo;Card detect&amp;rdquo;) for the physical detection of a SIM card in the slot is not continued to the M.2 slot, so that the cellular module &lt;em>cannot&lt;/em> detect a corresponding signal. No wonder, then, that we were permanently shown a &amp;ldquo;&lt;strong>sim-missing&lt;/strong>&amp;rdquo;.&lt;/p>
&lt;figure>&lt;img src="images/waveshare-schematics.png"/>&lt;figcaption>
&lt;h4>Screenshot of the Waveshare Dual Ethernet IoT Base Board&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>The problem can be fixed by configuring the modem to accept a SIM card that is always inserted and to stop performing HotSwap queries. The configuration is done via AT commands within a terminal session with the modem itself:&lt;/p>
&lt;pre>&lt;code>sudo apt install minicom
sudo minicom -D /dev/ttyUSB2
&lt;/code>&lt;/pre>
&lt;p>Issue AT commands - should be acknowledged with &amp;ldquo;OK&amp;rdquo;.&lt;/p>
&lt;pre>&lt;code>AT#HSEN=0,0
AT#HSEN=0,1
&lt;/code>&lt;/pre>
&lt;p>&lt;em>(more precisely, this disables HotSwap for both potential SIM slots supported by the modem)&lt;/em>.&lt;/p>
&lt;p>The Minicom session can be terminated with CTRL-A followed by &amp;ldquo;X&amp;rdquo;.&lt;/p>
&lt;p>For the change to be applied, the Raspi including the modem was rebooted / the power supply was interrupted.&lt;/p>
&lt;p>After a reboot the SIM card was finally recognized in the ModemManager - at the end of the output of &lt;code>mmcli -m 0&lt;/code> a &amp;ldquo;SIM&amp;rdquo; line with the D-Bus path to the SIM device was displayed:&lt;/p>
&lt;pre>&lt;code>SIM | dbus path: /org/freedesktop/ModemManager1/SIM/0
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>The just mentioned adjustment at the Telit modem is not necessary at the Quectel modem!&lt;/strong>&lt;/p>
&lt;p>The next step is to activate the respective modem:&lt;/p>
&lt;pre>&lt;code>mmcli -m 0 --enable
&lt;/code>&lt;/pre>
&lt;h3 id="setting-up-a-connection-using-networkmanager" >Setting up a connection using NetworkManager
&lt;span>
&lt;a href="#setting-up-a-connection-using-networkmanager">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>A new cellular connection is now set up using NetworkManager. To do this, we create a new &amp;ldquo;Connection&amp;rdquo; in the NetworkManager. In the background, this communicates with the ModemManager in order to pass on APN details to it.&lt;/p>
&lt;p>For our telecom card, the following APN information is to be used:&lt;/p>
&lt;ul>
&lt;li>APN: internet.telekom&lt;/li>
&lt;li>IP-Type: ipv4&lt;/li>
&lt;li>Username: telekom&lt;/li>
&lt;li>Password: tm&lt;/li>
&lt;/ul>
&lt;p>The APN information of each provider can be looked up quickly on the Internet.&lt;/p>
&lt;p>Unfortunately, we had no luck with the newer IPv6-enabled APN of Telekom &lt;code>internet.v6.telekom&lt;/code> (and &amp;ldquo;ipv4v6&amp;rdquo;) - we could not establish a connection. Problems in the IPv6 stack of the modem drivers are already known to us. Possibly they come to bear here as well. Therefore we are content with pure IPv4 support for the time being.&lt;/p>
&lt;p>Before the connection can be established, it must be ensured that the NetworkManager is running:&lt;/p>
&lt;pre>&lt;code>systemctl enable --now NetworkManager
&lt;/code>&lt;/pre>
&lt;p>On a stock Raspberry Pi OS image this is not the case. A reboot after the systemctl command can&amp;rsquo;t hurt. In our case, the interaction between the two managers only worked after a reboot.&lt;/p>
&lt;p>Finally, this command creates a new GSM connection in the NetworkManager:&lt;/p>
&lt;pre>&lt;code>mmcli c add type gsm ifname cdc-wdm0 con-name telekom apn internet.telekom connection.autoconnect yes
&lt;/code>&lt;/pre>
&lt;p>In the case of Telekom, the APN &amp;ldquo;internet.telekom&amp;rdquo; including the other parameters is already stored in the SIM profile, so that only the name of the matching APN profile needs to be specified. User name and password can usually be omitted.&lt;/p>
&lt;p>If this does not work, other parameters can be specified as an alternative, e.g.&lt;/p>
&lt;pre>&lt;code>mmcli c add type gsm ifname cdc-wdm0 con-name telekom apn internet.telekom gsm.username telekom gsm.password tm gsm.pin 1234 connection.autoconnect yes
&lt;/code>&lt;/pre>
&lt;p>Especially the specification of a &lt;code>gsm.pin&lt;/code> is important if the SIM card is protected with a PIN. Our SIM is not protected with a PIN, so the specification is omitted.&lt;/p>
&lt;p>A &lt;code>nmcli c&lt;/code> should now show that a new connection &amp;ldquo;telekom&amp;rdquo; has been created. If the connection is marked green, the login to the network has worked:&lt;/p>
&lt;figure>&lt;img src="images/networkmanager-ok.png"/>&lt;figcaption>
&lt;h4>nmcli c&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>The ModemManager should also look similar to this after a short while, showing a &amp;ldquo;connected&amp;rdquo; in the status: &lt;em>(&lt;code>mmcli -m 0&lt;/code>)&lt;/em>&lt;/p>
&lt;figure>&lt;img src="images/modemmanager-ok.png"/>&lt;figcaption>
&lt;h4>mmcli -m 0&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;h3 id="check-function" >Check function
&lt;span>
&lt;a href="#check-function">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Whether the cellular connection is actually working can be quickly and easily checked by pinging the cellular device:&lt;/p>
&lt;pre>&lt;code>ping -I wwan0 1.1.1.1
&lt;/code>&lt;/pre>
&lt;p>Latency typically hovers around &amp;gt;= 25 ms on a 5G NSA network, but can vary greatly. We have observed latencies as high as 600 ms - depending on reception and network load.&lt;/p>
&lt;p>When rebooting the Raspberry Pi, the cellular connection is automatically reestablished.&lt;/p>
&lt;p>By the way: An &lt;code>ip route&lt;/code> reveals that NetworkManager has created a default route for the 5G modem. However, since this has a metric of 700, the cellular modem is only used if a destination cannot be reached over a possible Ethernet connection. So an &lt;code>apt update&lt;/code> and everything else should normally run over an available Ethernet connection. If this is not available, the cellular connection serves as a fallback (hence the &lt;code>-I wwan0&lt;/code> parameter in the &lt;code>ping&lt;/code> command - this forces a connection via cellular).&lt;/p></description></item><item><title>Waveshare 4 Inch display does not work with IO BASE MODULE B</title><link>https://blog.zero-iee.com/en/posts/waveshare-4-inch-display-with-cm4-base-io-b/</link><pubDate>Wed, 26 Apr 2023 14:47:13 +0200</pubDate><guid>https://blog.zero-iee.com/en/posts/waveshare-4-inch-display-with-cm4-base-io-b/</guid><description>&lt;p>Because we had to find out the painful way: The &lt;a href="https://www.waveshare.com/wiki/CM4-IO-BASE-B">Waveshare IO BASE Module B&lt;/a> for the Raspberry Pi CM4 module does &lt;em>not&lt;/em> work with the &lt;a href="https://www.waveshare.com/wiki/4inch_DSI_LCD">4&amp;quot; DSI Touch Display&lt;/a> from Waveshare - at least not as long as you use a BASE IO board revision &amp;lt; 4.&lt;/p>
&lt;p>Only from board version 4 the higher performance DSI1 interface is used instead of the DSI0 interface of the Raspberry CM4 by the IO Base Board.&lt;/p>
&lt;p>The information comes from Waveshare support, which we contacted because of our problems with the display. The change of the DSI port with version 4 of the IO Base Board is &lt;a href="https://www.waveshare.com/wiki/CM4-IO-BASE-B#Version_Introduction">documented&lt;/a>, but unfortunately there is no reference to the missing compatibility to the display anywhere at the moment - so it is documented here &amp;hellip; ;-)&lt;/p></description></item><item><title>Pistache REST API Server Returns Incorrect Responses to Requests</title><link>https://blog.zero-iee.com/en/posts/pistache-rest-api-server-gibt-falsche-daten-zur%C3%BCck/</link><pubDate>Fri, 27 Jan 2023 12:17:09 +0100</pubDate><guid>https://blog.zero-iee.com/en/posts/pistache-rest-api-server-gibt-falsche-daten-zur%C3%BCck/</guid><description>&lt;p>Until a few hours ago we had to deal with a strange bug related to the C++ HTTP library &amp;ldquo;&lt;a href="https://pistacheio.github.io/pistache/">Pistache&lt;/a>&amp;rdquo;, which could not be identified completely at first. Maybe we are not the only ones - so in this post we want to briefly present the setup and our fix.&lt;/p>
&lt;p>The environment consists of a C++ based backend from which data is to be read via a REST API and displayed in a web browser.&lt;/p>
&lt;p>The request of the data from the API is done via a Javascript. We work without a library - quite traditionally using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest">XMLHttpRequest&lt;/a>. Since several different data sets are displayed on the website, several parallel &lt;a href="https://de.wikipedia.org/wiki/Ajax_(programming)">Ajax&lt;/a> requests to the REST API are periodically formulated and transmitted in the background.&lt;/p>
&lt;p>&lt;strong>The problem was that we - seemingly randomly - kept getting Ajax responses back that we had not requested in this context.&lt;/strong> For example, if a request for all available cars was sent, we got the response for the request for all available ships. In parallel, all available ships were also requested in the background - but just not in &lt;em>the&lt;/em> function that was responsible for the cars. It seemed that the answers to HTTP requests were partially mixed.&lt;/p>
&lt;p>The first assumption was that we had a bug in our Javascript and were overwriting variables with each other on simultaneous requests. However, after careful checking and clearly renaming the variables involved, we were able to rule that out.&lt;/p>
&lt;p>A bug in the web browser that caused requests and responses to get mixed up? Unlikely. The problem occurred in both the Chromium and Firefox web browsers.&lt;/p>
&lt;p>Then it had to be the backend. We started to examine the backend more closely. It turned out that the problems only occurred when a certain HTTP handler function was called. This custom function is called by the Pistache library when a request is received. Within the function, the parameters of the request can be checked and processed, and a suitable response can be formulated.&lt;/p>
&lt;p>By gradually commenting out within the function and reducing it to the essentials (namely, sending a suitable response to the web browser), we were finally able to narrow down the problem.&lt;/p>
&lt;p>Within the function there was the following code section:&lt;/p>
&lt;pre tabindex="0">&lt;code>void ApiHandler::getVehicle(const Rest::Request &amp;amp;request, Http::ResponseWriter response){
json j;
[...]
if (myModel-&amp;gt;getType() == &amp;#34;car&amp;#34;) {
[...]
j[&amp;#34;licensePlate&amp;#34;] = car-&amp;gt;getLicensePlate();
j[&amp;#34;owner&amp;#34;] = car-&amp;gt;getOwnerName();
response.send(Http::Code::Ok, j.dump() + &amp;#39;\n&amp;#39;); // Respond with JSON string
} else if (myModel-&amp;gt;getType() == &amp;#34;ship&amp;#34;) {
[...]
j[&amp;#34;homeCountry&amp;#34;] = car-&amp;gt;getHomeCountry();
j[&amp;#34;owner&amp;#34;] = car-&amp;gt;getOwnerName();
response.send(Http::Code::Ok, j.dump() + &amp;#39;\n&amp;#39;); // Respond with JSON string
}
response.send(Http::Code::Unprocessable_Entity);
}
&lt;/code>&lt;/pre>&lt;p>Found the mistake? Quite simple: The intention was to return an &amp;ldquo;Unprocessable_Entity&amp;rdquo; error if the function was executed for a model other than a &amp;ldquo;Car&amp;rdquo; or &amp;ldquo;Ship&amp;rdquo; model. However, an &lt;code>else&lt;/code> was forgotten. Correctly it should be like this:&lt;/p>
&lt;pre tabindex="0">&lt;code> else {
response.send(Http::Code::Unprocessable_Entity);
}
&lt;/code>&lt;/pre>&lt;p>Omitting the &lt;code>else&lt;/code> here is possible in cases where the further processing of the function is stopped by &amp;ldquo;return&amp;rdquo;. But not here - in our case the error leads to &lt;code>response.send&lt;/code> being run twice in most cases.&lt;/p>
&lt;p>The Pistache HTTP server does not seem to be able to cope with this and behaves &lt;em>undefined&lt;/em>. We did not investigate further within the Pistache library, but it seemed worth mentioning that the library behaves unpredictably in such a case and apparently even mixes up responses to concurrent HTTP requests.&lt;/p>
&lt;p>So if you are struggling with an uncontrollably behaving Pistache server, you might want to check your code for duplicate response.send() statements.&lt;/p></description></item><item><title>Qt 5.15.2 with WebEngine (Chromium) - Limit RAM usage to avoid crashes</title><link>https://blog.zero-iee.com/en/posts/qt-5.15.2-mit-webengine-ram-begrenzen/</link><pubDate>Wed, 11 Jan 2023 14:19:06 +0100</pubDate><guid>https://blog.zero-iee.com/en/posts/qt-5.15.2-mit-webengine-ram-begrenzen/</guid><description>&lt;p>When compiling Qt 5.15.2 from the official open source sources, we encountered a problem in combination with our build server: The build process was interrupted while compiling the Chromium-based &amp;ldquo;WebEngine&amp;rdquo; component with initially mysterious error messages. A look at the kernel log using &lt;code>dmesg -w&lt;/code> then quickly revealed that the so-called OOM killer of the Linux kernel had struck. Apparently the RAM consumption of the build process was so memory-intensive that the process had to be aborted to keep the operating system running.&lt;/p>
&lt;p>But how could this be? Our build server has 32 GB of RAM and 24 CPU cores. A quite powerful machine. It should not actually reach its performance limits so quickly.&lt;/p>
&lt;p>The problem is caused by two factors. First, building the Chromium browser engine is extremely memory intensive. Generally, &lt;a href="https://chromium.googlesource.com/chromium/src/+/main/docs/linux/build_instructions.md">not less than 16 GB RAM is recommended&lt;/a>. In our case, however, there is another problem: By default, &amp;ldquo;Ninja&amp;rdquo; - the build system used in Chromium - creates a build thread for each available virtual CPU core, so that the build process is parallelized to the maximum. What may still work well for a standard PC with 16 GB RAM, however, forces our build server with its 24 cores to its knees. Every single thread needs a not to be underestimated amount of RAM. In the end, the ratio of CPU cores and available RAM is no longer correct on our server, so the build process stops.&lt;/p>
&lt;p>The problem can be prevented if we artificially reduce the number of Ninja threads to be used - if we don&amp;rsquo;t build with 24 CPU cores, for example, but only with 18.&lt;/p>
&lt;p>For this purpose the environment variable &lt;code>NINJAJOBS&lt;/code> can be set before a &lt;code>make -j$(nproc)&lt;/code>. Contrary to what one might expect &lt;em>(and contrary to what is described in the &lt;a href="https://www.linuxfromscratch.org/blfs/view/svn/x/qtwebengine.html">LFS manual&lt;/a>)&lt;/em>, however, not just a number is stored here, but the complete &lt;code>-j&lt;/code> &lt;a href="https://manpages.debian.org/testing/ninja-build/ninja.1.en.html">parameter of Ninja&lt;/a>:&lt;/p>
&lt;pre>&lt;code>export NINJAJOBS=&amp;quot;-j16&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>If a &lt;code>make&lt;/code> is subsequently executed, the usual Qt components are compiled with all cores, while the Ninja-based parts (in this case Chromium as part of the WebEngine) are built with fewer CPU cores to conserve RAM.&lt;/p>
&lt;p>For our combination of 32 GB RAM and 24 CPU cores, we experimentally determined a count of 16 kernels with which to still run our build process. With only 8 CPU cores, RAM usage peaked at about 12 GB.&lt;/p></description></item><item><title>Hello World!</title><link>https://blog.zero-iee.com/en/posts/hello-world/</link><pubDate>Tue, 20 Dec 2022 06:08:14 -0800</pubDate><guid>https://blog.zero-iee.com/en/posts/hello-world/</guid><description>&lt;p>Welcome to the Tech Blog of &lt;a href="https://zero-iee.com">ZERO GmbH&lt;/a>!&lt;/p>
&lt;p>Soon we will present here experiences and notes from our technical development, in the hope that they will be helpful for others.&lt;/p></description></item></channel></rss>