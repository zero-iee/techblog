<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dnsmasq on ZERO GmbH Tech Blog</title><link>https://blog.zero-iee.com/en/tags/dnsmasq/</link><description>ZERO GmbH Tech Blog (Dnsmasq)</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 06 Sep 2024 17:33:54 +0200</lastBuildDate><atom:link href="https://blog.zero-iee.com/en/tags/dnsmasq/index.xml" rel="self" type="application/rss+xml"/><item><title>Dnsmasq does not start because port 53 is busy</title><link>https://blog.zero-iee.com/en/posts/dnsmasq-startup-error-with-systemd-resolved/</link><pubDate>Fri, 06 Sep 2024 17:33:54 +0200</pubDate><guid>https://blog.zero-iee.com/en/posts/dnsmasq-startup-error-with-systemd-resolved/</guid><description>&lt;p>Perhaps some of you have already run into this problem when Dnsmasq was to be used as a separate DNS/DHCP server on a host with an extra network interface:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ sudo systemctl status dnsmasq
[...]
Sep 06 14:32:22 office-gateway dnsmasq[830]: failed to create listening socket for port 53: Address already in use
Sep 06 14:32:22 office-gateway dnsmasq[830]: FAILED to start up
Sep 06 14:32:22 office-gateway systemd[1]: dnsmasq.service: Control process exited, code=exited, status=2/INVALIDARGUMENT
Sep 06 14:32:22 office-gateway systemd[1]: dnsmasq.service: Failed with result &amp;#39;exit-code&amp;#39;.
Sep 06 14:32:22 office-gateway systemd[1]: Failed to start dnsmasq.service - dnsmasq - A lightweight DHCP and caching DNS server.
[...]
&lt;/code>&lt;/pre>&lt;p>The cause was - we thought - quickly clear to us, because the Ubuntu server system in question is already equipped with the local &lt;code>systemd-resolved&lt;/code> resolver, which already performs excellently on port 53. The Dnsmasq service, which in addition to DHCP also wants to offer a DNS service on port 53, can no longer hijack the port.&lt;/p>
&lt;p>We thought that we could avoid the problem by making an exception for the network interfaces, because interfaces that should be ignored can be specified for Dnsmasq via &lt;code>except-interface&lt;/code>. File &lt;code>/etc/dnsmasq.conf&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>except-interface=lo
&lt;/code>&lt;/pre>&lt;p>But that didn&amp;rsquo;t help. The problem still persisted.&lt;/p>
&lt;p>Finally, we found an option in &lt;code>/etc/defaults/dnsmasq&lt;/code> that causes Dnsmasq to ignore all local interfaces:&lt;/p>
&lt;pre tabindex="0">&lt;code># If the resolvconf package is installed, dnsmasq will tell resolvconf
# to use dnsmasq under 127.0.0.1 as the system&amp;#39;s default resolver.
# Uncommenting this line inhibits this behaviour.
DNSMASQ_EXCEPT=&amp;#34;lo&amp;#34;
&lt;/code>&lt;/pre>&lt;p>The option must be commented in - as shown - for it to become active. After restarting the &lt;code>dnsmasq&lt;/code> service, the two DNS services will no longer interfere with each other.
We have also decided to explicitly activate Dnsmasq only on the desired interface. File &lt;code>/etc/dnsmasq.conf&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>interface=enp0s31f6
&lt;/code>&lt;/pre>&lt;p>&lt;em>(this measure alone did not lead to success either - &lt;code>DNSMASQ_EXCEPT=&amp;quot;lo&amp;quot;&lt;/code> seems to be necessary!)&lt;/em>&lt;/p></description></item><item><title>Set default DNS resolver for Dnsmasq on Raspbian Buster</title><link>https://blog.zero-iee.com/en/posts/set-default-dns-resolver-for-dnsmasq-on-raspbian-buster/</link><pubDate>Mon, 12 Jun 2023 12:43:53 +0200</pubDate><guid>https://blog.zero-iee.com/en/posts/set-default-dns-resolver-for-dnsmasq-on-raspbian-buster/</guid><description>&lt;p>On one of our Raspberry Pis with Raspbian &amp;ldquo;Buster&amp;rdquo; image we had a strange problem in combination with a USB mobile stick: The Wireguard VPN client could not connect correctly to the Wireguard server again and again when starting the Pi. The error log said that the hostname of the Wireguard server could not be resolved in the client configuration.&lt;/p>
&lt;p>A possible cause for this could be that at the time the Wireguard server was started, the internal DNS resolver of the mobile stick (NAT/router operation) was not yet operational and resolution failed because of this. To confirm the theory and fix the error, a default name server should now be introduced, which is always the same regardless of the network connection and is available immediately.&lt;/p>
&lt;p>Usually the currently used DNS resolver is automatically entered into the file &lt;code>/etc/resolv.conf&lt;/code> by the network management - this is also the case with Raspbian. In most cases, the DNS resolver assigned by the DHCP server of the local network is entered here.&lt;/p>
&lt;p>In our case the setup is a bit more complicated:
Since we run Dnsmasq on the Raspi for other purposes, it has taken control of DNS name resolution and entered itself (127.0.0.1) into &lt;code>/etc/resolv.conf&lt;/code>. However, Dnsmasq itself only takes over the role of a &amp;ldquo;caching DNS resolver&amp;rdquo; - it does not make queries up to the DNS root servers itself, but uses another, external DNS resolver on the side.&lt;/p>
&lt;p>But which DNS resolver is addressed by Dnsmasq?
The answer is not to be found in the Dnsmasq configuration under &lt;code>/etc/dnsmasq&lt;/code> as expected at first. A look at the table of running processes reveals that Dnsmasq was started with the &lt;code>-r&lt;/code> option:&lt;/p>
&lt;pre>&lt;code>$ sudo ps -aux
dnsmasq 647 0.0 0.1 11076 1876 ? S 10:12 0:00 /usr/sbin/dnsmasq -x /run/dnsmasq/dnsmasq.pid -u dnsmasq -r /run/dnsmasq/resolv.conf -7 /etc/dnsmasq.d,.dpkg-dist,
&lt;/code>&lt;/pre>
&lt;p>&lt;code>-r&lt;/code> stands for &lt;code>--resolv-file&lt;/code> and points to a file &lt;code>/run/dnsmasq/resolv.conf&lt;/code> which contains the upstream DNS resolvers Dnsmasq should fall back on.&lt;/p>
&lt;p>A look into the file reveals that the DNS resolver of our ISP has been entered there. The first line indicates that the file is generated by &lt;code>resolvconf&lt;/code>. But how can we put our own default resolver here?&lt;/p>
&lt;p>In StackOverflow answers like &lt;a href="https://unix.stackexchange.com/questions/128220/how-do-i-set-my-dns-when-resolv-conf-is-being-overwritten">this&lt;/a> it is recommended to put the default nameserver in &lt;code>/etc/resolvconf/resolv.conf.d/head&lt;/code> or &lt;code>base&lt;/code>. However, on our target this fails - the directory &lt;code>/etc/resolvconf/resolv.conf.d&lt;/code> cannot be found.&lt;/p>
&lt;p>The reason is that Raspbian &amp;ldquo;Buster&amp;rdquo; uses a different &lt;code>resolvconf&lt;/code> implementation than newer Linux distributions: &lt;code>openresolv&lt;/code>. This does not know a &lt;code>head&lt;/code> or &lt;code>base&lt;/code> file. Nevertheless it is possible to store one or more default resolvers, which are automatically added to the list of resolvers to be used.&lt;/p>
&lt;p>To do this, the configuration file &lt;code>/etc/resolvconf.conf&lt;/code> must be edited and a line such as the following must be added:&lt;/p>
&lt;pre>&lt;code>name_servers=&amp;quot;9.9.9.9&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>Alternatively for multiple servers e.g.&lt;/p>
&lt;pre>&lt;code>name_servers=&amp;quot;9.9.9.9 1.1.1.1 8.8.8.8&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>To apply the changes, Dnsmasq&amp;rsquo;s resolver file &lt;code>/run/dnsmasq/resolv.conf&lt;/code> is regenerated:&lt;/p>
&lt;pre>&lt;code>sudo resolvconf -u /run/dnsmasq/resolv.conf
&lt;/code>&lt;/pre>
&lt;p>A check of the file shows that the default resolver (besides the network specific resolver &lt;code>10.0.0.1&lt;/code>) has been included:&lt;/p>
&lt;pre>&lt;code>nameserver 9.9.9.9
nameserver 10.0.0.1
&lt;/code>&lt;/pre>
&lt;p>In this example, the Quad9 server 9.9.9.9 was included. To check whether this is now actually addressed during a name resolution, the following command can be issued:&lt;/p>
&lt;p>&lt;em>(before possibly &lt;code>apt install dnsutils&lt;/code>)&lt;/em>&lt;/p>
&lt;pre>&lt;code>nslookup -q=txt -class=chaos id.server.on.quad9.net
&lt;/code>&lt;/pre>
&lt;p>The answer should look something like this:&lt;/p>
&lt;pre>&lt;code>;; Warning: Message parser reports malformed message packet.
Server: 127.0.0.1
Address: 127.0.0.1#53
Non-authoritative answer:
id.server.on.quad9.net canonical name = res120.fra.on.quad9.net.
Authoritative answers can be found from:
&lt;/code>&lt;/pre>
&lt;p>It is important that the &amp;ldquo;canonical name&amp;rdquo; ends with &amp;ldquo;quad9.net&amp;rdquo;. If a &amp;ldquo;SERVFAIL&amp;rdquo; response is returned instead, something has gone wrong and the DNS resolver is obviously not active.&lt;/p></description></item></channel></rss>