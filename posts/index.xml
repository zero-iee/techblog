<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on ZERO GmbH Tech Blog</title><link>https://blog.zero-iee.com/posts/</link><description>ZERO GmbH Tech Blog (Posts)</description><generator>Hugo -- gohugo.io</generator><language>de-de</language><lastBuildDate>Wed, 26 Apr 2023 14:33:50 +0200</lastBuildDate><atom:link href="https://blog.zero-iee.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Waveshare 4 Inch Display funktioniert nicht mit Waveshare CM4 Base IO Module B</title><link>https://blog.zero-iee.com/posts/waveshare-4-inch-display-with-cm4-base-io-b/</link><pubDate>Wed, 26 Apr 2023 14:33:50 +0200</pubDate><guid>https://blog.zero-iee.com/posts/waveshare-4-inch-display-with-cm4-base-io-b/</guid><description>&lt;p>Weil wir es auf die schmerzhafte Weise herausfinden mussten: Das &lt;a href="https://www.waveshare.com/wiki/CM4-IO-BASE-B">Waveshare IO BASE Module B&lt;/a> für das Raspberry Pi CM4 Modul funktioniert &lt;em>nicht&lt;/em> mit dem &lt;a href="https://www.waveshare.com/wiki/4inch_DSI_LCD">4&amp;quot; DSI Touch Display&lt;/a> von Waveshare - zumindest nicht, solange man eine BASE IO Board Revision &amp;lt; 4 verwendet.&lt;/p>
&lt;p>Erst ab Board Version 4 wird die höherperformante DSI1 Schnittstelle statt der DSI0 Schnittstelle des Raspberry CM4 vom IO Base Board genutzt.&lt;/p>
&lt;p>Die Information stammt vom Waveshare-Support, den wir wegen unserer Probleme mit den Display kontaktiert haben. Die Änderung des DSI-Ports mit Version 4 des IO Base Boards ist zwar &lt;a href="https://www.waveshare.com/wiki/CM4-IO-BASE-B#Version_Introduction">dokumentiert&lt;/a>, doch leider befindet sich zum aktuellen Zeitpunkt nirgendwo ein Hinweis auf die fehlende Kompatibilität zum Display - daher sei es hier dokumentiert &amp;hellip; ;-)&lt;/p></description></item><item><title>Waveshare CM4 Dual Gigabit Ethernet 5G/4G Base Board mit Radxa Rock 3 CM3 Compute Module in Betrieb nehmen</title><link>https://blog.zero-iee.com/posts/waveshare-cm4-dual-ethernet-io-board-with-radxa-rock3-cm3/</link><pubDate>Wed, 22 Mar 2023 09:56:25 +0100</pubDate><guid>https://blog.zero-iee.com/posts/waveshare-cm4-dual-ethernet-io-board-with-radxa-rock3-cm3/</guid><description>&lt;p>Da da Raspberry Pi CM4 (&amp;ldquo;Compute Module&amp;rdquo;) seit längerer Zeit wegen der anhaltenden Lieferkettenprobleme schwer und nur in geringen Stückzahlen zu beschaffen ist, haben wir von der ZERO GmbH uns nach einer Alternative umgesehen.&lt;/p>
&lt;p>Obwohl der Name es nicht direkt vermuten lässt, bietet Radxa mit dem &amp;ldquo;&lt;a href="https://wiki.radxa.com/Rock3/CM/CM3">Rock3 CM3&lt;/a>&amp;rdquo; eine weitestgehend Pin-kompatible Alternative zum Raspberry Pi CM4 an. &lt;em>&amp;ldquo;Weitestgehend&amp;rdquo;&lt;/em>, da Radxa über einen zusätzlichen, dritten Sockel weitere Pins für Radxa-spezifische Features anbietet. Weitere Interschiede sind auf &lt;a href="https://wiki.radxa.com/Rock3/CM3/vsCM4">dieser Seite in der Tabelle&lt;/a> zu finden. Dennoch lässt sich das Radxa CM3 Modul hardwareseitig problemlos in ein bestehendes Raspberry Pi CM4 IO-Board einbauen - in unserem Fall ein &lt;a href="https://www.waveshare.com/CM4-DUAL-ETH-4G-5G-BASE.htm">Waveshare Dual Gigabit Ethernet 5G/4G Base Board&lt;/a>.&lt;/p>
&lt;p>Auch wenn die Schnittstelle zwischen CM und Base IO Board nahezu identisch ist - der SoC auf dem Compute Module ist es keinesfalls. Während das CM4 der Raspberry Foundation auf einen Broadcom SoC (BCM2711) setzt, kommt auf dem Radxa Rock3 CM3 ein Rockchip-SoC (RK3566) zum Einsatz. Die Software kann also nicht 1:1 übertragen werden. Ein Raspbian oder Raspberry Pi OS auf dem Rockchip auszuführen, ist also nicht möglich.&lt;/p>
&lt;p>Stattdessen bietet Radxa ein paar für den Rockchip geeignete Betriebssysteme zum Download an. Darunter auch eine Debian 11 (&amp;ldquo;Bullyeye&amp;rdquo;) Version, deren Kernel auf den Rockchip-SoC angepasst ist. Leider kommt die Linux-Distribution mit dem Uraltkernel 4.19 - das soll hier aber erst einmal nicht weiter stören.&lt;/p>
&lt;p>Die &lt;a href="https://wiki.radxa.com/Rock3/downloads">Downloadseite&lt;/a> verweist auf GitHub Releaseseiten. Von dort aus kann die passende Debian-Version heruntergeladen werden. Da wir allerdings nicht das Radxa-eigene IO Board nutzen, sondern das Waveshare IO Board, welches für ein original CM4 konzipiert wurde, ist beim Download Vorsicht geboten: Hier muss die Version für ein &amp;ldquo;RASPCM4IO&amp;rdquo; board heruntergeladen werden. Das Image &lt;code>radxa-cm3-io-debian-bullseye-xfce4-arm64-&amp;lt;VERSION&amp;gt;-gpt.img.xz&lt;/code> ist also das passende (GitHub: &lt;a href="https://github.com/radxa-build/radxa-cm3-io/releases/tag/20221101-0118">Download&lt;/a>).&lt;/p>
&lt;p>Nun aber zu den konkreten Schritten für das Aufspielen des Debian-Images auf den eMMC Flash des Rock3 CM3 - unter Ubuntu Linux als Host. &amp;hellip;&lt;/p>
&lt;h2 id="rkdeveloptool-herunterladen-und-installieren" >rkdeveloptool herunterladen und installieren
&lt;span>
&lt;a href="#rkdeveloptool-herunterladen-und-installieren">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Da wir auf eine SD-Karte verzichten und das OS-Image direkt in den onboard-eMMC Speicher des CM3 schreiben wollen, benötigen wir zunächst das passende Entwicklerwerkzeug von Rockchip, mit dem sich derartige Schreibbvorgänge umsetzen lassen.&lt;/p>
&lt;p>Das passende Tool heißt &lt;code>rkdeveloptool&lt;/code> und kann von GitHub heruntergeladen werden:&lt;/p>
&lt;pre>&lt;code>git clone https://github.com/rockchip-linux/rkdeveloptool.git
&lt;/code>&lt;/pre>
&lt;p>Für den Kompiliervorgang müssen einige Pakete auf dem Host installiert sein:&lt;/p>
&lt;pre>&lt;code>sudo apt-get install build-essential libudev-dev libusb-1.0-0-dev dh-autoreconf
&lt;/code>&lt;/pre>
&lt;p>Danach wird es aus dem Sourcecode kompiliert und installiert:&lt;/p>
&lt;pre>&lt;code>cd rkdeveloptool
autoreconf -i
./configure
make
sudo make install
&lt;/code>&lt;/pre>
&lt;h2 id="os-image-in-emmc-schreiben" >OS-Image in eMMC schreiben
&lt;span>
&lt;a href="#os-image-in-emmc-schreiben">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Nun wird auf dem Waveshare IO Board der &amp;ldquo;Boot&amp;rdquo; Schalter auf &amp;ldquo;on&amp;rdquo; gestellt und das Board mit einem USB-C-Kabel zum Hostrechner verbunden. Ein &lt;code>lsusb&lt;/code> auf der Kommandozeile sollte offenbaren, dass ein Gerät von &amp;ldquo;Fuzhou Rockchip Electronics Company&amp;rdquo; erkannt wurde:&lt;/p>
&lt;pre>&lt;code>Bus 003 Device 005: ID 2207:350a Fuzhou Rockchip Electronics Company
&lt;/code>&lt;/pre>
&lt;p>Nun laden wir uns den Rockchip Loader herunter; eine Softwarekomponente, die in den RAM des SoC geladen wird, sodass wir von dort aus das Debian-Image in den eMMC Flash schreiben können:&lt;/p>
&lt;pre>&lt;code>wget https://dl.radxa.com/rock3/images/loader/rock-3a/rk356x_spl_loader_ddr1056_v1.10.111.bin
&lt;/code>&lt;/pre>
&lt;p>Der Loader wird nun über das rkdeveloptool in den RAM des SoC übertragen:&lt;/p>
&lt;pre>&lt;code>sudo rkdeveloptool db rk356x_spl_loader_ddr1056_v1.10.111.bin
&lt;/code>&lt;/pre>
&lt;p>Nun kann das Debian OS Image von GitHub heruntergeladen und entpackt werden:&lt;/p>
&lt;pre>&lt;code>wget https://github.com/radxa-build/radxa-cm3-io/releases/download/20221101-0118/radxa-cm3-io-debian-bullseye-xfce4-arm64-20221101-0302-gpt.img.xz
xz -d radxa-cm3-io-debian-bullseye-xfce4-arm64-20221101-0302-gpt.img.xz
&lt;/code>&lt;/pre>
&lt;p>Abschließend wird das Debian-Image über den Loader in den eMMC Flash geschrieben:&lt;/p>
&lt;pre>&lt;code>sudo rkdeveloptool wl 0 radxa-cm3-io-debian-bullseye-xfce4-arm64-20221101-0302-gpt.img
&lt;/code>&lt;/pre>
&lt;p>&amp;hellip; und der SoC neu gestartet:&lt;/p>
&lt;pre>&lt;code>sudo rkdeveloptool rd
&lt;/code>&lt;/pre>
&lt;p>Nach dem Neustart sollte auf einem angesteckten HDMI Bildschirm der Bootprozess sichtbar sein. Der &amp;ldquo;Boot&amp;rdquo; Schalter auf dem IO Board kann nun wieder auf &amp;ldquo;off&amp;rdquo; gestellt werden.&lt;/p>
&lt;p>Verbindet man das IO Board via Ethernet mit dem lokalen Netzwerk, ist das Radxa Modul über den Hostnamen &lt;code>radxa-cm3-io&lt;/code> erreichbar:&lt;/p>
&lt;pre>&lt;code>ssh rock@radxa-cm3-io
&lt;/code>&lt;/pre>
&lt;p>Standard-Logindaten sind&lt;/p>
&lt;ul>
&lt;li>Username: &lt;code>rock&lt;/code>&lt;/li>
&lt;li>Password: &lt;code>rock&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="apt-aktualisieren" >APT aktualisieren
&lt;span>
&lt;a href="#apt-aktualisieren">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Direkt nach der Installation konnten wir in unserem konkreten Fall keine Paketupdates für Debian einspielen, da Uhrzeit und Datum noch nicht korrekt eingestellt waren. Das ließ sich mittels&lt;/p>
&lt;pre>&lt;code>sudo systemctl restart ntp.service
&lt;/code>&lt;/pre>
&lt;p>schnell beheben.&lt;/p>
&lt;p>Zudem wurde mindestens ein APT Repository nicht also gültig erkannt, weil ein PGP-Schlüssel nicht aktuell war:&lt;/p>
&lt;pre>&lt;code>$ sudo apt update &amp;amp;&amp;amp; apt upgrade -y
W: GPG error: http://apt.radxa.com/bullseye-stable bullseye InRelease: The following signatures couldn't be verified because the public key is not available: NO_PUBKEY 9B98116C9AA302C7
&lt;/code>&lt;/pre>
&lt;p>Auch dieses Problem ließ sich mit einem einzigen Kommando schnell beseitigen:&lt;/p>
&lt;pre>&lt;code>wget -O - apt.radxa.com/$(lsb_release -c -s)-stable/public.key | sudo apt-key add -
&lt;/code>&lt;/pre>
&lt;p>Danach funktionierte auch ein &lt;code>sudo apt update&lt;/code> wieder einwandfrei.&lt;/p></description></item><item><title>Qt Webengine (Chromium): Too Many Open Files</title><link>https://blog.zero-iee.com/posts/qt-webengine-chromium-too-many-open-files/</link><pubDate>Wed, 08 Feb 2023 10:36:44 +0100</pubDate><guid>https://blog.zero-iee.com/posts/qt-webengine-chromium-too-many-open-files/</guid><description>&lt;p>Wie bereits in früheren Blogposts erwähnt, nutzen wir innerhalb einer Qt Quick Anwendung die Chromium-basierte Qt WebEngine, um Webinhalte darstellen zu lassen. Im Laufe der Entwicklung haben wir allerdings einen unerfreulichen Bug entdeckt, der unsere Anwendung nach einiger Zeit im laufenden Betrieb abstürzen lässt. Zunächst friert das Web-Fenster ein - etwas später folgt dann der Rest der Anwendung, bis die Anwendung schließlich beendet wird.&lt;/p>
&lt;p>In diesem Beitrag stellen wir einen Workaround vor, der für uns funktioniert hat.&lt;/p>
&lt;p>Zunächst galt es, den Ursprung für die Crashes zu ermitteln. Da die Anwendung neben dem WebEngine-Teil auch noch aus anderen, komplexeren Modulen besteht, fiel der Verdacht nicht gleich auf den WebEngine-Anteil. Viel wahrscheinlicher schien zunächst ein klassischer Memory Leak Bug zu sein. Also beispielsweise das neue Erstellen von C++ Objekten, ohne invalide oder nicht mehr benötigte Objekte hinterher zu entfernen und ggf. vorhandene Referenzen zu entfernen.&lt;/p>
&lt;p>Die Fehlermeldung im Qt Creator Log war:&lt;/p>
&lt;pre tabindex="0">&lt;code>[...] ERROR:broker_posix.cc(46) Received unexpected number of handles
[...] ERROR:platform_shared_memory_region_posix.cc(249) Creating shared memory in /dev/shm/.org.chromium.Chromium.Sf3dsf: Too many open files (24)
&lt;/code>&lt;/pre>&lt;p>Hier findet sich schon ein erstes Indiz, dass die Qt WebEngine etwas damit zu tun haben könnte. Dieser Teil unserer Anwendung scheint zu viele File Handles zu öffnen. Der Linux-Kernel verfügt über einen Kontrollmechanismus, der Anwendungen in der Zahl ihrer offenen File Handles beschränkt, sodass Ressourcenprobleme durch Amok-laufende Prozesse unwahrscheinlicher werden. Über das &lt;code>ulimit&lt;/code> Tool lassen sich die aktuell geltenden Einschränkungen einsehen (im Gültigkeitsbereich der Shell).&lt;/p>
&lt;p>Für einzelne Prozesse können die geltenden Limits mittels &lt;code>cat /proc/&amp;lt;PID&amp;gt;/limits&lt;/code> abgerufen werden. Über ein &lt;code>ls -1 /proc/&amp;lt;PID&amp;gt;/fd | wc -l&lt;/code> wird die Anzahl der offenen File Handles für einen Prozess zurückgegeben.&lt;/p>
&lt;p>Für unsere Anwendung lag die Zahl viel zu hoch. Langsam bei ca. 7.000 Handles beginnend entwickelte sich die Zahl der offenen Handles extrem schnell. Nach wenigen Minuten lag sie bereits im sechsstelligen Bereich.&lt;/p>
&lt;p>Je nach Benutzung der Webanwendung stieg die Zahl kaum oder sehr schnell. Vor allem bei intensiverer Benutzung des Web-Anteils der Anwendung stieg die Zahl rasant an. Da unsere WebApp eine beträchtliche Anzahl von Ajax-Requests im Hintergrund an einen REST API Server schickt, fiel der Verdacht zunächst auf offene Verbindungen seitens der Webanwendung. Hatte Chromium einen Bug und hielt Verbindungen aus irgendeinem Grund offen?&lt;/p>
&lt;p>Nach Deaktivierung der meisten Anfragen war schnell klar, dass die Hintergrundanfragen die Zahl der offenen File Handles nicht bedeutend beeinflusste. Alles andere wäre auch tatsächlich ein schwerer Bug in Chrome gewesen. Doch wieso beeinflusste die Benutzung der Webanwendung die Anzahl der offenen Handles dennoch so stark?&lt;/p>
&lt;p>Durch weiteres Experimentieren fanden wir heraus, dass unser Javascript-Code innerhalb der WebApp nichts mit dem Phänomen zu tun hatte. Stattdessen erhöhte sich die Anzahl der File Handles mit jeder visuellen Änderung innerhalb der WebEngine. Änderte sich eine Zahl oder wurde eine Animation aktiviert, schoss der Zähler in die Höhe. Änderte sich nichts auf der dargestellten Website, änderten sich auch die File Handles kaum.&lt;/p>
&lt;p>Hiermit waren wir mit unserem Code also raus. Der Bug lang im Verantwortungsbereich von Chromium, Qt oder Grafiktreiber-Code. Abschließend konnten wir die Ursache mangels Einsicht in die Funktionsweise der involvierten Komponenten nicht klären - Aber nach einigen weiteren Experimenten gelang es uns, unsere Anwendung so anzupassen, dass das Problem nicht mehr auftritt.&lt;/p>
&lt;p>Der Schlüssel war am Ende, in der Qt-Anwendung folgende Einstellung zu setzen:&lt;/p>
&lt;pre tabindex="0">&lt;code>QCoreApplication::setAttribute(Qt::AA_UseSoftwareOpenGL);
&lt;/code>&lt;/pre>&lt;p>Eigentlich bewirkt die &lt;a href="https://doc.qt.io/qt-6/qt.html#ApplicationAttribute-enum">Einstellung&lt;/a>, dass eine softwaregestützte, alternative OpenGL Implementierung genutzt wird. In den meisten Fällen wohl keine besonders attraktive Option. In unserem Fall bewahrt sie uns aber vor den Problemen, die wir mit der Standardeinstellung hatten und verursacht keine weiteren relevanten Nebeneffekte. Die Performance ist für unseren Anwendungsfall okay, sodass wir hiermit leben können.&lt;/p>
&lt;p>Als Ursache bleibt eine Inkompatibilität oder ein Bug zwischen unserem Raspberry Pi 4 Grafiktreiber und/oder Chromium bzw. der Qt WebEngine zu vermuten. Wie sich schon an anderer Stelle herausgestellt hat, kann der Raspberry Pi Grafikstack verwirrend und in bestimmten Konstellationen fehlerbehaftet sein. Das ist allerdings ein &amp;ldquo;Rabbit hole&amp;rdquo; für ein andermal &amp;hellip;&lt;/p></description></item><item><title>Schlechte Qt Grafikperformance mit Raspi4</title><link>https://blog.zero-iee.com/posts/schlechte-qt-grafik-performance-mit-raspi4/</link><pubDate>Tue, 07 Feb 2023 08:19:47 +0100</pubDate><guid>https://blog.zero-iee.com/posts/schlechte-qt-grafik-performance-mit-raspi4/</guid><description>&lt;p>Während der Entwicklung einer Qt-basierten Anwendung auf einem Raspberry Pi 4 (CM) sind wir von der ZERO GmbH vor ein paar Tagen auf ein kurioses Problem gestoßen: Die Anwendung beinhaltet zwei Anwendungsfenster - ein QT Quick Fenster und ein weiteres Fenster, das mittels WebEngine (Chromium) eine Webanwendung darstellt. Die Inhalte in beiden Fenstern wurden während des Debuggings und beim manuellen Starten der Binärdatei aus der Kommandozeile heraus flüssig dargestellt. Bei Animationen und Mausbewegungen konnten wir keine bemerkenswerten Ruckler feststellen.&lt;/p>
&lt;p>Doch nach einem Start während des Boot-Prozesses durch ein Systemd Service-File sah die Sache schon ganz anders aus: Die Darstellung ruckelte stark und die CPU-Auslastung lag bereits bei einfachen Texteinblendungen bei ca 80 %.&lt;/p>
&lt;p>Wir konnten einen Zusammenhang zwischen dem Startzeitpunkt der Anwendung und der Performance feststellen. In frühen Bootphasen war die Performance schlecht - bei späterer Ausführung lief die Anwendung flüssig. Durch ein &amp;ldquo;sleep&amp;rdquo; Kommando in unserem Systemd Service File konnten wir den Zusammenhang verdeutlichen:&lt;/p>
&lt;pre tabindex="0">&lt;code>[Unit]
Description=App
[Service]
User=pi
Group=pi
Type=simple
ExecStart=/bin/bash -c &amp;#39;sleep 10; /opt/myapp/myapp -platform=eglfs&amp;#39;
[Install]
WantedBy=multi-user.target
&lt;/code>&lt;/pre>&lt;p>Alleine schon eine Verzögerung der Ausführung um 10 Sekunden führte zum gewünschten Ergebnis. Dies war jedoch keine Zufriedenstellende Lösung - schließlich wollten wir die Qt-Anwendung so schnell wie möglich starten und nicht unnötig Zeit verlieren, ohne den Grund für das Verhalten zu kennen.&lt;/p>
&lt;p>Ein Blick in das Systemlog offenbarte schließlich, dass unsere Anwendung den LLVMpipe Rasterizer nutze, wenn sie über ein Service-File gestartet wurde:&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;#34;Feb 03 04:33:29 raspberrypi bash[470]: Running on a software rasterizer (LLVMpipe), expect limited performance.&amp;#34;
&lt;/code>&lt;/pre>&lt;p>Letztendlich konnten wir das Performanceproblem nach einigen Websuchen durch ein Hinzufügen unseres &lt;code>pi&lt;/code> Benutzers zur Benutzergruppe &lt;code>render&lt;/code> (und einen Anschließenden Neustart) beheben:&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo usermod -aG render pi
&lt;/code>&lt;/pre>&lt;p>Nach &lt;a href="https://www.hardwareluxx.de/community/threads/raspberry-pi-os-und-ein-paar-fehler-beim-%C3%B6ffnen-eines-programmes.1272595/post-27563953">Aussage des Forennutzers &lt;em>&amp;ldquo;cRaZy-biScuiT&amp;rdquo;&lt;/em>&lt;/a> wird damit ein Bug behoben, der dafür sorgt, dass Anwendungen unter dem &lt;code>pi&lt;/code> User keine hardwarebeschleunigten Anwendungen ausführen können.&lt;/p>
&lt;p>Unsere Qt-Anwendung startete nun auch schon in früheren Bootphasen inkl. Hardwareunterstützung und die Performance war wie erwartet.&lt;/p>
&lt;p>Bisher können wir allerdings nicht erklären, wieso das Problem zu späteren Startzeitpunkten nicht auftrat. Wir vermuten eine externe Beeinflussung evtl. durch später startende, dritte Anwendungen, die dafür sorgte, dass die Hardwarebeschleunigung zu diesen Zeitpunkten dennoch zur Verfügung stand.&lt;/p></description></item><item><title>Pistache REST API Server gibt falsche Antworten auf Anfragen zurück</title><link>https://blog.zero-iee.com/posts/pistache-rest-api-server-gibt-falsche-daten-zur%C3%BCck/</link><pubDate>Fri, 27 Jan 2023 12:17:09 +0100</pubDate><guid>https://blog.zero-iee.com/posts/pistache-rest-api-server-gibt-falsche-daten-zur%C3%BCck/</guid><description>&lt;p>Bis vor wenigen Stunden hatten wir mit einem merkwürdigen Bug im Zusammenhang mit der C++ HTTP Library &amp;ldquo;&lt;a href="https://pistacheio.github.io/pistache/">Pistache&lt;/a>&amp;rdquo; zu tun, der sich zunächst nicht ganz identifizieren ließ. Möglicherweise sind wir nicht die einzigen Betroffenen - deshalb wollen wir in diesem Post kurz das Setup und unseren Fix vorstellen.&lt;/p>
&lt;p>Die Umgebung besteht aus einem C++ basierten Backend, von welchem Daten über eine REST API ausgelesen und in einem Webbrowser dargestellt werden sollen.&lt;/p>
&lt;p>Die Abfrage der Daten von der API erfolgt dabei über ein Javascript heraus. Wir arbeiten ohne Library - ganz traditionell mittels &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest">XMLHttpRequest&lt;/a>. Da einige verschiedene Datensätze auf der Website dargestellt werden, werden im Hintergrund periodisch mehrere parallele &lt;a href="https://de.wikipedia.org/wiki/Ajax_(Programmierung)">Ajax&lt;/a>-Anfragen an die REST API formuliert und übertragen.&lt;/p>
&lt;p>&lt;strong>Das Problem bestand nun darin, dass wir - scheinbar zufällig - immer wieder Ajax-Antworten zurück bekamen, die wir in diesem Kontext gar nicht angefordert hatten.&lt;/strong> Wurde zum Beispiel eine Anfrage nach allen verfügbaren Autos abgeschickt, bekamen wir die Antwort für die Nachfrage nach allen verfügbaren Schiffen. Parallel wurden im Hintergrund zwar auch alle verfügbaren Schiffe angefragt - aber eben nicht in &lt;em>der&lt;/em> Funktion, die für die Autos zuständig war. Es schien, als würden die Antworten zu HTTP-Anfragen teilweise vermischt.&lt;/p>
&lt;p>Die erste Vermutung bestand darin, dass wir einen Fehler in unserem Javascript hatten und bei gleichzeitigen Anfragen Variablen miteinander überschrieben. Nach sorgfältiger Überprüfung und eindeutiger Umbenennung der involvierten Variablen konnten wir das aber ausschließen.&lt;/p>
&lt;p>Ein Bug im Webbrowser, der dafür sorgte, dass Anfragen und Antworten vermischt wurden? Unwahrscheinlich. Das Problem trat sowohl im Chromium- als auch im Firefox Webbrowser auf.&lt;/p>
&lt;p>Dann musste es am Backend liegen. Wir begannen, das Backend genauer zu untersuchen. Dabei stellte sich heraus, dass die Probleme immer nur dann auftraten, wenn eine gewisste HTTP-Handler-Funktion aufgerufen wurde. Diese eigene Funktion wird von der Pistache Library aufgerufen, wenn eine Anfrage eingeht. Innerhalb der Funktion können die Parameter der Anfrage geprüft und verarbeitet sowie eine passende Antwort formuliert werden.&lt;/p>
&lt;p>Durch schrittweises Auskommentieren innerhalb der Funktion und Reduzierung auf das Wesentliche (nämlich das Senden einer passenden Antwort an den Webbrowser) konnten wir das Problem schließlich eingrenzen.&lt;/p>
&lt;p>Innerhalb der Funktion gab es folgenden Code-Abschnitt:&lt;/p>
&lt;pre tabindex="0">&lt;code>void ApiHandler::getVehicle(const Rest::Request &amp;amp;request, Http::ResponseWriter response){
json j;
[...]
if (myModel-&amp;gt;getType() == &amp;#34;car&amp;#34;) {
[...]
j[&amp;#34;licensePlate&amp;#34;] = car-&amp;gt;getLicensePlate();
j[&amp;#34;owner&amp;#34;] = car-&amp;gt;getOwnerName();
response.send(Http::Code::Ok, j.dump() + &amp;#39;\n&amp;#39;); // Respond with JSON string
} else if (myModel-&amp;gt;getType() == &amp;#34;ship&amp;#34;) {
[...]
j[&amp;#34;homeCountry&amp;#34;] = car-&amp;gt;getHomeCountry();
j[&amp;#34;owner&amp;#34;] = car-&amp;gt;getOwnerName();
response.send(Http::Code::Ok, j.dump() + &amp;#39;\n&amp;#39;); // Respond with JSON string
}
response.send(Http::Code::Unprocessable_Entity);
}
&lt;/code>&lt;/pre>&lt;p>Fehler gefunden? Ganz einfach: Die Intention war, einen &amp;ldquo;Unprocessable_Entity&amp;rdquo; Fehler zurückzugeben, wenn die Funktion für ein anderes Modell als ein &amp;ldquo;Car&amp;rdquo; oder &amp;ldquo;Ship&amp;rdquo; Modell ausgeführt wurde. Dabei wurde allerdings ein &lt;code>else&lt;/code> vergessen. Richtig müsste es heißen:&lt;/p>
&lt;pre tabindex="0">&lt;code> else {
response.send(Http::Code::Unprocessable_Entity);
}
&lt;/code>&lt;/pre>&lt;p>Das &lt;code>else&lt;/code> hier wegzulassen ist in Fällen möglich, in denen mittels &amp;ldquo;return&amp;rdquo; die weitere Abarbeitung der Funktion gestoppt wird. Hier aber nicht - in unserem Fall führt der Fehler dazu, dass in den meisten Fällen 2x ein &lt;code>response.send&lt;/code> ausgeführt wird.&lt;/p>
&lt;p>Damit scheint der Pistache HTTP Server nicht zurecht zu kommen und verhält sich &lt;em>undefiniert&lt;/em>. Wir haben innerhalb der Pistache-Library nicht weiter nachgeforscht, allerdings erschien es uns erwähnenswert, dass sich die Library in so einem Fall unvorhersehbar verhält und offenbar sogar Antworten auf gleichzeitige HTTP-Anfragen vermischt.&lt;/p>
&lt;p>Wer also mit einem sich unkontrolliert verhaltenden Pistache Server kämpft, sollte seinen Code ggf. einmal auf doppelte response.send() Anweisungen prüfen.&lt;/p></description></item><item><title>Qt 5.15.2 mit WebEngine (Chromium) bauen - RAM-Verbrauch begrenzen</title><link>https://blog.zero-iee.com/posts/qt-5.15.2-mit-webengine-ram-begrenzen/</link><pubDate>Wed, 11 Jan 2023 14:19:06 +0100</pubDate><guid>https://blog.zero-iee.com/posts/qt-5.15.2-mit-webengine-ram-begrenzen/</guid><description>&lt;p>Beim Kompilieren von Qt 5.15.2 aus den offiziellen Open Source Quellen sind wir in Kombination mit unserem Buildserver auf ein Problem getoßen: Der Buildprozess wurde beim Kompilieren der Chromium-basierten &amp;ldquo;WebEngine&amp;rdquo; Komponente mit zunächst mysteriösen Fehlermeldungen unterbrochen. Ein Blick in das Kernellog mittels &lt;code>dmesg -w&lt;/code> offenbarte dann schnell, dass der sog. OOM-Killer des Linux-Kernels zugeschlagen hatte. Offenbar war der RAM-Verbrauch des Buildprozesses so speicherintensiv, dass der Prozess abgebrochen werden musste, um das Betriebssystem lauffähig zu halten.&lt;/p>
&lt;p>Doch wie konnte das sein? Unser Buildserver verfügt über 32 GB RAM und 24 CPU-Kerne. Eine durchaus leistungsstarke Machine. Sie sollte eigentlich nicht so schnell an Leistungsgrenzen kommen.&lt;/p>
&lt;p>Das Problem wird durch zwei Faktoren verursacht. Zum einen ist das Bauen der Chromium Browser-Engine extrem speicherintensiv. Generell werden &lt;a href="https://chromium.googlesource.com/chromium/src/+/main/docs/linux/build_instructions.md">nicht weniger als 16 GB RAM empfohlen&lt;/a>. In unserem Fall kommt aber noch ein weiteres Problem hinzu: Per default erstellt &amp;ldquo;Ninja&amp;rdquo; - das in Chromium eingesetzte Buildsystem - für jeden verfügbaren virtuellen CPU Core einen Build-Thread, damit der Buildprozess maximal parallelisiert wird. Was für einen haushaltsüblichen PC mit 16 GB RAM noch gut funktionieren mag, zwingt unseren Buildserver mit seinen 24 Cores allerdings in die Knie. Jeder einzelne Thread braucht eine nicht zu unterschätzende Menge RAM. Am Ende stimmt bei unserem Server das Verhältnis aus CPU-Cores und verfügbarem RAM nicht mehr, sodass der Buildvorgang abbricht.&lt;/p>
&lt;p>Das Problem lässt sich verhindern, wenn wir die Anzahl der zu nutzenden Ninja-Threads künstlich verkleinern - wenn wir also nicht mit 24 CPU-Kernen bauen, sondern beispielsweise nur mit 18.&lt;/p>
&lt;p>Dazu kann vor einem &lt;code>make -j$(nproc)&lt;/code> die Umgebungsvariable &lt;code>NINJAJOBS&lt;/code> gesetzt werden. Anders, als man vielleicht vermuten würde &lt;em>(und anders, als es im &lt;a href="https://www.linuxfromscratch.org/blfs/view/svn/x/qtwebengine.html">LFS-Handbuch&lt;/a> beschrieben wird)&lt;/em>, wird hier allerdings nicht einfach nur eine Zahl hinterlegt, sondern der vollständige &lt;code>-j&lt;/code> &lt;a href="https://manpages.debian.org/testing/ninja-build/ninja.1.en.html">Parameter von Ninja&lt;/a>:&lt;/p>
&lt;pre>&lt;code>export NINJAJOBS=&amp;quot;-j16&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>Wird darauf folgend ein &lt;code>make&lt;/code> ausgeführt, werden die üblichen Qt Komponenten mit allen Cores kompiliert, während die Ninja-basierten Anteile (in diesem Fall Chromium als Teil der WebEngine) mit weniger CPU Kernen gebaut werden, um den RAM zu schonen.&lt;/p>
&lt;p>Für unsere Kombination von 32 GB RAM und 24 CPU Cores haben wir experimentell eine Anzahl von 16 Kernel ermittelt, mit denen unser Buildprozess noch durchläuft. Mit nur 8 CPU-Kernen hatte die RAM-Auslastung bei ca 12 GB ihren Peak.&lt;/p></description></item><item><title>Quectel RM520N-GL 5G Mobilfunkmodem unter Ubuntu Linux in Betrieb nehmen</title><link>https://blog.zero-iee.com/posts/quectel-rm520n-gl-5g-modem-unter-ubuntu-linux/</link><pubDate>Mon, 02 Jan 2023 14:20:04 +0100</pubDate><guid>https://blog.zero-iee.com/posts/quectel-rm520n-gl-5g-modem-unter-ubuntu-linux/</guid><description>&lt;p>Um verschiedene 5G Usecases zu demonstrieren, sollte im Rahmen eines Projekts ein 5G-Modem an einem Ubuntu-basierten Mini PC betrieben werden. Hierzu haben wir uns das RM520N-GL von Quectel besorgt.&lt;/p>
&lt;p>Das Modem wird vom Linux-Kernel erst ab Version 6.0 vollständig unterstützt. Die dazugehörigen Patches sind &lt;a href="https://patchwork.kernel.org/project/linux-usb/patch/tencent_23054B863154DC02C6E98E5942416BFC200A@qq.com/">hier (USB &amp;ldquo;option&amp;rdquo; Treiber)&lt;/a> bzw &lt;a href="https://www.spinics.net/lists/linux-usb/msg230835.html">hier (qmi_wwan Treiber)&lt;/a> zu finden.&lt;/p>
&lt;p>Quectel liefert in der Dokumentation zwar auch Hinweise aus, an welchen Stellen die beteffenden Treiber angepasst werden müssen, doch das erwies sich in unserem Fall als fehleranfällig. Leider werden keine fertigen Git-Patches geliefert, sondern nur Code-Snippets in einem PDF-Dokument.&lt;/p>
&lt;p>Einfacher war es, den Ubuntu 22.04.1 LTS Kernel von Version 5.17 auf Version 6.0.1 anzuheben. Dazu muss der Kernel und seine Module nicht unbedingt neu gebaut werden. Canonical stellt bereits vorkompilierte Kernelartefakte in Form von Debian-Paketen zur Verfügung. Diese werden zwar nicht offiziell unterstützt oder mit Updates versorgt, doch für unsere Demonstrationszwecke war das völlig ausreichend.&lt;/p>
&lt;p>Unter &lt;a href="https://kernel.ubuntu.com/~kernel-ppa/mainline/v6.0.1/">https://kernel.ubuntu.com/~kernel-ppa/mainline/v6.0.1/&lt;/a> werden vier wichtige .deb Pakete zum Download angeboten:&lt;/p>
&lt;ul>
&lt;li>&lt;code>amd64/linux-headers-6.0.1-060001-generic_6.0.1-060001.202210120833_amd64.deb&lt;/code>&lt;/li>
&lt;li>&lt;code>amd64/linux-headers-6.0.1-060001_6.0.1-060001.202210120833_all.deb&lt;/code>&lt;/li>
&lt;li>&lt;code>amd64/linux-image-unsigned-6.0.1-060001-generic_6.0.1-060001.202210120833_amd64.deb&lt;/code>&lt;/li>
&lt;li>&lt;code>amd64/linux-modules-6.0.1-060001-generic_6.0.1-060001.202210120833_amd64.deb&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Alle vier Dateien werden heruntergeladen und über den Paketmanager installiert:&lt;/p>
&lt;pre>&lt;code>cd Downloads
sudo dkpg -i ./linux*.deb
&lt;/code>&lt;/pre>
&lt;p>Target neu starten - und fertig! Ein &lt;code>uname -r&lt;/code> sollte jetzt die neue kernelversion zeigen. Und auch die aktualisierten USB- und Netzwerktreiber für das Quectel Modem sollten jetzt den Dienst aufnehmen und die passenden Device Nodes unter /dev anlegen:&lt;/p>
&lt;ul>
&lt;li>&lt;code>/dev/cdc-wdm0&lt;/code>&lt;/li>
&lt;li>&lt;code>/dev/ttyUSB0&lt;/code>&lt;/li>
&lt;li>&lt;code>/dev/ttyUSB1&lt;/code>&lt;/li>
&lt;li>&lt;code>/dev/ttyUSB2&lt;/code>&lt;/li>
&lt;li>&lt;code>/dev/ttyUSB3&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;em>(USB Nodes können je nach angeschlossener Peripherie auch anders nummeriert sein!)&lt;/em>&lt;/p>
&lt;h2 id="eine-verbindung-über-den-networkmanager-und-modemmanager-herstellen" >Eine Verbindung über den NetworkManager und ModemManager herstellen
&lt;span>
&lt;a href="#eine-verbindung-%c3%bcber-den-networkmanager-und-modemmanager-herstellen">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Der &amp;ldquo;schönste&amp;rdquo; Weg führt über die NetworkManager-Integration des ModemManagers. Um zu sehen, ob das Quectel Modem überhaupt als solches vom ModemManager erkannt wurde, kann ein&lt;/p>
&lt;pre>&lt;code>mmcli --modem=0
&lt;/code>&lt;/pre>
&lt;p>ausgeführt werden. Ein paar Informationen zum Modemstatus sollten hier aufgelistet werden.&lt;/p>
&lt;p>Wer eine mit PIN gesicherte SIM-Karte im System nutzt, wird diese zuerst entsperren müssen. Dazu kann über das vorher genannte Kommando zuerst der virtuelle Pfad des SIM-Slots ermittelt werden, z.B.&lt;/p>
&lt;pre>&lt;code>-----------------------------------
SIM | primary sim path: /org/freedesktop/ModemManager1/SIM/0
| sim slot paths: slot 1: /org/freedesktop/ModemManager1/SIM/0 (active)
| slot 2: none
&lt;/code>&lt;/pre>
&lt;p>&amp;hellip; und dann die entsprechende SIM (Index 0) aktiviert werden:&lt;/p>
&lt;pre>&lt;code>mmcli -i=0 --pin=1234
&lt;/code>&lt;/pre>
&lt;p>Wer die SIM permanent entsperrt lassen will, kann die PIN-Sperre entfernen:&lt;/p>
&lt;pre>&lt;code>mmcli -i=0 --pin=1234 --disable-pin
&lt;/code>&lt;/pre>
&lt;p>Sobald die SIM-Karte entsperrt ist, sollte eine Verbindung mit dem Modul möglich sein:&lt;/p>
&lt;pre>&lt;code>nmcli c add type gsm ifname cdc-wdm0 con-name 5g apn internet.telekom
nmcli c up 5g
&lt;/code>&lt;/pre>
&lt;p>Bis sich das Kommando zurückmeldet, können einige Sekunden vergehen. Wir haben hier absichtlich den alten &lt;code>internet.telekom&lt;/code> APN gewählt, weil wir mit dem neueren &amp;ldquo;internet.v6.telekom&amp;rdquo; APN keine Verbindung herstellen konnten. Ursache (noch) unbekannt.&lt;/p>
&lt;h2 id="verbindung-über-das-qmi-network-tool" >Verbindung über das &lt;code>qmi-network&lt;/code> tool
&lt;span>
&lt;a href="#verbindung-%c3%bcber-das-qmi-network-tool">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Statt des Network-/ModemManagers kann für die Verbindungsherstellung auch das &lt;code>qmi-network&lt;/code> Script aus dem &lt;code>libqmi-utils&lt;/code> Paket verwendet werden. Dazu werden in &lt;code>/etc/qmi-network.conf&lt;/code> die richtigen Einstellungen für das Nodem hinterlegt:&lt;/p>
&lt;pre>&lt;code>DEVICE=/dev/cdc-wdm0
DEVICE_OPEN_QMI=YES
PROXY=YES
&lt;/code>&lt;/pre>
&lt;p>Speziell die &lt;code>DEVICE_OPEN_QMI&lt;/code> scheint hier eine wichtige Rolle zu spielen. Anders als in ähnlichen Anleitungen zur Inbetriebnahme von Mobilfunkmodems konnten wir hierauf nicht verzichten.&lt;/p>
&lt;p>Schließlich lässt sich eine Verbindung starten:&lt;/p>
&lt;pre>&lt;code>sudo qmi-network /dev/cdc-wdm0 start
&lt;/code>&lt;/pre>
&lt;p>Allerdings kümmert sich das Script nicht um das Beziehen einer IP-Adresse und der entsprechenden Konfiguration des &lt;code>wwan0&lt;/code> Netzwerkinterfaces. Hier hilft der &lt;code>udhcpc&lt;/code> Client aus dem gleichnamigen Debian-Paket:&lt;/p>
&lt;pre>&lt;code>sudo udhcpc -i wwan0
&lt;/code>&lt;/pre>
&lt;p>Im Idealfall ist nach wenigen Sekunden eine lokale IP-Adresse auf dem &lt;code>wwan0&lt;/code> Interface konfiguriert und lässt eine Kommunikation ins Internet zu:&lt;/p>
&lt;pre>&lt;code>curl ifconfig.me
&lt;/code>&lt;/pre>
&lt;p>zeigt dabei die IP-Adresse an, die für Verbindungen ins Internet aktuell genutzt wird. Es empfiehlt sich, vorher sicherzustellen, dass der Mini-PC über keine Ethernetverbindung ins Internet mehr verfügt. Dazu wird die default-Route zum lokalen Ethernetinterface &lt;code>enp0s29f1&lt;/code> entfernt:&lt;/p>
&lt;pre>&lt;code>sudo ip route del default via 192.168.179.1 dev enp0s29f1
&lt;/code>&lt;/pre>
&lt;p>&lt;em>(kommando anpassen - je nach Output des Kommandos &lt;code>ip route&lt;/code>)&lt;/em>&lt;/p></description></item><item><title>Linux Kernelmodule mit Source-Änderungen neu kompilieren</title><link>https://blog.zero-iee.com/posts/linux-kernelmodule-mit-aenderungen-neu-kompilieren/</link><pubDate>Fri, 23 Dec 2022 09:20:52 +0100</pubDate><guid>https://blog.zero-iee.com/posts/linux-kernelmodule-mit-aenderungen-neu-kompilieren/</guid><description>&lt;p>Wer - wie wir bei der ZERO GmbH - mit neuer Hardware hantiert, die vom Linux-Kernel noch gar nicht oder nur teilweise unterstützt wird, muss in einigen Fällen bestehende Kerneltreiber anpassen. In unserem konkreten Fall ging es dabei um ein 5G Mobilfunkmodem, das vom uns eingesetzten Linux-Kernel noch nicht korrekt als solches erkannt wurde. Die Hardware war mit ihrer USB Vendor- und Product-ID noch nicht in den dazugehörigen Treibern registriert und weitere Detailanpassungen mussten in den betroffenen Subsystemen vorgenommen werden.&lt;/p>
&lt;p>Glücklicherweise lagert die Linuxdistribution Ubuntu die meisten Kerneltreiber in flexibel generierbare Kernelmodule (&lt;code>.ko&lt;/code> Dateien) aus, sodass nicht der gesamte Kernel nach Änderungen neu kompiliert werden muss. Wie Änderungen beispielhaft am USB-Treiber &amp;ldquo;&lt;code>option&lt;/code>&amp;rdquo; durchgeführt werden können, wird im Folgenden erklärt.&lt;/p>
&lt;p>Zunächst einmal wird eine Quelltextkopie des aktuell laufenden Linux-Kernels heruntergeladen. Unter Ubuntu funktioniert das ganz einfach über die Installation des jeweiligen &lt;code>linux-source&lt;/code> Pakets:&lt;/p>
&lt;pre>&lt;code>sudo apt install linux-source
&lt;/code>&lt;/pre>
&lt;p>Die Sourcen liegen nach der Installation unter &lt;code>/usr/src/linux-source-5.15.0.tar.bz2&lt;/code> (Ubuntu 22.04.1) und können in das Home-Directory extrahiert werden:&lt;/p>
&lt;pre>&lt;code>tar -xf /usr/src/linux-source-5.15.0.tar.bz2 -C ~/
&lt;/code>&lt;/pre>
&lt;p>Außerdem werden die Linux Header installiert - passend zur Kernelversion:&lt;/p>
&lt;pre>&lt;code>sudo apt install linux-headers-$(uname -r)
&lt;/code>&lt;/pre>
&lt;p>Damit der Linux-Kernel bzw. seine Module überhaupt gebaut oder konfiguriert werden können, müssen ggf. noch einige weitere Softwarepakete installiert werden:&lt;/p>
&lt;pre>&lt;code>sudo apt install linux-headers-$(uname -r)
sudo apt install build-essential libncurses-dev gawk flex bison libssl-dev dkms libelf-dev libudev-dev libpci-dev libiberty-dev autoconf llvm
&lt;/code>&lt;/pre>
&lt;p>Nach einem Wechsel in das entpackte Source-Verzeichnis wird die Konfiguration des aktuell laufenden Kernels in die Buildumgebung übertragen:&lt;/p>
&lt;pre>&lt;code>cd ~/linux-source-5.15.0/
make oldconfig
&lt;/code>&lt;/pre>
&lt;p>Bevor es an die Änderungen im Sourcecode der Kerneltreiber geht, wird die Buildumgebung noch vorbereitet:&lt;/p>
&lt;pre>&lt;code>make scripts prepare modules_prepare
&lt;/code>&lt;/pre>
&lt;p>An dieser Stelle können nun die nötigen Änderungen am Treiber vorgenommen werden. In unserem Beispiel also unter &lt;code>drivers/usb/serial/option.c&lt;/code>. Sobald die Änderungen gespeichert sind, kann das betroffene Modul oder Subsystem (in diesem Fall &lt;code>usb/serial&lt;/code>) neu gebaut werden:&lt;/p>
&lt;pre>&lt;code>make -C /lib/modules/$(uname -r)/build M=$(pwd)/drivers/usb/serial
&lt;/code>&lt;/pre>
&lt;p>Dabei werden in &lt;code>drivers/usb/serial&lt;/code> neue &lt;code>.ko&lt;/code> Dateien generiert, die nun in das System installiert werden können:&lt;/p>
&lt;pre>&lt;code>sudo cp --backup drivers/usb/serial/option.ko /lib/modules/$(uname -r)/kernel/drivers/usb/serial/option.ko
&lt;/code>&lt;/pre>
&lt;p>Ein abschließendes&lt;/p>
&lt;pre>&lt;code>sudo depmod
&lt;/code>&lt;/pre>
&lt;p>generiert die Kernelmodul-Abhängigkeiten neu, sodass nach einem Neustart des Systems die veränderte Version des Kernelmoduls/-treibers geladen wird.&lt;/p>
&lt;p>Beachtet, dass diese Methode, Änderungen ins System einzupflegen, nicht unbedingt &amp;ldquo;Update-resistent&amp;rdquo; ist. Da wir hier &amp;ldquo;am Paketmanager vorbei arbeiten&amp;rdquo;, ist sich dieser unserer Änderungen nicht bewusst und überschreibt ggf. unsere Modulversion mit einer neuen, von Canonical ausgelieferten Version. Bei Updates des Kernels oder seiner Module ist also Vorsicht geboten. Für kleine proof-of-concepts eignet sich dieser Weg dennoch.&lt;/p></description></item><item><title>Embedded Linux: Video in Endlosschleife auf Framebuffer abspielen mit mplayer</title><link>https://blog.zero-iee.com/posts/embedded-linux-video-auf-framebuffer-abspielen-mplayer/</link><pubDate>Wed, 21 Dec 2022 02:38:26 -0800</pubDate><guid>https://blog.zero-iee.com/posts/embedded-linux-video-auf-framebuffer-abspielen-mplayer/</guid><description>&lt;p>Vor allem für Demozwecke, z.B. auf Messen, fragen Kunden immer wieder nach Displayansteuerungen, die eine Videodatei auf einem oder mehreren Bildschirmen präsentieren. Während sich zum Teil abenteuerliche Lösungen mit Windows und automatisch startenden PowerPoint-Präsentationen mit eingebettetem Video finden lassen, waren wir von ZERO auf der Suche nach einer eleganteren Lösung, die zudem zügig startet und wenig Raum für Fehlbedienung lässt.&lt;/p>
&lt;p>Zentraler Bestandteil in unserem Ubuntu-basierten Setup ist der &lt;code>mplayer&lt;/code> - ein Videoplayer, der seinen Videoutput nicht nur in einer grafischen Desktopumgebung einbetten kann, sondern diesen auch ganz ohne GUI direkt auf den Framebuffer schreiben kann. So können wir auf das Laden einer Xorg- oder Wayland-basierten Desktupumgebung verzichten und beschlenigen den Bootprozess deutlich. Zudem entstehen keine Hürden wie Login oder automatisch startende Applikationen, die das Video verdecken (z.B. der Ubuntu Softwareupdatedienst).&lt;/p>
&lt;p>Der &lt;code>mplayer&lt;/code> kann aus den Standardpaketquellen von Ubuntu bezogen werden:&lt;/p>
&lt;pre>&lt;code>apt update
apt install mplayer
&lt;/code>&lt;/pre>
&lt;p>Nach der Installation wird unter &lt;code>/opt/runvideo.sh&lt;/code> ein Script angelegt, das &lt;code>mplayer&lt;/code> mit einigen Parametern startet:&lt;/p>
&lt;pre tabindex="0">&lt;code>#!/bin/bash
VIDEOFILE=$(find /home/showdisplay/Videos/ -type f -print -quit)
mplayer -vo sdl:driver=fbcon ${VIDEOFILE} -loop 0
&lt;/code>&lt;/pre>&lt;p>In der zweiten Zeile wird die erste Videodatei ermittelt, die sich im Verzeichnis &lt;code>/home/showdisplay/Videos&lt;/code> befindet (nach alphabetischer Reihenfolge). In Zeile 3 passiert dann die eigentliche &lt;code>mplayer&lt;/code>-Magie:&lt;/p>
&lt;ul>
&lt;li>&lt;code>-vo sdl:driver=fbcon&lt;/code>: Video auf dem Framebuffer wiedergeben&lt;/li>
&lt;li>&lt;code>-loop 0&lt;/code>: Das Video in einer Endlosschleife abspielen. &lt;strong>WICHTIG: Dieser Parameter muss an letzter Stelle stehen - sonst startet nicht nur das Video neu, sondern die gesamte &lt;code>mplayer&lt;/code> Instanz. Das führt zu einem deutlichen Flackern beim Neustart. Das Verhalten ist nicht dokumentiert. Deshalb sei hiermit explizit darauf hingewiesen.&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Das Startscript wird nun noch ausführbar gemacht:&lt;/p>
&lt;pre>&lt;code>chmod u+x /opt/runvideo.sh
&lt;/code>&lt;/pre>
&lt;p>&amp;hellip; und eine &lt;code>systemd&lt;/code> Servicedatei wird erstellt, um das Script beim Boot automatisch auszuführen:&lt;/p>
&lt;pre tabindex="0">&lt;code>[Unit]
Description=Run video
ConditionPathExists=/opt/runvideo.sh
[Service]
Type=forking
ExecStart=/opt/runvideo.sh
TimeoutSec=0
StandardOutput=tty
RemainAfterExit=yes
SysVStartPriority=99
[Install]
WantedBy=multi-user.target
&lt;/code>&lt;/pre>&lt;p>Zuletzt wird der neue Service aktiviert:&lt;/p>
&lt;pre>&lt;code>systemctl daemon-reload
systemctl enable runvideo.service
&lt;/code>&lt;/pre>
&lt;p>Da keine GUI benötigt wird (bzw. in diesem Fall sogar stört), wird der Gnome Desktop Manager (GDM) deaktiviert:&lt;/p>
&lt;pre>&lt;code>sudo systemctl disable gdm
&lt;/code>&lt;/pre>
&lt;p>Fertig!&lt;/p>
&lt;p>Sobald der Displaycontroller neu gestartet wird, wird die erste Videodatei aus &lt;code>/home/showdisplay/Videos/&lt;/code> abgespielt - zumindest, solange das Format vom &lt;code>mplayer&lt;/code> unterstützt wird.&lt;/p></description></item><item><title>Hello World!</title><link>https://blog.zero-iee.com/posts/hello-world/</link><pubDate>Tue, 20 Dec 2022 06:08:14 -0800</pubDate><guid>https://blog.zero-iee.com/posts/hello-world/</guid><description>&lt;p>Willkommen auf dem Tech Blog der &lt;a href="https://zero-iee.com">ZERO GmbH&lt;/a>!&lt;/p>
&lt;p>In Kürze werden wir hier Erfahrungen und Notizen aus unserer technischen Entwicklung vorstellen, in der Hoffnung, dass sie für Andere hilfreich sind.&lt;/p></description></item></channel></rss>