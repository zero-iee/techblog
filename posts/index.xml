<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on ZERO GmbH Tech Blog</title><link>https://blog.zero-iee.com/posts/</link><description>ZERO GmbH Tech Blog (Posts)</description><generator>Hugo -- gohugo.io</generator><language>de-de</language><lastBuildDate>Fri, 23 Dec 2022 09:20:52 +0100</lastBuildDate><atom:link href="https://blog.zero-iee.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Linux Kernelmodule mit Source-Änderungen neu kompilieren</title><link>https://blog.zero-iee.com/posts/linux-kernelmodule-mit-aenderungen-neu-kompilieren/</link><pubDate>Fri, 23 Dec 2022 09:20:52 +0100</pubDate><guid>https://blog.zero-iee.com/posts/linux-kernelmodule-mit-aenderungen-neu-kompilieren/</guid><description>&lt;p>Wer - wie wir bei der ZERO GmbH - mit neuer Hardware hantiert, die vom Linux-Kernel noch gar nicht oder nur teilweise unterstützt wird, muss in einigen Fällen bestehende Kerneltreiber anpassen. In unserem konkreten Fall ging es dabei um ein 5G Mobilfunkmodem, das vom uns eingesetzten Linux-Kernel noch nicht korrekt als solches erkannt wurde. Die Hardware war mit ihrer USB Vendor- und Product-ID noch nicht in den dazugehörigen Treibern registriert und weitere Detailanpassungen mussten in den betroffenen Subsystemen vorgenommen werden.&lt;/p>
&lt;p>Glücklicherweise lagert die Linuxdistribution Ubuntu die meisten Kerneltreiber in flexibel generierbare Kernelmodule (&lt;code>.ko&lt;/code> Dateien) aus, sodass nicht der gesamte Kernel nach Änderungen neu kompiliert werden muss. Wie Änderungen beispielhaft am USB-Treiber &amp;ldquo;&lt;code>option&lt;/code>&amp;rdquo; durchgeführt werden können, wird im Folgenden erklärt.&lt;/p>
&lt;p>Zunächst einmal wird eine Quelltextkopie des aktuell laufenden Linux-Kernels heruntergeladen. Unter Ubuntu funktioniert das ganz einfach über die Installation des jeweiligen &lt;code>linux-source&lt;/code> Pakets:&lt;/p>
&lt;pre>&lt;code>sudo apt install linux-source
&lt;/code>&lt;/pre>
&lt;p>Die Sourcen liegen nach der Installation unter &lt;code>/usr/src/linux-source-5.15.0.tar.bz2&lt;/code> (Ubuntu 22.04.1) und können in das Home-Directory extrahiert werden:&lt;/p>
&lt;pre>&lt;code>tar -xf /usr/src/linux-source-5.15.0.tar.bz2 -C ~/
&lt;/code>&lt;/pre>
&lt;p>Außerdem werden die Linux Header installiert - passend zur Kernelversion:&lt;/p>
&lt;pre>&lt;code>sudo apt install linux-headers-$(uname -r)
&lt;/code>&lt;/pre>
&lt;p>Damit der Linux-Kernel bzw. seine Module überhaupt gebaut oder konfiguriert werden können, müssen ggf. noch einige weitere Softwarepakete installiert werden:&lt;/p>
&lt;pre>&lt;code>sudo apt install linux-headers-$(uname -r)
sudo apt install build-essential libncurses-dev gawk flex bison libssl-dev dkms libelf-dev libudev-dev libpci-dev libiberty-dev autoconf llvm
&lt;/code>&lt;/pre>
&lt;p>Nach einem Wechsel in das entpackte Source-Verzeichnis wird die Konfiguration des aktuell laufenden Kernels in die Buildumgebung übertragen:&lt;/p>
&lt;pre>&lt;code>cd ~/linux-source-5.15.0/
make oldconfig
&lt;/code>&lt;/pre>
&lt;p>Bevor es an die Änderungen im Sourcecode der Kerneltreiber geht, wird die Buildumgebung noch vorbereitet:&lt;/p>
&lt;pre>&lt;code>make scripts prepare modules_prepare
&lt;/code>&lt;/pre>
&lt;p>An dieser Stelle können nun die nötigen Änderungen am Treiber vorgenommen werden. In unserem Beispiel also unter &lt;code>drivers/usb/serial/option.c&lt;/code>. Sobald die Änderungen gespeichert sind, kann das betroffene Modul oder Subsystem (in diesem Fall &lt;code>usb/serial&lt;/code>) neu gebaut werden:&lt;/p>
&lt;pre>&lt;code>make -C /lib/modules/$(uname -r)/build M=$(pwd)/drivers/usb/serial
&lt;/code>&lt;/pre>
&lt;p>Dabei werden in &lt;code>drivers/usb/serial&lt;/code> neue &lt;code>.ko&lt;/code> Dateien generiert, die nun in das System installiert werden können:&lt;/p>
&lt;pre>&lt;code>sudo cp --backup drivers/usb/serial/option.ko /lib/modules/$(uname -r)/kernel/drivers/usb/serial/option.ko
&lt;/code>&lt;/pre>
&lt;p>Ein abschließendes&lt;/p>
&lt;pre>&lt;code>sudo depmod
&lt;/code>&lt;/pre>
&lt;p>generiert die Kernelmodul-Abhängigkeiten neu, sodass nach einem Neustart des Systems die veränderte Version des Kernelmoduls/-treibers geladen wird.&lt;/p>
&lt;p>Beachtet, dass diese Methode, Änderungen ins System einzupflegen, nicht unbedingt &amp;ldquo;Update-resistent&amp;rdquo; ist. Da wir hier &amp;ldquo;am Paketmanager vorbei arbeiten&amp;rdquo;, ist sich dieser unserer Änderungen nicht bewusst und überschreibt ggf. unsere Modulversion mit einer neuen, von Canonical ausgelieferten Version. Bei Updates des Kernels oder seiner Module ist also Vorsicht geboten. Für kleine proof-of-concepts eignet sich dieser Weg dennoch.&lt;/p></description></item><item><title>Embedded Linux: Video in Endlosschleife auf Framebuffer abspielen mit mplayer</title><link>https://blog.zero-iee.com/posts/embedded-linux-video-auf-framebuffer-abspielen-mplayer/</link><pubDate>Wed, 21 Dec 2022 02:38:26 -0800</pubDate><guid>https://blog.zero-iee.com/posts/embedded-linux-video-auf-framebuffer-abspielen-mplayer/</guid><description>&lt;p>Vor allem für Demozwecke, z.B. auf Messen, fragen Kunden immer wieder nach Displayansteuerungen, die eine Videodatei auf einem oder mehreren Bildschirmen präsentieren. Während sich zum Teil abenteuerliche Lösungen mit Windows und automatisch startenden PowerPoint-Präsentationen mit eingebettetem Video finden lassen, waren wir von ZERO auf der Suche nach einer eleganteren Lösung, die zudem zügig startet und wenig Raum für Fehlbedienung lässt.&lt;/p>
&lt;p>Zentraler Bestandteil in unserem Ubuntu-basierten Setup ist der &lt;code>mplayer&lt;/code> - ein Videoplayer, der seinen Videoutput nicht nur in einer grafischen Desktopumgebung einbetten kann, sondern diesen auch ganz ohne GUI direkt auf den Framebuffer schreiben kann. So können wir auf das Laden einer Xorg- oder Wayland-basierten Desktupumgebung verzichten und beschlenigen den Bootprozess deutlich. Zudem entstehen keine Hürden wie Login oder automatisch startende Applikationen, die das Video verdecken (z.B. der Ubuntu Softwareupdatedienst).&lt;/p>
&lt;p>Der &lt;code>mplayer&lt;/code> kann aus den Standardpaketquellen von Ubuntu bezogen werden:&lt;/p>
&lt;pre>&lt;code>apt update
apt install mplayer
&lt;/code>&lt;/pre>
&lt;p>Nach der Installation wird unter &lt;code>/opt/runvideo.sh&lt;/code> ein Script angelegt, das &lt;code>mplayer&lt;/code> mit einigen Parametern startet:&lt;/p>
&lt;pre tabindex="0">&lt;code>#!/bin/bash
VIDEOFILE=$(find /home/showdisplay/Videos/ -type f -print -quit)
mplayer -vo sdl:driver=fbcon ${VIDEOFILE} -loop 0
&lt;/code>&lt;/pre>&lt;p>In der zweiten Zeile wird die erste Videodatei ermittelt, die sich im Verzeichnis &lt;code>/home/showdisplay/Videos&lt;/code> befindet (nach alphabetischer Reihenfolge). In Zeile 3 passiert dann die eigentliche &lt;code>mplayer&lt;/code>-Magie:&lt;/p>
&lt;ul>
&lt;li>&lt;code>-vo sdl:driver=fbcon&lt;/code>: Video auf dem Framebuffer wiedergeben&lt;/li>
&lt;li>&lt;code>-loop 0&lt;/code>: Das Video in einer Endlosschleife abspielen. &lt;strong>WICHTIG: Dieser Parameter muss an letzter Stelle stehen - sonst startet nicht nur das Video neu, sondern die gesamte &lt;code>mplayer&lt;/code> Instanz. Das führt zu einem deutlichen Flackern beim Neustart. Das Verhalten ist nicht dokumentiert. Deshalb sei hiermit explizit darauf hingewiesen.&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Das Startscript wird nun noch ausführbar gemacht:&lt;/p>
&lt;pre>&lt;code>chmod u+x /opt/runvideo.sh
&lt;/code>&lt;/pre>
&lt;p>&amp;hellip; und eine &lt;code>systemd&lt;/code> Servicedatei wird erstellt, um das Script beim Boot automatisch auszuführen:&lt;/p>
&lt;pre tabindex="0">&lt;code>[Unit]
Description=Run video
ConditionPathExists=/opt/runvideo.sh
[Service]
Type=forking
ExecStart=/opt/runvideo.sh
TimeoutSec=0
StandardOutput=tty
RemainAfterExit=yes
SysVStartPriority=99
[Install]
WantedBy=multi-user.target
&lt;/code>&lt;/pre>&lt;p>Zuletzt wird der neue Service aktiviert:&lt;/p>
&lt;pre>&lt;code>systemctl daemon-reload
systemctl enable runvideo.service
&lt;/code>&lt;/pre>
&lt;p>Da keine GUI benötigt wird (bzw. in diesem Fall sogar stört), wird der Gnome Desktop Manager (GDM) deaktiviert:&lt;/p>
&lt;pre>&lt;code>sudo systemctl disable gdm
&lt;/code>&lt;/pre>
&lt;p>Fertig!&lt;/p>
&lt;p>Sobald der Displaycontroller neu gestartet wird, wird die erste Videodatei aus &lt;code>/home/showdisplay/Videos/&lt;/code> abgespielt - zumindest, solange das Format vom &lt;code>mplayer&lt;/code> unterstützt wird.&lt;/p></description></item><item><title>Hello World!</title><link>https://blog.zero-iee.com/posts/hello-world/</link><pubDate>Tue, 20 Dec 2022 06:08:14 -0800</pubDate><guid>https://blog.zero-iee.com/posts/hello-world/</guid><description>&lt;p>Willkommen auf dem Tech Blog der &lt;a href="https://zero-iee.com">ZERO GmbH&lt;/a>!&lt;/p>
&lt;p>In Kürze werden wir hier Erfahrungen und Notizen aus unserer technischen Entwicklung vorstellen, in der Hoffnung, dass sie für Andere hilfreich sind.&lt;/p></description></item></channel></rss>